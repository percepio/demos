
WiFi_HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  08009248  08009248  0000a248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e84  08009e84  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e8c  08009e8c  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e8c  08009e8c  0000ae8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e90  08009e90  0000ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009e94  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          000013d0  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00016800  20001458  20001458  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001850b  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000c1  00000000  00000000  000235c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0001427e  00000000  00000000  00023684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002cff  00000000  00000000  00037902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001300  00000000  00000000  0003a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010532f  00000000  00000000  0003b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ebb  00000000  00000000  00140c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002aa1e  00000000  00000000  00141af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016c510  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c18  00000000  00000000  0016c554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009230 	.word	0x08009230

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009230 	.word	0x08009230

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000574:	f002 fc9c 	bl	8002eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800059e:	f007 fedd 	bl	800835c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a2:	f000 f80f 	bl	80005c4 <main>

080005a6 <LoopForever>:

LoopForever:
    b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80005b4:	08009e94 	.word	0x08009e94
  ldr r2, =_sbss
 80005b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80005bc:	20001458 	.word	0x20001458

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f002 feea 	bl	80033a0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 fbc4 	bl	8000d58 <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f002 fca3 	bl	8002f1c <BSP_LED_Init>
  //HAL_ADC_Start(&AdcHandle) ;

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80005d6:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <main+0x6c>)
 80005d8:	4a16      	ldr	r2, [pc, #88]	@ (8000634 <main+0x70>)
 80005da:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <main+0x6c>)
 80005de:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e2:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <main+0x6c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <main+0x6c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <main+0x6c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <main+0x6c>)
 80005f8:	220c      	movs	r2, #12
 80005fa:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <main+0x6c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <main+0x6c>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <main+0x6c>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <main+0x6c>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	@ 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 8000614:	4906      	ldr	r1, [pc, #24]	@ (8000630 <main+0x6c>)
 8000616:	2000      	movs	r0, #0
 8000618:	f002 fcdc 	bl	8002fd4 <BSP_COM_Init>
  BSP_TSENSOR_Init();
 800061c:	f002 fe96 	bl	800334c <BSP_TSENSOR_Init>

  printf("****** WIFI Web Server demonstration****** \n\n");
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <main+0x74>)
 8000622:	f007 fc91 	bl	8007f48 <puts>

#endif /* TERMINAL_USE */

  wifi_server();
 8000626:	f000 f88b 	bl	8000740 <wifi_server>
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000127c 	.word	0x2000127c
 8000634:	40013800 	.word	0x40013800
 8000638:	08009248 	.word	0x08009248

0800063c <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000642:	f002 fa01 	bl	8002a48 <WIFI_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d124      	bne.n	8000696 <wifi_start+0x5a>
  {
    LOG(("ES-WIFI Initialized.\n"));
 800064c:	4815      	ldr	r0, [pc, #84]	@ (80006a4 <wifi_start+0x68>)
 800064e:	f007 fc7b 	bl	8007f48 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2106      	movs	r1, #6
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fa44 	bl	8002ae4 <WIFI_GetMAC_Address>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d113      	bne.n	800068a <wifi_start+0x4e>
    {
      LOG(("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000662:	783b      	ldrb	r3, [r7, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	787b      	ldrb	r3, [r7, #1]
 8000668:	461c      	mov	r4, r3
 800066a:	78bb      	ldrb	r3, [r7, #2]
 800066c:	461d      	mov	r5, r3
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	793a      	ldrb	r2, [r7, #4]
 8000672:	7979      	ldrb	r1, [r7, #5]
 8000674:	9102      	str	r1, [sp, #8]
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	462b      	mov	r3, r5
 800067c:	4622      	mov	r2, r4
 800067e:	4601      	mov	r1, r0
 8000680:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <wifi_start+0x6c>)
 8000682:	f007 fbf9 	bl	8007e78 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8000686:	2300      	movs	r3, #0
 8000688:	e007      	b.n	800069a <wifi_start+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 800068a:	4808      	ldr	r0, [pc, #32]	@ (80006ac <wifi_start+0x70>)
 800068c:	f007 fc5c 	bl	8007f48 <puts>
      return -1;
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	e001      	b.n	800069a <wifi_start+0x5e>
    return -1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bdb0      	pop	{r4, r5, r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08009278 	.word	0x08009278
 80006a8:	08009290 	.word	0x08009290
 80006ac:	080092d0 	.word	0x080092d0

080006b0 <wifi_connect>:



int wifi_connect(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8

  wifi_start();
 80006b6:	f7ff ffc1 	bl	800063c <wifi_start>

  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 80006ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000724 <wifi_connect+0x74>)
 80006bc:	491a      	ldr	r1, [pc, #104]	@ (8000728 <wifi_connect+0x78>)
 80006be:	481b      	ldr	r0, [pc, #108]	@ (800072c <wifi_connect+0x7c>)
 80006c0:	f007 fbda 	bl	8007e78 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80006c4:	2203      	movs	r2, #3
 80006c6:	4917      	ldr	r1, [pc, #92]	@ (8000724 <wifi_connect+0x74>)
 80006c8:	4817      	ldr	r0, [pc, #92]	@ (8000728 <wifi_connect+0x78>)
 80006ca:	f002 f9e9 	bl	8002aa0 <WIFI_Connect>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d11e      	bne.n	8000712 <wifi_connect+0x62>
  {
    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 80006d4:	2104      	movs	r1, #4
 80006d6:	4816      	ldr	r0, [pc, #88]	@ (8000730 <wifi_connect+0x80>)
 80006d8:	f002 fa24 	bl	8002b24 <WIFI_GetIP_Address>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d111      	bne.n	8000706 <wifi_connect+0x56>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <wifi_connect+0x80>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <wifi_connect+0x80>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <wifi_connect+0x80>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	4618      	mov	r0, r3
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <wifi_connect+0x80>)
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4603      	mov	r3, r0
 80006fc:	480d      	ldr	r0, [pc, #52]	@ (8000734 <wifi_connect+0x84>)
 80006fe:	f007 fbbb 	bl	8007e78 <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 8000702:	2300      	movs	r3, #0
 8000704:	e00a      	b.n	800071c <wifi_connect+0x6c>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 8000706:	480c      	ldr	r0, [pc, #48]	@ (8000738 <wifi_connect+0x88>)
 8000708:	f007 fc1e 	bl	8007f48 <puts>
      return -1;
 800070c:	f04f 33ff 	mov.w	r3, #4294967295
 8000710:	e004      	b.n	800071c <wifi_connect+0x6c>
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 8000712:	480a      	ldr	r0, [pc, #40]	@ (800073c <wifi_connect+0x8c>)
 8000714:	f007 fc18 	bl	8007f48 <puts>
     return -1;
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	080092f4 	.word	0x080092f4
 8000728:	08009300 	.word	0x08009300
 800072c:	08009310 	.word	0x08009310
 8000730:	200004a4 	.word	0x200004a4
 8000734:	08009328 	.word	0x08009328
 8000738:	08009364 	.word	0x08009364
 800073c:	08009394 	.word	0x08009394

08000740 <wifi_server>:

int wifi_server(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b087      	sub	sp, #28
 8000744:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 800074a:	483e      	ldr	r0, [pc, #248]	@ (8000844 <wifi_server+0x104>)
 800074c:	f007 fbfc 	bl	8007f48 <puts>
  if (wifi_connect()!=0) return -1;
 8000750:	f7ff ffae 	bl	80006b0 <wifi_connect>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <wifi_server+0x20>
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	e06d      	b.n	800083c <wifi_server+0xfc>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 8000760:	2350      	movs	r3, #80	@ 0x50
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	4b38      	ldr	r3, [pc, #224]	@ (8000848 <wifi_server+0x108>)
 8000766:	2201      	movs	r2, #1
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f002 f9fe 	bl	8002b6c <WIFI_StartServer>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8000776:	4835      	ldr	r0, [pc, #212]	@ (800084c <wifi_server+0x10c>)
 8000778:	f007 fbe6 	bl	8007f48 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 800077c:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <wifi_server+0x110>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	4b33      	ldr	r3, [pc, #204]	@ (8000850 <wifi_server+0x110>)
 8000784:	785b      	ldrb	r3, [r3, #1]
 8000786:	461a      	mov	r2, r3
 8000788:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <wifi_server+0x110>)
 800078a:	789b      	ldrb	r3, [r3, #2]
 800078c:	4618      	mov	r0, r3
 800078e:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <wifi_server+0x110>)
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4603      	mov	r3, r0
 8000796:	482f      	ldr	r0, [pc, #188]	@ (8000854 <wifi_server+0x114>)
 8000798:	f007 fb6e 	bl	8007e78 <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,sizeof(RemoteIP), &RemotePort))
 800079c:	e00f      	b.n	80007be <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <wifi_server+0x110>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <wifi_server+0x110>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <wifi_server+0x110>)
 80007ac:	789b      	ldrb	r3, [r3, #2]
 80007ae:	4618      	mov	r0, r3
 80007b0:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <wifi_server+0x110>)
 80007b2:	78db      	ldrb	r3, [r3, #3]
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4603      	mov	r3, r0
 80007b8:	4827      	ldr	r0, [pc, #156]	@ (8000858 <wifi_server+0x118>)
 80007ba:	f007 fb5d 	bl	8007e78 <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,sizeof(RemoteIP), &RemotePort))
 80007be:	f107 0208 	add.w	r2, r7, #8
 80007c2:	1dbb      	adds	r3, r7, #6
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2304      	movs	r3, #4
 80007c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007cc:	2000      	movs	r0, #0
 80007ce:	f002 f9fd 	bl	8002bcc <WIFI_WaitServerConnection>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1e2      	bne.n	800079e <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80007d8:	7a3b      	ldrb	r3, [r7, #8]
 80007da:	4619      	mov	r1, r3
 80007dc:	7a7b      	ldrb	r3, [r7, #9]
 80007de:	4618      	mov	r0, r3
 80007e0:	7abb      	ldrb	r3, [r7, #10]
 80007e2:	461c      	mov	r4, r3
 80007e4:	7afb      	ldrb	r3, [r7, #11]
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	9201      	str	r2, [sp, #4]
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4623      	mov	r3, r4
 80007ee:	4602      	mov	r2, r0
 80007f0:	481a      	ldr	r0, [pc, #104]	@ (800085c <wifi_server+0x11c>)
 80007f2:	f007 fb41 	bl	8007e78 <iprintf>

    StopServer=WebServerProcess();
 80007f6:	f000 f839 	bl	800086c <WebServerProcess>
 80007fa:	4603      	mov	r3, r0
 80007fc:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 80007fe:	2000      	movs	r0, #0
 8000800:	f002 fa2e 	bl	8002c60 <WIFI_CloseServerConnection>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <wifi_server+0xd6>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 800080a:	4815      	ldr	r0, [pc, #84]	@ (8000860 <wifi_server+0x120>)
 800080c:	f007 fb9c 	bl	8007f48 <puts>
      return -1;
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	e012      	b.n	800083c <wifi_server+0xfc>
    }
  }
  while(StopServer == false);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	f083 0301 	eor.w	r3, r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1cd      	bne.n	80007be <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 8000822:	2000      	movs	r0, #0
 8000824:	f002 fa34 	bl	8002c90 <WIFI_StopServer>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <wifi_server+0xf4>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 800082e:	480d      	ldr	r0, [pc, #52]	@ (8000864 <wifi_server+0x124>)
 8000830:	f007 fb8a 	bl	8007f48 <puts>
  }

  LOG(("Server is stop\n"));
 8000834:	480c      	ldr	r0, [pc, #48]	@ (8000868 <wifi_server+0x128>)
 8000836:	f007 fb87 	bl	8007f48 <puts>
  return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	bd90      	pop	{r4, r7, pc}
 8000844:	080093bc 	.word	0x080093bc
 8000848:	080093d8 	.word	0x080093d8
 800084c:	080093dc 	.word	0x080093dc
 8000850:	200004a4 	.word	0x200004a4
 8000854:	080093f8 	.word	0x080093f8
 8000858:	08009448 	.word	0x08009448
 800085c:	0800946c 	.word	0x0800946c
 8000860:	08009490 	.word	0x08009490
 8000864:	080094c4 	.word	0x080094c4
 8000868:	080094e0 	.word	0x080094e0

0800086c <WebServerProcess>:


static bool WebServerProcess(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 8000872:	2300      	movs	r3, #0
 8000874:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800087e:	9200      	str	r2, [sp, #0]
 8000880:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000884:	4954      	ldr	r1, [pc, #336]	@ (80009d8 <WebServerProcess+0x16c>)
 8000886:	2000      	movs	r0, #0
 8000888:	f002 fa3c 	bl	8002d04 <WIFI_ReceiveData>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 809a 	bne.w	80009c8 <WebServerProcess+0x15c>
  {
   LOG(("get %d byte from server\n",respLen));
 8000894:	89bb      	ldrh	r3, [r7, #12]
 8000896:	4619      	mov	r1, r3
 8000898:	4850      	ldr	r0, [pc, #320]	@ (80009dc <WebServerProcess+0x170>)
 800089a:	f007 faed 	bl	8007e78 <iprintf>

   if( respLen > 0)
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 8094 	beq.w	80009ce <WebServerProcess+0x162>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 80008a6:	494e      	ldr	r1, [pc, #312]	@ (80009e0 <WebServerProcess+0x174>)
 80008a8:	484b      	ldr	r0, [pc, #300]	@ (80009d8 <WebServerProcess+0x16c>)
 80008aa:	f007 fcf5 	bl	8008298 <strstr>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d01c      	beq.n	80008ee <WebServerProcess+0x82>
      {
        temp = (int) BSP_TSENSOR_ReadTemp();
 80008b4:	f002 fd66 	bl	8003384 <BSP_TSENSOR_ReadTemp>
 80008b8:	eef0 7a40 	vmov.f32	s15, s0
 80008bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80008c4:	793b      	ldrb	r3, [r7, #4]
 80008c6:	73bb      	strb	r3, [r7, #14]
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80008c8:	4b46      	ldr	r3, [pc, #280]	@ (80009e4 <WebServerProcess+0x178>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	7bba      	ldrb	r2, [r7, #14]
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f8a0 	bl	8000a18 <SendWebPage>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d003      	beq.n	80008e6 <WebServerProcess+0x7a>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 80008de:	4842      	ldr	r0, [pc, #264]	@ (80009e8 <WebServerProcess+0x17c>)
 80008e0:	f007 fb32 	bl	8007f48 <puts>
 80008e4:	e073      	b.n	80009ce <WebServerProcess+0x162>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 80008e6:	4841      	ldr	r0, [pc, #260]	@ (80009ec <WebServerProcess+0x180>)
 80008e8:	f007 fb2e 	bl	8007f48 <puts>
 80008ec:	e06f      	b.n	80009ce <WebServerProcess+0x162>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80008ee:	4940      	ldr	r1, [pc, #256]	@ (80009f0 <WebServerProcess+0x184>)
 80008f0:	4839      	ldr	r0, [pc, #228]	@ (80009d8 <WebServerProcess+0x16c>)
 80008f2:	f007 fcd1 	bl	8008298 <strstr>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d068      	beq.n	80009ce <WebServerProcess+0x162>
       {
         LOG(("Post request\n"));
 80008fc:	483d      	ldr	r0, [pc, #244]	@ (80009f4 <WebServerProcess+0x188>)
 80008fe:	f007 fb23 	bl	8007f48 <puts>

         if(strstr((char *)resp, "radio"))
 8000902:	493d      	ldr	r1, [pc, #244]	@ (80009f8 <WebServerProcess+0x18c>)
 8000904:	4834      	ldr	r0, [pc, #208]	@ (80009d8 <WebServerProcess+0x16c>)
 8000906:	f007 fcc7 	bl	8008298 <strstr>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d024      	beq.n	800095a <WebServerProcess+0xee>
         {
           if(strstr((char *)resp, "radio=0"))
 8000910:	493a      	ldr	r1, [pc, #232]	@ (80009fc <WebServerProcess+0x190>)
 8000912:	4831      	ldr	r0, [pc, #196]	@ (80009d8 <WebServerProcess+0x16c>)
 8000914:	f007 fcc0 	bl	8008298 <strstr>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d006      	beq.n	800092c <WebServerProcess+0xc0>
           {
             LedState = 0;
 800091e:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <WebServerProcess+0x178>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8000924:	2000      	movs	r0, #0
 8000926:	f002 fb3f 	bl	8002fa8 <BSP_LED_Off>
 800092a:	e00c      	b.n	8000946 <WebServerProcess+0xda>
           }
           else if(strstr((char *)resp, "radio=1"))
 800092c:	4934      	ldr	r1, [pc, #208]	@ (8000a00 <WebServerProcess+0x194>)
 800092e:	482a      	ldr	r0, [pc, #168]	@ (80009d8 <WebServerProcess+0x16c>)
 8000930:	f007 fcb2 	bl	8008298 <strstr>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <WebServerProcess+0xda>
           {
             LedState = 1;
 800093a:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <WebServerProcess+0x178>)
 800093c:	2201      	movs	r2, #1
 800093e:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 8000940:	2000      	movs	r0, #0
 8000942:	f002 fb1b 	bl	8002f7c <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 8000946:	f002 fd1d 	bl	8003384 <BSP_TSENSOR_ReadTemp>
 800094a:	eef0 7a40 	vmov.f32	s15, s0
 800094e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000952:	edc7 7a01 	vstr	s15, [r7, #4]
 8000956:	793b      	ldrb	r3, [r7, #4]
 8000958:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 800095a:	492a      	ldr	r1, [pc, #168]	@ (8000a04 <WebServerProcess+0x198>)
 800095c:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <WebServerProcess+0x16c>)
 800095e:	f007 fc9b 	bl	8008298 <strstr>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d012      	beq.n	800098e <WebServerProcess+0x122>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8000968:	4927      	ldr	r1, [pc, #156]	@ (8000a08 <WebServerProcess+0x19c>)
 800096a:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <WebServerProcess+0x16c>)
 800096c:	f007 fc94 	bl	8008298 <strstr>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <WebServerProcess+0x110>
           {
             stopserver = false;
 8000976:	2300      	movs	r3, #0
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	e008      	b.n	800098e <WebServerProcess+0x122>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 800097c:	4923      	ldr	r1, [pc, #140]	@ (8000a0c <WebServerProcess+0x1a0>)
 800097e:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <WebServerProcess+0x16c>)
 8000980:	f007 fc8a 	bl	8008298 <strstr>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <WebServerProcess+0x122>
           {
             stopserver = true;
 800098a:	2301      	movs	r3, #1
 800098c:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 800098e:	f002 fcf9 	bl	8003384 <BSP_TSENSOR_ReadTemp>
 8000992:	eef0 7a40 	vmov.f32	s15, s0
 8000996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800099a:	edc7 7a01 	vstr	s15, [r7, #4]
 800099e:	793b      	ldrb	r3, [r7, #4]
 80009a0:	73bb      	strb	r3, [r7, #14]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <WebServerProcess+0x178>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	7bba      	ldrb	r2, [r7, #14]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f833 	bl	8000a18 <SendWebPage>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <WebServerProcess+0x154>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 80009b8:	480b      	ldr	r0, [pc, #44]	@ (80009e8 <WebServerProcess+0x17c>)
 80009ba:	f007 fac5 	bl	8007f48 <puts>
 80009be:	e006      	b.n	80009ce <WebServerProcess+0x162>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <WebServerProcess+0x1a4>)
 80009c2:	f007 fac1 	bl	8007f48 <puts>
 80009c6:	e002      	b.n	80009ce <WebServerProcess+0x162>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 80009c8:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <WebServerProcess+0x1a8>)
 80009ca:	f007 fabd 	bl	8007f48 <puts>
  }
  return stopserver;
 80009ce:	7bfb      	ldrb	r3, [r7, #15]

 }
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200004ac 	.word	0x200004ac
 80009dc:	080094f0 	.word	0x080094f0
 80009e0:	0800950c 	.word	0x0800950c
 80009e4:	200004a8 	.word	0x200004a8
 80009e8:	08009510 	.word	0x08009510
 80009ec:	08009530 	.word	0x08009530
 80009f0:	08009550 	.word	0x08009550
 80009f4:	08009558 	.word	0x08009558
 80009f8:	08009568 	.word	0x08009568
 80009fc:	08009570 	.word	0x08009570
 8000a00:	08009578 	.word	0x08009578
 8000a04:	08009580 	.word	0x08009580
 8000a08:	0800958c 	.word	0x0800958c
 8000a0c:	0800959c 	.word	0x0800959c
 8000a10:	080095ac 	.word	0x080095ac
 8000a14:	080095cc 	.word	0x080095cc

08000a18 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	b093      	sub	sp, #76	@ 0x4c
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8000a28:	4abc      	ldr	r2, [pc, #752]	@ (8000d1c <SendWebPage+0x304>)
 8000a2a:	4bbd      	ldr	r3, [pc, #756]	@ (8000d20 <SendWebPage+0x308>)
 8000a2c:	4614      	mov	r4, r2
 8000a2e:	461d      	mov	r5, r3
 8000a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a40:	c407      	stmia	r4!, {r0, r1, r2}
 8000a42:	8023      	strh	r3, [r4, #0]
 8000a44:	3402      	adds	r4, #2
 8000a46:	0c1b      	lsrs	r3, r3, #16
 8000a48:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 8000a4a:	48b4      	ldr	r0, [pc, #720]	@ (8000d1c <SendWebPage+0x304>)
 8000a4c:	f7ff fbc0 	bl	80001d0 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4bb1      	ldr	r3, [pc, #708]	@ (8000d1c <SendWebPage+0x304>)
 8000a56:	4413      	add	r3, r2
 8000a58:	4ab2      	ldr	r2, [pc, #712]	@ (8000d24 <SendWebPage+0x30c>)
 8000a5a:	461d      	mov	r5, r3
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a60:	6028      	str	r0, [r5, #0]
 8000a62:	6069      	str	r1, [r5, #4]
 8000a64:	60aa      	str	r2, [r5, #8]
 8000a66:	60eb      	str	r3, [r5, #12]
 8000a68:	7823      	ldrb	r3, [r4, #0]
 8000a6a:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8000a6c:	48ab      	ldr	r0, [pc, #684]	@ (8000d1c <SendWebPage+0x304>)
 8000a6e:	f7ff fbaf 	bl	80001d0 <strlen>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4ba9      	ldr	r3, [pc, #676]	@ (8000d1c <SendWebPage+0x304>)
 8000a78:	4413      	add	r3, r2
 8000a7a:	4aab      	ldr	r2, [pc, #684]	@ (8000d28 <SendWebPage+0x310>)
 8000a7c:	4614      	mov	r4, r2
 8000a7e:	469c      	mov	ip, r3
 8000a80:	f104 0e20 	add.w	lr, r4, #32
 8000a84:	4665      	mov	r5, ip
 8000a86:	4626      	mov	r6, r4
 8000a88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a8a:	6028      	str	r0, [r5, #0]
 8000a8c:	6069      	str	r1, [r5, #4]
 8000a8e:	60aa      	str	r2, [r5, #8]
 8000a90:	60eb      	str	r3, [r5, #12]
 8000a92:	3410      	adds	r4, #16
 8000a94:	f10c 0c10 	add.w	ip, ip, #16
 8000a98:	4574      	cmp	r4, lr
 8000a9a:	d1f3      	bne.n	8000a84 <SendWebPage+0x6c>
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 8000aa4:	489d      	ldr	r0, [pc, #628]	@ (8000d1c <SendWebPage+0x304>)
 8000aa6:	f7ff fb93 	bl	80001d0 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b9b      	ldr	r3, [pc, #620]	@ (8000d1c <SendWebPage+0x304>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a9e      	ldr	r2, [pc, #632]	@ (8000d2c <SendWebPage+0x314>)
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	469c      	mov	ip, r3
 8000ab8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000abc:	4665      	mov	r5, ip
 8000abe:	4626      	mov	r6, r4
 8000ac0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ac2:	6028      	str	r0, [r5, #0]
 8000ac4:	6069      	str	r1, [r5, #4]
 8000ac6:	60aa      	str	r2, [r5, #8]
 8000ac8:	60eb      	str	r3, [r5, #12]
 8000aca:	3410      	adds	r4, #16
 8000acc:	f10c 0c10 	add.w	ip, ip, #16
 8000ad0:	4574      	cmp	r4, lr
 8000ad2:	d1f3      	bne.n	8000abc <SendWebPage+0xa4>
 8000ad4:	4665      	mov	r5, ip
 8000ad6:	4623      	mov	r3, r4
 8000ad8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ada:	6028      	str	r0, [r5, #0]
 8000adc:	6069      	str	r1, [r5, #4]
 8000ade:	60aa      	str	r2, [r5, #8]
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8000ae4:	488d      	ldr	r0, [pc, #564]	@ (8000d1c <SendWebPage+0x304>)
 8000ae6:	f7ff fb73 	bl	80001d0 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b8b      	ldr	r3, [pc, #556]	@ (8000d1c <SendWebPage+0x304>)
 8000af0:	4413      	add	r3, r2
 8000af2:	4a8f      	ldr	r2, [pc, #572]	@ (8000d30 <SendWebPage+0x318>)
 8000af4:	461c      	mov	r4, r3
 8000af6:	4613      	mov	r3, r2
 8000af8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000afa:	6020      	str	r0, [r4, #0]
 8000afc:	6061      	str	r1, [r4, #4]
 8000afe:	60a2      	str	r2, [r4, #8]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8000b04:	4885      	ldr	r0, [pc, #532]	@ (8000d1c <SendWebPage+0x304>)
 8000b06:	f7ff fb63 	bl	80001d0 <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b83      	ldr	r3, [pc, #524]	@ (8000d1c <SendWebPage+0x304>)
 8000b10:	4413      	add	r3, r2
 8000b12:	4a88      	ldr	r2, [pc, #544]	@ (8000d34 <SendWebPage+0x31c>)
 8000b14:	4614      	mov	r4, r2
 8000b16:	469c      	mov	ip, r3
 8000b18:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8000b1c:	4665      	mov	r5, ip
 8000b1e:	4626      	mov	r6, r4
 8000b20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b22:	6028      	str	r0, [r5, #0]
 8000b24:	6069      	str	r1, [r5, #4]
 8000b26:	60aa      	str	r2, [r5, #8]
 8000b28:	60eb      	str	r3, [r5, #12]
 8000b2a:	3410      	adds	r4, #16
 8000b2c:	f10c 0c10 	add.w	ip, ip, #16
 8000b30:	4574      	cmp	r4, lr
 8000b32:	d1f3      	bne.n	8000b1c <SendWebPage+0x104>
  sprintf((char *)temp, "%d", temperature);
 8000b34:	79ba      	ldrb	r2, [r7, #6]
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	497f      	ldr	r1, [pc, #508]	@ (8000d38 <SendWebPage+0x320>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f007 fa0b 	bl	8007f58 <siprintf>
  strcat((char *)http, (char *)temp);
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	4619      	mov	r1, r3
 8000b48:	4874      	ldr	r0, [pc, #464]	@ (8000d1c <SendWebPage+0x304>)
 8000b4a:	f007 fb15 	bl	8008178 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 8000b4e:	4873      	ldr	r0, [pc, #460]	@ (8000d1c <SendWebPage+0x304>)
 8000b50:	f7ff fb3e 	bl	80001d0 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	4b70      	ldr	r3, [pc, #448]	@ (8000d1c <SendWebPage+0x304>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a77      	ldr	r2, [pc, #476]	@ (8000d3c <SendWebPage+0x324>)
 8000b5e:	461d      	mov	r5, r3
 8000b60:	4614      	mov	r4, r2
 8000b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b64:	6028      	str	r0, [r5, #0]
 8000b66:	6069      	str	r1, [r5, #4]
 8000b68:	60aa      	str	r2, [r5, #8]
 8000b6a:	60eb      	str	r3, [r5, #12]
 8000b6c:	7823      	ldrb	r3, [r4, #0]
 8000b6e:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d040      	beq.n	8000bf8 <SendWebPage+0x1e0>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 8000b76:	4869      	ldr	r0, [pc, #420]	@ (8000d1c <SendWebPage+0x304>)
 8000b78:	f7ff fb2a 	bl	80001d0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b66      	ldr	r3, [pc, #408]	@ (8000d1c <SendWebPage+0x304>)
 8000b82:	4413      	add	r3, r2
 8000b84:	4a6e      	ldr	r2, [pc, #440]	@ (8000d40 <SendWebPage+0x328>)
 8000b86:	4614      	mov	r4, r2
 8000b88:	469c      	mov	ip, r3
 8000b8a:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000b8e:	4665      	mov	r5, ip
 8000b90:	4626      	mov	r6, r4
 8000b92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b94:	6028      	str	r0, [r5, #0]
 8000b96:	6069      	str	r1, [r5, #4]
 8000b98:	60aa      	str	r2, [r5, #8]
 8000b9a:	60eb      	str	r3, [r5, #12]
 8000b9c:	3410      	adds	r4, #16
 8000b9e:	f10c 0c10 	add.w	ip, ip, #16
 8000ba2:	4574      	cmp	r4, lr
 8000ba4:	d1f3      	bne.n	8000b8e <SendWebPage+0x176>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	4622      	mov	r2, r4
 8000baa:	6810      	ldr	r0, [r2, #0]
 8000bac:	6018      	str	r0, [r3, #0]
 8000bae:	8891      	ldrh	r1, [r2, #4]
 8000bb0:	7992      	ldrb	r2, [r2, #6]
 8000bb2:	8099      	strh	r1, [r3, #4]
 8000bb4:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8000bb6:	4859      	ldr	r0, [pc, #356]	@ (8000d1c <SendWebPage+0x304>)
 8000bb8:	f7ff fb0a 	bl	80001d0 <strlen>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <SendWebPage+0x304>)
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a5f      	ldr	r2, [pc, #380]	@ (8000d44 <SendWebPage+0x32c>)
 8000bc6:	4614      	mov	r4, r2
 8000bc8:	469c      	mov	ip, r3
 8000bca:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000bce:	4665      	mov	r5, ip
 8000bd0:	4626      	mov	r6, r4
 8000bd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bd4:	6028      	str	r0, [r5, #0]
 8000bd6:	6069      	str	r1, [r5, #4]
 8000bd8:	60aa      	str	r2, [r5, #8]
 8000bda:	60eb      	str	r3, [r5, #12]
 8000bdc:	3410      	adds	r4, #16
 8000bde:	f10c 0c10 	add.w	ip, ip, #16
 8000be2:	4574      	cmp	r4, lr
 8000be4:	d1f3      	bne.n	8000bce <SendWebPage+0x1b6>
 8000be6:	4665      	mov	r5, ip
 8000be8:	4623      	mov	r3, r4
 8000bea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bec:	6028      	str	r0, [r5, #0]
 8000bee:	6069      	str	r1, [r5, #4]
 8000bf0:	60aa      	str	r2, [r5, #8]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	81ab      	strh	r3, [r5, #12]
 8000bf6:	e03f      	b.n	8000c78 <SendWebPage+0x260>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8000bf8:	4848      	ldr	r0, [pc, #288]	@ (8000d1c <SendWebPage+0x304>)
 8000bfa:	f7ff fae9 	bl	80001d0 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b46      	ldr	r3, [pc, #280]	@ (8000d1c <SendWebPage+0x304>)
 8000c04:	4413      	add	r3, r2
 8000c06:	4a50      	ldr	r2, [pc, #320]	@ (8000d48 <SendWebPage+0x330>)
 8000c08:	4614      	mov	r4, r2
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000c10:	4665      	mov	r5, ip
 8000c12:	4626      	mov	r6, r4
 8000c14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c16:	6028      	str	r0, [r5, #0]
 8000c18:	6069      	str	r1, [r5, #4]
 8000c1a:	60aa      	str	r2, [r5, #8]
 8000c1c:	60eb      	str	r3, [r5, #12]
 8000c1e:	3410      	adds	r4, #16
 8000c20:	f10c 0c10 	add.w	ip, ip, #16
 8000c24:	4574      	cmp	r4, lr
 8000c26:	d1f3      	bne.n	8000c10 <SendWebPage+0x1f8>
 8000c28:	4665      	mov	r5, ip
 8000c2a:	4623      	mov	r3, r4
 8000c2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c2e:	6028      	str	r0, [r5, #0]
 8000c30:	6069      	str	r1, [r5, #4]
 8000c32:	60aa      	str	r2, [r5, #8]
 8000c34:	881b      	ldrh	r3, [r3, #0]
 8000c36:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8000c38:	4838      	ldr	r0, [pc, #224]	@ (8000d1c <SendWebPage+0x304>)
 8000c3a:	f7ff fac9 	bl	80001d0 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <SendWebPage+0x304>)
 8000c44:	4413      	add	r3, r2
 8000c46:	4a41      	ldr	r2, [pc, #260]	@ (8000d4c <SendWebPage+0x334>)
 8000c48:	4614      	mov	r4, r2
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000c50:	4665      	mov	r5, ip
 8000c52:	4626      	mov	r6, r4
 8000c54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c56:	6028      	str	r0, [r5, #0]
 8000c58:	6069      	str	r1, [r5, #4]
 8000c5a:	60aa      	str	r2, [r5, #8]
 8000c5c:	60eb      	str	r3, [r5, #12]
 8000c5e:	3410      	adds	r4, #16
 8000c60:	f10c 0c10 	add.w	ip, ip, #16
 8000c64:	4574      	cmp	r4, lr
 8000c66:	d1f3      	bne.n	8000c50 <SendWebPage+0x238>
 8000c68:	4663      	mov	r3, ip
 8000c6a:	4622      	mov	r2, r4
 8000c6c:	6810      	ldr	r0, [r2, #0]
 8000c6e:	6018      	str	r0, [r3, #0]
 8000c70:	8891      	ldrh	r1, [r2, #4]
 8000c72:	7992      	ldrb	r2, [r2, #6]
 8000c74:	8099      	strh	r1, [r3, #4]
 8000c76:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8000c78:	4828      	ldr	r0, [pc, #160]	@ (8000d1c <SendWebPage+0x304>)
 8000c7a:	f7ff faa9 	bl	80001d0 <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <SendWebPage+0x304>)
 8000c84:	4413      	add	r3, r2
 8000c86:	4a32      	ldr	r2, [pc, #200]	@ (8000d50 <SendWebPage+0x338>)
 8000c88:	4614      	mov	r4, r2
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8000c90:	4665      	mov	r5, ip
 8000c92:	4626      	mov	r6, r4
 8000c94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c96:	6028      	str	r0, [r5, #0]
 8000c98:	6069      	str	r1, [r5, #4]
 8000c9a:	60aa      	str	r2, [r5, #8]
 8000c9c:	60eb      	str	r3, [r5, #12]
 8000c9e:	3410      	adds	r4, #16
 8000ca0:	f10c 0c10 	add.w	ip, ip, #16
 8000ca4:	4574      	cmp	r4, lr
 8000ca6:	d1f3      	bne.n	8000c90 <SendWebPage+0x278>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8000ca8:	481c      	ldr	r0, [pc, #112]	@ (8000d1c <SendWebPage+0x304>)
 8000caa:	f7ff fa91 	bl	80001d0 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <SendWebPage+0x304>)
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a27      	ldr	r2, [pc, #156]	@ (8000d54 <SendWebPage+0x33c>)
 8000cb8:	461d      	mov	r5, r3
 8000cba:	4614      	mov	r4, r2
 8000cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbe:	6028      	str	r0, [r5, #0]
 8000cc0:	6069      	str	r1, [r5, #4]
 8000cc2:	60aa      	str	r2, [r5, #8]
 8000cc4:	60eb      	str	r3, [r5, #12]
 8000cc6:	8823      	ldrh	r3, [r4, #0]
 8000cc8:	78a2      	ldrb	r2, [r4, #2]
 8000cca:	822b      	strh	r3, [r5, #16]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8000cd0:	4812      	ldr	r0, [pc, #72]	@ (8000d1c <SendWebPage+0x304>)
 8000cd2:	f7ff fa7d 	bl	80001d0 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	f107 030a 	add.w	r3, r7, #10
 8000cde:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000ce2:	9100      	str	r1, [sp, #0]
 8000ce4:	490d      	ldr	r1, [pc, #52]	@ (8000d1c <SendWebPage+0x304>)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f001 ffea 	bl	8002cc0 <WIFI_SendData>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 8000cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10a      	bne.n	8000d10 <SendWebPage+0x2f8>
 8000cfa:	897b      	ldrh	r3, [r7, #10]
 8000cfc:	461c      	mov	r4, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	@ (8000d1c <SendWebPage+0x304>)
 8000d00:	f7ff fa66 	bl	80001d0 <strlen>
 8000d04:	4603      	mov	r3, r0
 8000d06:	429c      	cmp	r4, r3
 8000d08:	d002      	beq.n	8000d10 <SendWebPage+0x2f8>
  {
    ret = WIFI_STATUS_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return ret;
 8000d10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3744      	adds	r7, #68	@ 0x44
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1c:	200000a4 	.word	0x200000a4
 8000d20:	080095e4 	.word	0x080095e4
 8000d24:	08009624 	.word	0x08009624
 8000d28:	08009638 	.word	0x08009638
 8000d2c:	0800965c 	.word	0x0800965c
 8000d30:	0800969c 	.word	0x0800969c
 8000d34:	080096ac 	.word	0x080096ac
 8000d38:	080096ec 	.word	0x080096ec
 8000d3c:	080096f0 	.word	0x080096f0
 8000d40:	08009704 	.word	0x08009704
 8000d44:	0800973c 	.word	0x0800973c
 8000d48:	0800977c 	.word	0x0800977c
 8000d4c:	080097bc 	.word	0x080097bc
 8000d50:	080097f4 	.word	0x080097f4
 8000d54:	08009824 	.word	0x08009824

08000d58 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b096      	sub	sp, #88	@ 0x58
 8000d5c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d66:	2360      	movs	r3, #96	@ 0x60
 8000d68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d72:	2301      	movs	r3, #1
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d7a:	2328      	movs	r3, #40	@ 0x28
 8000d7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8000d82:	2307      	movs	r3, #7
 8000d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d86:	2304      	movs	r3, #4
 8000d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f003 fd09 	bl	80047a4 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x44>
  {
    /* Initialization Error */
    while(1);
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da0:	2303      	movs	r3, #3
 8000da2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	657b      	str	r3, [r7, #84]	@ 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000db0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000db4:	2104      	movs	r1, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 f8d0 	bl	8004f5c <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x6e>
  {
    /* Initialization Error */
    while(1);
 8000dc2:	bf00      	nop
 8000dc4:	e7fd      	b.n	8000dc2 <SystemClock_Config+0x6a>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3758      	adds	r7, #88	@ 0x58
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000dd8:	1d39      	adds	r1, r7, #4
 8000dda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dde:	2201      	movs	r2, #1
 8000de0:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <__io_putchar+0x20>)
 8000de2:	f006 fa30 	bl	8007246 <HAL_UART_Transmit>

  return ch;
 8000de6:	687b      	ldr	r3, [r7, #4]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000127c 	.word	0x2000127c

08000df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d102      	bne.n	8000e0a <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8000e04:	f001 fe10 	bl	8002a28 <SPI_WIFI_ISR>
      break;
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8000e0a:	bf00      	nop
    }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <SPI3_IRQHandler+0x10>)
 8000e1a:	f005 fb45 	bl	80064a8 <HAL_SPI_IRQHandler>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200008b4 	.word	0x200008b4

08000e28 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e3a:	bf00      	nop
 8000e3c:	e7fd      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e42:	bf00      	nop
 8000e44:	e7fd      	b.n	8000e42 <MemManage_Handler+0x4>

08000e46 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e4a:	bf00      	nop
 8000e4c:	e7fd      	b.n	8000e4a <BusFault_Handler+0x4>

08000e4e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e52:	bf00      	nop
 8000e54:	e7fd      	b.n	8000e52 <UsageFault_Handler+0x4>

08000e56 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000e84:	f002 fae8 	bl	8003458 <HAL_IncTick>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e90:	2002      	movs	r0, #2
 8000e92:	f002 fe51 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_kill>:

int _kill(int pid, int sig)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000eb4:	f007 fa4c 	bl	8008350 <__errno>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2216      	movs	r2, #22
 8000ebc:	601a      	str	r2, [r3, #0]
  return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_exit>:

void _exit (int status)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffe7 	bl	8000eaa <_kill>
  while (1) {}    /* Make sure we hang here */
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <_exit+0x12>

08000ee0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00a      	b.n	8000f08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ef2:	f3af 8000 	nop.w
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	b2ca      	uxtb	r2, r1
 8000f00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf0      	blt.n	8000ef2 <_read+0x12>
  }

  return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e009      	b.n	8000f40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff4b 	bl	8000dd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf1      	blt.n	8000f2c <_write+0x12>
  }
  return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_close>:

int _close(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_isatty>:

int _isatty(int file)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <_sbrk+0x5c>)
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <_sbrk+0x60>)
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <_sbrk+0x64>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <_sbrk+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d207      	bcs.n	8000ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fec:	f007 f9b0 	bl	8008350 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e009      	b.n	8001010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ffc:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <_sbrk+0x64>)
 800100c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20018000 	.word	0x20018000
 800101c:	00006800 	.word	0x00006800
 8001020:	200008ac 	.word	0x200008ac
 8001024:	20001458 	.word	0x20001458

08001028 <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b2f      	cmp	r3, #47	@ 0x2f
 8001036:	d906      	bls.n	8001046 <Hex2Num+0x1e>
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b39      	cmp	r3, #57	@ 0x39
 800103c:	d803      	bhi.n	8001046 <Hex2Num+0x1e>
        return a - '0';
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	3b30      	subs	r3, #48	@ 0x30
 8001042:	b2db      	uxtb	r3, r3
 8001044:	e014      	b.n	8001070 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b60      	cmp	r3, #96	@ 0x60
 800104a:	d906      	bls.n	800105a <Hex2Num+0x32>
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b66      	cmp	r3, #102	@ 0x66
 8001050:	d803      	bhi.n	800105a <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3b57      	subs	r3, #87	@ 0x57
 8001056:	b2db      	uxtb	r3, r3
 8001058:	e00a      	b.n	8001070 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b40      	cmp	r3, #64	@ 0x40
 800105e:	d906      	bls.n	800106e <Hex2Num+0x46>
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b46      	cmp	r3, #70	@ 0x46
 8001064:	d803      	bhi.n	800106e <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	3b37      	subs	r3, #55	@ 0x37
 800106a:	b2db      	uxtb	r3, r3
 800106c:	e000      	b.n	8001070 <Hex2Num+0x48>
    }

    return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800108e:	e012      	b.n	80010b6 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffc4 	bl	8001028 <Hex2Num>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	4413      	add	r3, r2
 80010a8:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3301      	adds	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
        done_count++;
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80010bc:	d903      	bls.n	80010c6 <ParseHexNumber+0x4a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b39      	cmp	r3, #57	@ 0x39
 80010c4:	d90f      	bls.n	80010e6 <ParseHexNumber+0x6a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b60      	cmp	r3, #96	@ 0x60
 80010cc:	d903      	bls.n	80010d6 <ParseHexNumber+0x5a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b66      	cmp	r3, #102	@ 0x66
 80010d4:	d907      	bls.n	80010e6 <ParseHexNumber+0x6a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b40      	cmp	r3, #64	@ 0x40
 80010dc:	d906      	bls.n	80010ec <ParseHexNumber+0x70>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b46      	cmp	r3, #70	@ 0x46
 80010e4:	d802      	bhi.n	80010ec <ParseHexNumber+0x70>
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d9d1      	bls.n	8001090 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <ParseHexNumber+0x7c>
        *cnt = done_count;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	7bba      	ldrb	r2, [r7, #14]
 80010f6:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b2d      	cmp	r3, #45	@ 0x2d
 800111e:	d119      	bne.n	8001154 <ParseNumber+0x52>
        minus = 1;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3301      	adds	r3, #1
 8001128:	607b      	str	r3, [r7, #4]
        done_count++;
 800112a:	7bbb      	ldrb	r3, [r7, #14]
 800112c:	3301      	adds	r3, #1
 800112e:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001130:	e010      	b.n	8001154 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3b30      	subs	r3, #48	@ 0x30
 8001144:	4413      	add	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
        done_count++;
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	3301      	adds	r3, #1
 8001152:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b2f      	cmp	r3, #47	@ 0x2f
 800115a:	d903      	bls.n	8001164 <ParseNumber+0x62>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b39      	cmp	r3, #57	@ 0x39
 8001162:	d9e6      	bls.n	8001132 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <ParseNumber+0x6e>
        *cnt = done_count;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	7bba      	ldrb	r2, [r7, #14]
 800116e:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <ParseNumber+0x7a>
        return 0 - sum;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	425b      	negs	r3, r3
 800117a:	e000      	b.n	800117e <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 800117c:	68bb      	ldr	r3, [r7, #8]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 800118a:	b590      	push	{r4, r7, lr}
 800118c:	b087      	sub	sp, #28
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d027      	beq.n	80011f0 <ParseMAC+0x66>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d024      	beq.n	80011f0 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80011a6:	e018      	b.n	80011da <ParseMAC+0x50>
    uint8_t done_count = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80011b2:	d00d      	beq.n	80011d0 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	75fa      	strb	r2, [r7, #23]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	189c      	adds	r4, r3, r2
 80011c0:	f107 0316 	add.w	r3, r7, #22
 80011c4:	4619      	mov	r1, r3
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ff58 	bl	800107c <ParseHexNumber>
 80011cc:	4603      	mov	r3, r0
 80011ce:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80011d0:	7dbb      	ldrb	r3, [r7, #22]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d906      	bls.n	80011f0 <ParseMAC+0x66>
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d803      	bhi.n	80011f0 <ParseMAC+0x66>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1db      	bne.n	80011a8 <ParseMAC+0x1e>
   }
  }
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}

080011f8 <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d027      	beq.n	800125e <ParseIP+0x66>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d024      	beq.n	800125e <ParseIP+0x66>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d921      	bls.n	800125e <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800121a:	e019      	b.n	8001250 <ParseIP+0x58>
    uint8_t done_count = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b2e      	cmp	r3, #46	@ 0x2e
 8001226:	d00e      	beq.n	8001246 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001228:	f107 0316 	add.w	r3, r7, #22
 800122c:	4619      	mov	r1, r3
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff67 	bl	8001102 <ParseNumber>
 8001234:	4601      	mov	r1, r0
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	75fa      	strb	r2, [r7, #23]
 800123c:	461a      	mov	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001246:	7dbb      	ldrb	r3, [r7, #22]
 8001248:	461a      	mov	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d803      	bhi.n	800125e <ParseIP+0x66>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1de      	bne.n	800121c <ParseIP+0x24>
   }
  }
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3302      	adds	r3, #2
 800127a:	4940      	ldr	r1, [pc, #256]	@ (800137c <AT_ParseInfo+0x114>)
 800127c:	4618      	mov	r0, r3
 800127e:	f006 ffaf 	bl	80081e0 <strtok>
 8001282:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001284:	e071      	b.n	800136a <AT_ParseInfo+0x102>
    switch (num++) {
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	72fa      	strb	r2, [r7, #11]
 800128c:	2b06      	cmp	r3, #6
 800128e:	d866      	bhi.n	800135e <AT_ParseInfo+0xf6>
 8001290:	a201      	add	r2, pc, #4	@ (adr r2, 8001298 <AT_ParseInfo+0x30>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	080012b5 	.word	0x080012b5
 800129c:	080012c9 	.word	0x080012c9
 80012a0:	080012e1 	.word	0x080012e1
 80012a4:	080012f9 	.word	0x080012f9
 80012a8:	08001311 	.word	0x08001311
 80012ac:	08001329 	.word	0x08001329
 80012b0:	0800133d 	.word	0x0800133d
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	221f      	movs	r2, #31
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f006 ff7d 	bl	80081ba <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	77da      	strb	r2, [r3, #31]
      break;
 80012c6:	e04b      	b.n	8001360 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3320      	adds	r3, #32
 80012cc:	2217      	movs	r2, #23
 80012ce:	68f9      	ldr	r1, [r7, #12]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f006 ff72 	bl	80081ba <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      break;
 80012de:	e03f      	b.n	8001360 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3338      	adds	r3, #56	@ 0x38
 80012e4:	220f      	movs	r2, #15
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 ff66 	bl	80081ba <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 80012f6:	e033      	b.n	8001360 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3348      	adds	r3, #72	@ 0x48
 80012fc:	220f      	movs	r2, #15
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	4618      	mov	r0, r3
 8001302:	f006 ff5a 	bl	80081ba <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
      break;
 800130e:	e027      	b.n	8001360 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3358      	adds	r3, #88	@ 0x58
 8001314:	220f      	movs	r2, #15
 8001316:	68f9      	ldr	r1, [r7, #12]
 8001318:	4618      	mov	r0, r3
 800131a:	f006 ff4e 	bl	80081ba <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      break;
 8001326:	e01b      	b.n	8001360 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001328:	2100      	movs	r1, #0
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff fee9 	bl	8001102 <ParseNumber>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      break;
 800133a:	e011      	b.n	8001360 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 800133c:	4910      	ldr	r1, [pc, #64]	@ (8001380 <AT_ParseInfo+0x118>)
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f006 ff4e 	bl	80081e0 <strtok>
 8001344:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3368      	adds	r3, #104	@ 0x68
 800134a:	221f      	movs	r2, #31
 800134c:	68f9      	ldr	r1, [r7, #12]
 800134e:	4618      	mov	r0, r3
 8001350:	f006 ff33 	bl	80081ba <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
      break;
 800135c:	e000      	b.n	8001360 <AT_ParseInfo+0xf8>

    default: break;
 800135e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001360:	4906      	ldr	r1, [pc, #24]	@ (800137c <AT_ParseInfo+0x114>)
 8001362:	2000      	movs	r0, #0
 8001364:	f006 ff3c 	bl	80081e0 <strtok>
 8001368:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d18a      	bne.n	8001286 <AT_ParseInfo+0x1e>
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	08009868 	.word	0x08009868
 8001380:	0800986c 	.word	0x0800986c

08001384 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3302      	adds	r3, #2
 8001396:	4959      	ldr	r1, [pc, #356]	@ (80014fc <AT_ParseConnSettings+0x178>)
 8001398:	4618      	mov	r0, r3
 800139a:	f006 ff21 	bl	80081e0 <strtok>
 800139e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80013a0:	e0a2      	b.n	80014e8 <AT_ParseConnSettings+0x164>
    switch (num++) {
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	73fa      	strb	r2, [r7, #15]
 80013a8:	2b0b      	cmp	r3, #11
 80013aa:	f200 808c 	bhi.w	80014c6 <AT_ParseConnSettings+0x142>
 80013ae:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <AT_ParseConnSettings+0x30>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013e5 	.word	0x080013e5
 80013b8:	080013fb 	.word	0x080013fb
 80013bc:	08001413 	.word	0x08001413
 80013c0:	08001427 	.word	0x08001427
 80013c4:	0800143b 	.word	0x0800143b
 80013c8:	0800144f 	.word	0x0800144f
 80013cc:	0800145f 	.word	0x0800145f
 80013d0:	0800146f 	.word	0x0800146f
 80013d4:	0800147f 	.word	0x0800147f
 80013d8:	0800148f 	.word	0x0800148f
 80013dc:	0800149f 	.word	0x0800149f
 80013e0:	080014b3 	.word	0x080014b3
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2220      	movs	r2, #32
 80013e8:	68b9      	ldr	r1, [r7, #8]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f006 fee5 	bl	80081ba <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80013f8:	e066      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	3321      	adds	r3, #33	@ 0x21
 80013fe:	2220      	movs	r2, #32
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	4618      	mov	r0, r3
 8001404:	f006 fed9 	bl	80081ba <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      break;
 8001410:	e05a      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001412:	2100      	movs	r1, #0
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f7ff fe74 	bl	8001102 <ParseNumber>
 800141a:	4603      	mov	r3, r0
 800141c:	b2da      	uxtb	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001424:	e050      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001426:	2100      	movs	r1, #0
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff fe6a 	bl	8001102 <ParseNumber>
 800142e:	4603      	mov	r3, r0
 8001430:	b2da      	uxtb	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      break;
 8001438:	e046      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800143a:	2100      	movs	r1, #0
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f7ff fe60 	bl	8001102 <ParseNumber>
 8001442:	4603      	mov	r3, r0
 8001444:	b2da      	uxtb	r2, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
      break;
 800144c:	e03c      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	3348      	adds	r3, #72	@ 0x48
 8001452:	2204      	movs	r2, #4
 8001454:	4619      	mov	r1, r3
 8001456:	68b8      	ldr	r0, [r7, #8]
 8001458:	f7ff fece 	bl	80011f8 <ParseIP>
      break;
 800145c:	e034      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	334c      	adds	r3, #76	@ 0x4c
 8001462:	2204      	movs	r2, #4
 8001464:	4619      	mov	r1, r3
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	f7ff fec6 	bl	80011f8 <ParseIP>
      break;
 800146c:	e02c      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3350      	adds	r3, #80	@ 0x50
 8001472:	2204      	movs	r2, #4
 8001474:	4619      	mov	r1, r3
 8001476:	68b8      	ldr	r0, [r7, #8]
 8001478:	f7ff febe 	bl	80011f8 <ParseIP>
      break;
 800147c:	e024      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3354      	adds	r3, #84	@ 0x54
 8001482:	2204      	movs	r2, #4
 8001484:	4619      	mov	r1, r3
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f7ff feb6 	bl	80011f8 <ParseIP>
      break;
 800148c:	e01c      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	3358      	adds	r3, #88	@ 0x58
 8001492:	2204      	movs	r2, #4
 8001494:	4619      	mov	r1, r3
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7ff feae 	bl	80011f8 <ParseIP>
      break;
 800149c:	e014      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800149e:	2100      	movs	r1, #0
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff fe2e 	bl	8001102 <ParseNumber>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      break;
 80014b0:	e00a      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 80014b2:	2100      	movs	r1, #0
 80014b4:	68b8      	ldr	r0, [r7, #8]
 80014b6:	f7ff fe24 	bl	8001102 <ParseNumber>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      break;
 80014c4:	e000      	b.n	80014c8 <AT_ParseConnSettings+0x144>

    default:
      break;
 80014c6:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80014c8:	490c      	ldr	r1, [pc, #48]	@ (80014fc <AT_ParseConnSettings+0x178>)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f006 fe88 	bl	80081e0 <strtok>
 80014d0:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <AT_ParseConnSettings+0x164>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3b01      	subs	r3, #1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b2c      	cmp	r3, #44	@ 0x2c
 80014e0:	d102      	bne.n	80014e8 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f47f af59 	bne.w	80013a2 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08009868 	.word	0x08009868

08001500 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  int ret = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800151a:	2b00      	cmp	r3, #0
 800151c:	d056      	beq.n	80015cc <AT_ExecuteCommand+0xcc>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001524:	2b00      	cmp	r3, #0
 8001526:	d051      	beq.n	80015cc <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f7fe fe4e 	bl	80001d0 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	b299      	uxth	r1, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 800153e:	461a      	mov	r2, r3
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	47a0      	blx	r4
 8001544:	4603      	mov	r3, r0
 8001546:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b00      	cmp	r3, #0
 800154c:	dd3e      	ble.n	80015cc <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800155a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
 8001562:	4603      	mov	r3, r0
 8001564:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001566:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800156a:	2b00      	cmp	r3, #0
 800156c:	dd27      	ble.n	80015be <AT_ExecuteCommand+0xbe>
 800156e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001572:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001576:	dc22      	bgt.n	80015be <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001578:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800157c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001580:	d105      	bne.n	800158e <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001582:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001586:	b29b      	uxth	r3, r3
 8001588:	3b01      	subs	r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800158e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 800159a:	490f      	ldr	r1, [pc, #60]	@ (80015d8 <AT_ExecuteCommand+0xd8>)
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f006 fe7b 	bl	8008298 <strstr>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e010      	b.n	80015ce <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80015ac:	490b      	ldr	r1, [pc, #44]	@ (80015dc <AT_ExecuteCommand+0xdc>)
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f006 fe72 	bl	8008298 <strstr>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80015ba:	2305      	movs	r3, #5
 80015bc:	e007      	b.n	80015ce <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80015be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015c2:	f113 0f04 	cmn.w	r3, #4
 80015c6:	d101      	bne.n	80015cc <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80015c8:	2306      	movs	r3, #6
 80015ca:	e000      	b.n	80015ce <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80015cc:	2304      	movs	r3, #4
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08009880 	.word	0x08009880
 80015dc:	0800988c 	.word	0x0800988c

080015e0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80015fa:	68b8      	ldr	r0, [r7, #8]
 80015fc:	f7fe fde8 	bl	80001d0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001604:	8a7b      	ldrh	r3, [r7, #18]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <AT_RequestSendData+0x32>
 800160e:	2302      	movs	r3, #2
 8001610:	e05d      	b.n	80016ce <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8001618:	2b00      	cmp	r3, #0
 800161a:	d057      	beq.n	80016cc <AT_RequestSendData+0xec>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001622:	2b00      	cmp	r3, #0
 8001624:	d052      	beq.n	80016cc <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001632:	8a79      	ldrh	r1, [r7, #18]
 8001634:	68b8      	ldr	r0, [r7, #8]
 8001636:	4798      	blx	r3
 8001638:	4603      	mov	r3, r0
 800163a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800163c:	8a3a      	ldrh	r2, [r7, #16]
 800163e:	8a7b      	ldrh	r3, [r7, #18]
 8001640:	429a      	cmp	r2, r3
 8001642:	d143      	bne.n	80016cc <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001650:	8879      	ldrh	r1, [r7, #2]
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
 8001656:	4603      	mov	r3, r0
 8001658:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800165a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	429a      	cmp	r2, r3
 8001662:	d131      	bne.n	80016c8 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 8001670:	2100      	movs	r1, #0
 8001672:	6a38      	ldr	r0, [r7, #32]
 8001674:	4798      	blx	r3
 8001676:	4603      	mov	r3, r0
 8001678:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800167a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	dd19      	ble.n	80016b6 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001682:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001686:	6a3a      	ldr	r2, [r7, #32]
 8001688:	4413      	add	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800168e:	4912      	ldr	r1, [pc, #72]	@ (80016d8 <AT_RequestSendData+0xf8>)
 8001690:	6a38      	ldr	r0, [r7, #32]
 8001692:	f006 fe01 	bl	8008298 <strstr>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e016      	b.n	80016ce <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 80016a0:	490e      	ldr	r1, [pc, #56]	@ (80016dc <AT_RequestSendData+0xfc>)
 80016a2:	6a38      	ldr	r0, [r7, #32]
 80016a4:	f006 fdf8 	bl	8008298 <strstr>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80016ae:	2305      	movs	r3, #5
 80016b0:	e00d      	b.n	80016ce <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80016b2:	2302      	movs	r3, #2
 80016b4:	e00b      	b.n	80016ce <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80016b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016ba:	f113 0f04 	cmn.w	r3, #4
 80016be:	d101      	bne.n	80016c4 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80016c0:	2306      	movs	r3, #6
 80016c2:	e004      	b.n	80016ce <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 80016c4:	2302      	movs	r3, #2
 80016c6:	e002      	b.n	80016ce <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80016c8:	2302      	movs	r3, #2
 80016ca:	e000      	b.n	80016ce <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80016cc:	2304      	movs	r3, #4
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08009880 	.word	0x08009880
 80016dc:	0800988c 	.word	0x0800988c

080016e0 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80016f4:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8087 	beq.w	8001810 <AT_RequestReceiveData+0x130>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 8081 	beq.w	8001810 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8d3 4120 	ldr.w	r4, [r3, #288]	@ 0x120
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f7fe fd5b 	bl	80001d0 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	b299      	uxth	r1, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8001724:	461a      	mov	r2, r3
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	47a0      	blx	r4
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	dd6f      	ble.n	8001810 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	@ 0x8f8
 800173c:	2100      	movs	r1, #0
 800173e:	6938      	ldr	r0, [r7, #16]
 8001740:	4798      	blx	r3
 8001742:	4603      	mov	r3, r0
 8001744:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b0d      	cmp	r3, #13
 800174c:	d104      	bne.n	8001758 <AT_RequestReceiveData+0x78>
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	3301      	adds	r3, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b0a      	cmp	r3, #10
 8001756:	d001      	beq.n	800175c <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 8001758:	2304      	movs	r3, #4
 800175a:	e05a      	b.n	8001812 <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3b02      	subs	r3, #2
 8001760:	617b      	str	r3, [r7, #20]
    p += 2;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	3302      	adds	r3, #2
 8001766:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b07      	cmp	r3, #7
 800176c:	d94a      	bls.n	8001804 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 800176e:	e002      	b.n	8001776 <AT_RequestReceiveData+0x96>
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3b01      	subs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <AT_RequestReceiveData+0xaa>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3b01      	subs	r3, #1
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b15      	cmp	r3, #21
 8001788:	d0f2      	beq.n	8001770 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4413      	add	r3, r2
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3b08      	subs	r3, #8
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4413      	add	r3, r2
 800179c:	491f      	ldr	r1, [pc, #124]	@ (800181c <AT_RequestReceiveData+0x13c>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f006 fd7a 	bl	8008298 <strstr>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d016      	beq.n	80017d8 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b08      	subs	r3, #8
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b4:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 80017b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d202      	bcs.n	80017c6 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 80017c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	6939      	ldr	r1, [r7, #16]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f006 fdeb 	bl	80083aa <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e01c      	b.n	8001812 <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3b04      	subs	r3, #4
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4413      	add	r3, r2
 80017e0:	2204      	movs	r2, #4
 80017e2:	490f      	ldr	r1, [pc, #60]	@ (8001820 <AT_RequestReceiveData+0x140>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f006 fcaf 	bl	8008148 <memcmp>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80017f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f2:	2200      	movs	r2, #0
 80017f4:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80017f6:	2305      	movs	r3, #5
 80017f8:	e00b      	b.n	8001812 <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80017fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fc:	2200      	movs	r2, #0
 80017fe:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001800:	2305      	movs	r3, #5
 8001802:	e006      	b.n	8001812 <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f113 0f04 	cmn.w	r3, #4
 800180a:	d101      	bne.n	8001810 <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800180c:	2306      	movs	r3, #6
 800180e:	e000      	b.n	8001812 <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8001810:	2304      	movs	r3, #4
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	bf00      	nop
 800181c:	08009880 	.word	0x08009880
 8001820:	08009894 	.word	0x08009894

08001824 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800182c:	2302      	movs	r3, #2
 800182e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001836:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800184a:	2000      	movs	r0, #0
 800184c:	4798      	blx	r3
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d113      	bne.n	800187c <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800185a:	461a      	mov	r2, r3
 800185c:	490a      	ldr	r1, [pc, #40]	@ (8001888 <ES_WIFI_Init+0x64>)
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fe4e 	bl	8001500 <AT_ExecuteCommand>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001874:	4619      	mov	r1, r3
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fcf6 	bl	8001268 <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	0800989c 	.word	0x0800989c

0800188c <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00b      	beq.n	80018b8 <ES_WIFI_RegisterBusIO+0x2c>
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <ES_WIFI_RegisterBusIO+0x2c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <ES_WIFI_RegisterBusIO+0x2c>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <ES_WIFI_RegisterBusIO+0x2c>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80018b8:	2302      	movs	r3, #2
 80018ba:	e014      	b.n	80018e6 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  Obj->fops.IO_Send = IO_Send;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  return ES_WIFI_STATUS_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	4932      	ldr	r1, [pc, #200]	@ (80019d4 <ES_WIFI_Connect+0xe0>)
 800190c:	4618      	mov	r0, r3
 800190e:	f006 fb23 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800191e:	461a      	mov	r2, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff fded 	bl	8001500 <AT_ExecuteCommand>
 8001926:	4603      	mov	r3, r0
 8001928:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d14b      	bne.n	80019c8 <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4927      	ldr	r1, [pc, #156]	@ (80019d8 <ES_WIFI_Connect+0xe4>)
 800193a:	4618      	mov	r0, r3
 800193c:	f006 fb0c 	bl	8007f58 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800194c:	461a      	mov	r2, r3
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f7ff fdd6 	bl	8001500 <AT_ExecuteCommand>
 8001954:	4603      	mov	r3, r0
 8001956:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d134      	bne.n	80019c8 <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	491b      	ldr	r1, [pc, #108]	@ (80019dc <ES_WIFI_Connect+0xe8>)
 8001970:	4618      	mov	r0, r3
 8001972:	f006 faf1 	bl	8007f58 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001982:	461a      	mov	r2, r3
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fdbb 	bl	8001500 <AT_ExecuteCommand>
 800198a:	4603      	mov	r3, r0
 800198c:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d119      	bne.n	80019c8 <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800199a:	4911      	ldr	r1, [pc, #68]	@ (80019e0 <ES_WIFI_Connect+0xec>)
 800199c:	4618      	mov	r0, r3
 800199e:	f006 fadb 	bl	8007f58 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80019ae:	461a      	mov	r2, r3
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fda5 	bl	8001500 <AT_ExecuteCommand>
 80019b6:	4603      	mov	r3, r0
 80019b8:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	080098b4 	.word	0x080098b4
 80019d8:	080098bc 	.word	0x080098bc
 80019dc:	080098c4 	.word	0x080098c4
 80019e0:	080098cc 	.word	0x080098cc

080019e4 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80019f2:	4913      	ldr	r1, [pc, #76]	@ (8001a40 <ES_WIFI_IsConnected+0x5c>)
 80019f4:	4618      	mov	r0, r3
 80019f6:	f006 faaf 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a06:	461a      	mov	r2, r3
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff fd79 	bl	8001500 <AT_ExecuteCommand>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10b      	bne.n	8001a30 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8001a1e:	2b31      	cmp	r3, #49	@ 0x31
 8001a20:	bf0c      	ite	eq
 8001a22:	2301      	moveq	r3, #1
 8001a24:	2300      	movne	r3, #0
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	080098d0 	.word	0x080098d0

08001a44 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a52:	4910      	ldr	r1, [pc, #64]	@ (8001a94 <ES_WIFI_GetNetworkSettings+0x50>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f006 fa7f 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001a66:	461a      	mov	r2, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fd49 	bl	8001500 <AT_ExecuteCommand>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d108      	bne.n	8001a8a <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	338d      	adds	r3, #141	@ 0x8d
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7ff fc7d 	bl	8001384 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	080098d8 	.word	0x080098d8

08001a98 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001aac:	4913      	ldr	r1, [pc, #76]	@ (8001afc <ES_WIFI_GetMACAddress+0x64>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f006 fa52 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f7ff fd1c 	bl	8001500 <AT_ExecuteCommand>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10e      	bne.n	8001af0 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ad8:	3302      	adds	r3, #2
 8001ada:	4909      	ldr	r1, [pc, #36]	@ (8001b00 <ES_WIFI_GetMACAddress+0x68>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f006 fb7f 	bl	80081e0 <strtok>
 8001ae2:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	6938      	ldr	r0, [r7, #16]
 8001aec:	f7ff fb4d 	bl	800118a <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	08009928 	.word	0x08009928
 8001b00:	0800992c 	.word	0x0800992c

08001b04 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4949      	ldr	r1, [pc, #292]	@ (8001c44 <ES_WIFI_StartServerSingleConn+0x140>)
 8001b20:	f006 fa1a 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b30:	461a      	mov	r2, r3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fce4 	bl	8001500 <AT_ExecuteCommand>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	e079      	b.n	8001c3a <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d016      	beq.n	8001b7c <ES_WIFI_StartServerSingleConn+0x78>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d012      	beq.n	8001b7c <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b5c:	493a      	ldr	r1, [pc, #232]	@ (8001c48 <ES_WIFI_StartServerSingleConn+0x144>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f006 f9fa 	bl	8007f58 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001b70:	461a      	mov	r2, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fcc4 	bl	8001500 <AT_ExecuteCommand>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d15a      	bne.n	8001c38 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	492f      	ldr	r1, [pc, #188]	@ (8001c4c <ES_WIFI_StartServerSingleConn+0x148>)
 8001b90:	f006 f9e2 	bl	8007f58 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fcac 	bl	8001500 <AT_ExecuteCommand>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d142      	bne.n	8001c38 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	7c1b      	ldrb	r3, [r3, #16]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4924      	ldr	r1, [pc, #144]	@ (8001c50 <ES_WIFI_StartServerSingleConn+0x14c>)
 8001bc0:	f006 f9ca 	bl	8007f58 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fc94 	bl	8001500 <AT_ExecuteCommand>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d12a      	bne.n	8001c38 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	889b      	ldrh	r3, [r3, #4]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4919      	ldr	r1, [pc, #100]	@ (8001c54 <ES_WIFI_StartServerSingleConn+0x150>)
 8001bf0:	f006 f9b2 	bl	8007f58 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c00:	461a      	mov	r2, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fc7c 	bl	8001500 <AT_ExecuteCommand>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d112      	bne.n	8001c38 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c18:	490f      	ldr	r1, [pc, #60]	@ (8001c58 <ES_WIFI_StartServerSingleConn+0x154>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f006 f99c 	bl	8007f58 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fc66 	bl	8001500 <AT_ExecuteCommand>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08009990 	.word	0x08009990
 8001c48:	080099d8 	.word	0x080099d8
 8001c4c:	08009998 	.word	0x08009998
 8001c50:	080099e4 	.word	0x080099e4
 8001c54:	080099a0 	.word	0x080099a0
 8001c58:	080099ec 	.word	0x080099ec

08001c5c <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 8001c6e:	f001 fc07 	bl	8003480 <HAL_GetTick>
 8001c72:	6278      	str	r0, [r7, #36]	@ 0x24
  tlast = tstart + timeout;
 8001c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4413      	add	r3, r2
 8001c7a:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d201      	bcs.n	8001c88 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001c8e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f006 fa67 	bl	8008168 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ca0:	4973      	ldr	r1, [pc, #460]	@ (8001e70 <ES_WIFI_WaitServerConnection+0x214>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f006 f958 	bl	8007f58 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff fc22 	bl	8001500 <AT_ExecuteCommand>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8001cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d136      	bne.n	8001d38 <ES_WIFI_WaitServerConnection+0xdc>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001cd0:	4968      	ldr	r1, [pc, #416]	@ (8001e74 <ES_WIFI_WaitServerConnection+0x218>)
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 fae0 	bl	8008298 <strstr>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03b      	beq.n	8001d56 <ES_WIFI_WaitServerConnection+0xfa>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ce4:	4964      	ldr	r1, [pc, #400]	@ (8001e78 <ES_WIFI_WaitServerConnection+0x21c>)
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f006 fad6 	bl	8008298 <strstr>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d031      	beq.n	8001d56 <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001cf8:	4960      	ldr	r1, [pc, #384]	@ (8001e7c <ES_WIFI_WaitServerConnection+0x220>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 facc 	bl	8008298 <strstr>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d127      	bne.n	8001d56 <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d0c:	495c      	ldr	r1, [pc, #368]	@ (8001e80 <ES_WIFI_WaitServerConnection+0x224>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f006 fac2 	bl	8008298 <strstr>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d11d      	bne.n	8001d56 <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 8001d1a:	f240 72cb 	movw	r2, #1995	@ 0x7cb
 8001d1e:	4959      	ldr	r1, [pc, #356]	@ (8001e84 <ES_WIFI_WaitServerConnection+0x228>)
 8001d20:	4859      	ldr	r0, [pc, #356]	@ (8001e88 <ES_WIFI_WaitServerConnection+0x22c>)
 8001d22:	f006 f8a9 	bl	8007e78 <iprintf>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4857      	ldr	r0, [pc, #348]	@ (8001e8c <ES_WIFI_WaitServerConnection+0x230>)
 8001d30:	f006 f8a2 	bl	8007e78 <iprintf>

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8001d34:	2302      	movs	r3, #2
 8001d36:	e096      	b.n	8001e66 <ES_WIFI_WaitServerConnection+0x20a>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8001d38:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001d3c:	4951      	ldr	r1, [pc, #324]	@ (8001e84 <ES_WIFI_WaitServerConnection+0x228>)
 8001d3e:	4852      	ldr	r0, [pc, #328]	@ (8001e88 <ES_WIFI_WaitServerConnection+0x22c>)
 8001d40:	f006 f89a 	bl	8007e78 <iprintf>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4850      	ldr	r0, [pc, #320]	@ (8001e90 <ES_WIFI_WaitServerConnection+0x234>)
 8001d4e:	f006 f893 	bl	8007e78 <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8001d52:	2302      	movs	r3, #2
 8001d54:	e087      	b.n	8001e66 <ES_WIFI_WaitServerConnection+0x20a>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d5c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f006 fa00 	bl	8008168 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d6e:	4949      	ldr	r1, [pc, #292]	@ (8001e94 <ES_WIFI_WaitServerConnection+0x238>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f006 f8f1 	bl	8007f58 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d82:	461a      	mov	r2, r3
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff fbbb 	bl	8001500 <AT_ExecuteCommand>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8001d90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d140      	bne.n	8001e1a <ES_WIFI_WaitServerConnection+0x1be>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001d9e:	220c      	movs	r2, #12
 8001da0:	493d      	ldr	r1, [pc, #244]	@ (8001e98 <ES_WIFI_WaitServerConnection+0x23c>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f006 f9f7 	bl	8008196 <strncmp>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d044      	beq.n	8001e38 <ES_WIFI_WaitServerConnection+0x1dc>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001db4:	3302      	adds	r3, #2
 8001db6:	4939      	ldr	r1, [pc, #228]	@ (8001e9c <ES_WIFI_WaitServerConnection+0x240>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f006 fa11 	bl	80081e0 <strtok>
 8001dbe:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 8001dc0:	4936      	ldr	r1, [pc, #216]	@ (8001e9c <ES_WIFI_WaitServerConnection+0x240>)
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f006 fa0c 	bl	80081e0 <strtok>
 8001dc8:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3306      	adds	r3, #6
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6978      	ldr	r0, [r7, #20]
 8001dd4:	f7ff fa10 	bl	80011f8 <ParseIP>
        ptr = strtok(0, ","); /* port */
 8001dd8:	4930      	ldr	r1, [pc, #192]	@ (8001e9c <ES_WIFI_WaitServerConnection+0x240>)
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f006 fa00 	bl	80081e0 <strtok>
 8001de0:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8001de2:	2100      	movs	r1, #0
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f7ff f98c 	bl	8001102 <ParseNumber>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); /* ip */
 8001df2:	492a      	ldr	r1, [pc, #168]	@ (8001e9c <ES_WIFI_WaitServerConnection+0x240>)
 8001df4:	2000      	movs	r0, #0
 8001df6:	f006 f9f3 	bl	80081e0 <strtok>
 8001dfa:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 8001dfc:	4927      	ldr	r1, [pc, #156]	@ (8001e9c <ES_WIFI_WaitServerConnection+0x240>)
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f006 f9ee 	bl	80081e0 <strtok>
 8001e04:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8001e06:	2100      	movs	r1, #0
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f7ff f97a 	bl	8001102 <ParseNumber>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	805a      	strh	r2, [r3, #2]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e025      	b.n	8001e66 <ES_WIFI_WaitServerConnection+0x20a>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 8001e1a:	f240 72f4 	movw	r2, #2036	@ 0x7f4
 8001e1e:	4919      	ldr	r1, [pc, #100]	@ (8001e84 <ES_WIFI_WaitServerConnection+0x228>)
 8001e20:	4819      	ldr	r0, [pc, #100]	@ (8001e88 <ES_WIFI_WaitServerConnection+0x22c>)
 8001e22:	f006 f829 	bl	8007e78 <iprintf>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	481c      	ldr	r0, [pc, #112]	@ (8001ea0 <ES_WIFI_WaitServerConnection+0x244>)
 8001e30:	f006 f822 	bl	8007e78 <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e016      	b.n	8001e66 <ES_WIFI_WaitServerConnection+0x20a>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8001e3e:	2064      	movs	r0, #100	@ 0x64
 8001e40:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 8001e42:	f001 fb1d 	bl	8003480 <HAL_GetTick>
 8001e46:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f43f af1c 	beq.w	8001c88 <ES_WIFI_WaitServerConnection+0x2c>
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f4ff af17 	bcc.w	8001c88 <ES_WIFI_WaitServerConnection+0x2c>
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	f4ff af12 	bcc.w	8001c88 <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3728      	adds	r7, #40	@ 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	080098ac 	.word	0x080098ac
 8001e74:	080099f4 	.word	0x080099f4
 8001e78:	080099fc 	.word	0x080099fc
 8001e7c:	08009a04 	.word	0x08009a04
 8001e80:	08009a10 	.word	0x08009a10
 8001e84:	08009a20 	.word	0x08009a20
 8001e88:	08009aa4 	.word	0x08009aa4
 8001e8c:	08009aac 	.word	0x08009aac
 8001e90:	08009ac4 	.word	0x08009ac4
 8001e94:	08009adc 	.word	0x08009adc
 8001e98:	08009ae0 	.word	0x08009ae0
 8001e9c:	08009868 	.word	0x08009868
 8001ea0:	08009af0 	.word	0x08009af0

08001ea4 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	4924      	ldr	r1, [pc, #144]	@ (8001f4c <ES_WIFI_CloseServerConnection+0xa8>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 f84c 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fb16 	bl	8001500 <AT_ExecuteCommand>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00e      	beq.n	8001efc <ES_WIFI_CloseServerConnection+0x58>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8001ede:	f640 0217 	movw	r2, #2071	@ 0x817
 8001ee2:	491b      	ldr	r1, [pc, #108]	@ (8001f50 <ES_WIFI_CloseServerConnection+0xac>)
 8001ee4:	481b      	ldr	r0, [pc, #108]	@ (8001f54 <ES_WIFI_CloseServerConnection+0xb0>)
 8001ee6:	f005 ffc7 	bl	8007e78 <iprintf>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4819      	ldr	r0, [pc, #100]	@ (8001f58 <ES_WIFI_CloseServerConnection+0xb4>)
 8001ef4:	f005 ffc0 	bl	8007e78 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	e023      	b.n	8001f44 <ES_WIFI_CloseServerConnection+0xa0>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f02:	4916      	ldr	r1, [pc, #88]	@ (8001f5c <ES_WIFI_CloseServerConnection+0xb8>)
 8001f04:	4618      	mov	r0, r3
 8001f06:	f006 f827 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f16:	461a      	mov	r2, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff faf1 	bl	8001500 <AT_ExecuteCommand>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <ES_WIFI_CloseServerConnection+0x9e>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8001f28:	f44f 6202 	mov.w	r2, #2080	@ 0x820
 8001f2c:	4908      	ldr	r1, [pc, #32]	@ (8001f50 <ES_WIFI_CloseServerConnection+0xac>)
 8001f2e:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <ES_WIFI_CloseServerConnection+0xb0>)
 8001f30:	f005 ffa2 	bl	8007e78 <iprintf>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <ES_WIFI_CloseServerConnection+0xbc>)
 8001f3e:	f005 ff9b 	bl	8007e78 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	08009990 	.word	0x08009990
 8001f50:	08009a20 	.word	0x08009a20
 8001f54:	08009aa4 	.word	0x08009aa4
 8001f58:	08009b08 	.word	0x08009b08
 8001f5c:	08009b24 	.word	0x08009b24
 8001f60:	08009b2c 	.word	0x08009b2c

08001f64 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4925      	ldr	r1, [pc, #148]	@ (8002010 <ES_WIFI_StopServerSingleConn+0xac>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f005 ffec 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fab6 	bl	8001500 <AT_ExecuteCommand>
 8001f94:	4603      	mov	r3, r0
 8001f96:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00e      	beq.n	8001fbc <ES_WIFI_StopServerSingleConn+0x58>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8001f9e:	f640 0237 	movw	r2, #2103	@ 0x837
 8001fa2:	491c      	ldr	r1, [pc, #112]	@ (8002014 <ES_WIFI_StopServerSingleConn+0xb0>)
 8001fa4:	481c      	ldr	r0, [pc, #112]	@ (8002018 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001fa6:	f005 ff67 	bl	8007e78 <iprintf>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481a      	ldr	r0, [pc, #104]	@ (800201c <ES_WIFI_StopServerSingleConn+0xb8>)
 8001fb4:	f005 ff60 	bl	8007e78 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	e025      	b.n	8002008 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fc2:	4917      	ldr	r1, [pc, #92]	@ (8002020 <ES_WIFI_StopServerSingleConn+0xbc>)
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 ffc7 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff fa91 	bl	8001500 <AT_ExecuteCommand>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00e      	beq.n	8002006 <ES_WIFI_StopServerSingleConn+0xa2>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8001fe8:	f44f 6204 	mov.w	r2, #2112	@ 0x840
 8001fec:	4909      	ldr	r1, [pc, #36]	@ (8002014 <ES_WIFI_StopServerSingleConn+0xb0>)
 8001fee:	480a      	ldr	r0, [pc, #40]	@ (8002018 <ES_WIFI_StopServerSingleConn+0xb4>)
 8001ff0:	f005 ff42 	bl	8007e78 <iprintf>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4809      	ldr	r0, [pc, #36]	@ (8002024 <ES_WIFI_StopServerSingleConn+0xc0>)
 8001ffe:	f005 ff3b 	bl	8007e78 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	e000      	b.n	8002008 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  UNLOCK_WIFI();
  return ret;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08009990 	.word	0x08009990
 8002014:	08009a20 	.word	0x08009a20
 8002018:	08009aa4 	.word	0x08009aa4
 800201c:	08009b44 	.word	0x08009b44
 8002020:	08009b64 	.word	0x08009b64
 8002024:	08009b6c 	.word	0x08009b6c

08002028 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af02      	add	r7, sp, #8
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	460b      	mov	r3, r1
 8002036:	72fb      	strb	r3, [r7, #11]
 8002038:	4613      	mov	r3, r2
 800203a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800203c:	2302      	movs	r3, #2
 800203e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	2b00      	cmp	r3, #0
 8002044:	d102      	bne.n	800204c <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8002046:	2301      	movs	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e001      	b.n	8002050 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002050:	893b      	ldrh	r3, [r7, #8]
 8002052:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8002056:	d302      	bcc.n	800205e <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002058:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800205c:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800206a:	7afa      	ldrb	r2, [r7, #11]
 800206c:	4942      	ldr	r1, [pc, #264]	@ (8002178 <ES_WIFI_SendData+0x150>)
 800206e:	4618      	mov	r0, r3
 8002070:	f005 ff72 	bl	8007f58 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002080:	461a      	mov	r2, r3
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fa3c 	bl	8001500 <AT_ExecuteCommand>
 8002088:	4603      	mov	r3, r0
 800208a:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d15e      	bne.n	8002150 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4938      	ldr	r1, [pc, #224]	@ (800217c <ES_WIFI_SendData+0x154>)
 800209c:	4618      	mov	r0, r3
 800209e:	f005 ff5b 	bl	8007f58 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020ae:	461a      	mov	r2, r3
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f7ff fa25 	bl	8001500 <AT_ExecuteCommand>
 80020b6:	4603      	mov	r3, r0
 80020b8:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d13d      	bne.n	800213c <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020c6:	893a      	ldrh	r2, [r7, #8]
 80020c8:	492d      	ldr	r1, [pc, #180]	@ (8002180 <ES_WIFI_SendData+0x158>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 ff44 	bl	8007f58 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020dc:	893a      	ldrh	r2, [r7, #8]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fa7b 	bl	80015e0 <AT_RequestSendData>
 80020ea:	4603      	mov	r3, r0
 80020ec:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d119      	bne.n	8002128 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80020fa:	4922      	ldr	r1, [pc, #136]	@ (8002184 <ES_WIFI_SendData+0x15c>)
 80020fc:	4618      	mov	r0, r3
 80020fe:	f006 f8cb 	bl	8008298 <strstr>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02c      	beq.n	8002162 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002108:	f640 1201 	movw	r2, #2305	@ 0x901
 800210c:	491e      	ldr	r1, [pc, #120]	@ (8002188 <ES_WIFI_SendData+0x160>)
 800210e:	481f      	ldr	r0, [pc, #124]	@ (800218c <ES_WIFI_SendData+0x164>)
 8002110:	f005 feb2 	bl	8007e78 <iprintf>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800211a:	4619      	mov	r1, r3
 800211c:	481c      	ldr	r0, [pc, #112]	@ (8002190 <ES_WIFI_SendData+0x168>)
 800211e:	f005 feab 	bl	8007e78 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8002122:	2302      	movs	r3, #2
 8002124:	74fb      	strb	r3, [r7, #19]
 8002126:	e01c      	b.n	8002162 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002128:	f640 1207 	movw	r2, #2311	@ 0x907
 800212c:	4916      	ldr	r1, [pc, #88]	@ (8002188 <ES_WIFI_SendData+0x160>)
 800212e:	4817      	ldr	r0, [pc, #92]	@ (800218c <ES_WIFI_SendData+0x164>)
 8002130:	f005 fea2 	bl	8007e78 <iprintf>
 8002134:	4817      	ldr	r0, [pc, #92]	@ (8002194 <ES_WIFI_SendData+0x16c>)
 8002136:	f005 ff07 	bl	8007f48 <puts>
 800213a:	e012      	b.n	8002162 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 800213c:	f640 120c 	movw	r2, #2316	@ 0x90c
 8002140:	4911      	ldr	r1, [pc, #68]	@ (8002188 <ES_WIFI_SendData+0x160>)
 8002142:	4812      	ldr	r0, [pc, #72]	@ (800218c <ES_WIFI_SendData+0x164>)
 8002144:	f005 fe98 	bl	8007e78 <iprintf>
 8002148:	4813      	ldr	r0, [pc, #76]	@ (8002198 <ES_WIFI_SendData+0x170>)
 800214a:	f005 fefd 	bl	8007f48 <puts>
 800214e:	e008      	b.n	8002162 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8002150:	f640 1211 	movw	r2, #2321	@ 0x911
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <ES_WIFI_SendData+0x160>)
 8002156:	480d      	ldr	r0, [pc, #52]	@ (800218c <ES_WIFI_SendData+0x164>)
 8002158:	f005 fe8e 	bl	8007e78 <iprintf>
 800215c:	480f      	ldr	r0, [pc, #60]	@ (800219c <ES_WIFI_SendData+0x174>)
 800215e:	f005 fef3 	bl	8007f48 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d102      	bne.n	800216e <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	2200      	movs	r2, #0
 800216c:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 800216e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	08009990 	.word	0x08009990
 800217c:	08009bb0 	.word	0x08009bb0
 8002180:	08009bb8 	.word	0x08009bb8
 8002184:	08009bc4 	.word	0x08009bc4
 8002188:	08009a20 	.word	0x08009a20
 800218c:	08009aa4 	.word	0x08009aa4
 8002190:	08009bcc 	.word	0x08009bcc
 8002194:	08009be8 	.word	0x08009be8
 8002198:	08009c04 	.word	0x08009c04
 800219c:	08009c18 	.word	0x08009c18

080021a0 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	72fb      	strb	r3, [r7, #11]
 80021b0:	4613      	mov	r3, r2
 80021b2:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80021b4:	2302      	movs	r3, #2
 80021b6:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 80021be:	2301      	movs	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e001      	b.n	80021c8 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c6:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80021ce:	f200 808b 	bhi.w	80022e8 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021d8:	7afa      	ldrb	r2, [r7, #11]
 80021da:	4946      	ldr	r1, [pc, #280]	@ (80022f4 <ES_WIFI_ReceiveData+0x154>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f005 febb 	bl	8007f58 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80021ee:	461a      	mov	r2, r3
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff f985 	bl	8001500 <AT_ExecuteCommand>
 80021f6:	4603      	mov	r3, r0
 80021f8:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d165      	bne.n	80022cc <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002206:	893a      	ldrh	r2, [r7, #8]
 8002208:	493b      	ldr	r1, [pc, #236]	@ (80022f8 <ES_WIFI_ReceiveData+0x158>)
 800220a:	4618      	mov	r0, r3
 800220c:	f005 fea4 	bl	8007f58 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800221c:	461a      	mov	r2, r3
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff f96e 	bl	8001500 <AT_ExecuteCommand>
 8002224:	4603      	mov	r3, r0
 8002226:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d141      	bne.n	80022b2 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4931      	ldr	r1, [pc, #196]	@ (80022fc <ES_WIFI_ReceiveData+0x15c>)
 8002238:	4618      	mov	r0, r3
 800223a:	f005 fe8d 	bl	8007f58 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800224a:	461a      	mov	r2, r3
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7ff f957 	bl	8001500 <AT_ExecuteCommand>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d120      	bne.n	800229e <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002262:	4927      	ldr	r1, [pc, #156]	@ (8002300 <ES_WIFI_ReceiveData+0x160>)
 8002264:	4618      	mov	r0, r3
 8002266:	f005 fe77 	bl	8007f58 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f503 7194 	add.w	r1, r3, #296	@ 0x128
 8002270:	893a      	ldrh	r2, [r7, #8]
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4613      	mov	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff fa30 	bl	80016e0 <AT_RequestReceiveData>
 8002280:	4603      	mov	r3, r0
 8002282:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02e      	beq.n	80022e8 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 800228a:	f640 12a9 	movw	r2, #2473	@ 0x9a9
 800228e:	491d      	ldr	r1, [pc, #116]	@ (8002304 <ES_WIFI_ReceiveData+0x164>)
 8002290:	481d      	ldr	r0, [pc, #116]	@ (8002308 <ES_WIFI_ReceiveData+0x168>)
 8002292:	f005 fdf1 	bl	8007e78 <iprintf>
 8002296:	481d      	ldr	r0, [pc, #116]	@ (800230c <ES_WIFI_ReceiveData+0x16c>)
 8002298:	f005 fe56 	bl	8007f48 <puts>
 800229c:	e024      	b.n	80022e8 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 800229e:	f640 12ae 	movw	r2, #2478	@ 0x9ae
 80022a2:	4918      	ldr	r1, [pc, #96]	@ (8002304 <ES_WIFI_ReceiveData+0x164>)
 80022a4:	4818      	ldr	r0, [pc, #96]	@ (8002308 <ES_WIFI_ReceiveData+0x168>)
 80022a6:	f005 fde7 	bl	8007e78 <iprintf>
 80022aa:	4819      	ldr	r0, [pc, #100]	@ (8002310 <ES_WIFI_ReceiveData+0x170>)
 80022ac:	f005 fe4c 	bl	8007f48 <puts>
 80022b0:	e01a      	b.n	80022e8 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 80022b2:	f640 12b3 	movw	r2, #2483	@ 0x9b3
 80022b6:	4913      	ldr	r1, [pc, #76]	@ (8002304 <ES_WIFI_ReceiveData+0x164>)
 80022b8:	4813      	ldr	r0, [pc, #76]	@ (8002308 <ES_WIFI_ReceiveData+0x168>)
 80022ba:	f005 fddd 	bl	8007e78 <iprintf>
 80022be:	4815      	ldr	r0, [pc, #84]	@ (8002314 <ES_WIFI_ReceiveData+0x174>)
 80022c0:	f005 fe42 	bl	8007f48 <puts>
        *Receivedlen = 0;
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2200      	movs	r2, #0
 80022c8:	801a      	strh	r2, [r3, #0]
 80022ca:	e00d      	b.n	80022e8 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 80022cc:	f640 12b9 	movw	r2, #2489	@ 0x9b9
 80022d0:	490c      	ldr	r1, [pc, #48]	@ (8002304 <ES_WIFI_ReceiveData+0x164>)
 80022d2:	480d      	ldr	r0, [pc, #52]	@ (8002308 <ES_WIFI_ReceiveData+0x168>)
 80022d4:	f005 fdd0 	bl	8007e78 <iprintf>
 80022d8:	480f      	ldr	r0, [pc, #60]	@ (8002318 <ES_WIFI_ReceiveData+0x178>)
 80022da:	f005 fe35 	bl	8007f48 <puts>
      issue15++;
 80022de:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <ES_WIFI_ReceiveData+0x17c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <ES_WIFI_ReceiveData+0x17c>)
 80022e6:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08009990 	.word	0x08009990
 80022f8:	08009c3c 	.word	0x08009c3c
 80022fc:	08009c44 	.word	0x08009c44
 8002300:	08009c4c 	.word	0x08009c4c
 8002304:	08009a20 	.word	0x08009a20
 8002308:	08009aa4 	.word	0x08009aa4
 800230c:	08009c50 	.word	0x08009c50
 8002310:	08009c70 	.word	0x08009c70
 8002314:	08009c88 	.word	0x08009c88
 8002318:	08009ca8 	.word	0x08009ca8
 800231c:	200008b0 	.word	0x200008b0

08002320 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	@ 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 8002328:	4b57      	ldr	r3, [pc, #348]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	4a56      	ldr	r2, [pc, #344]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 800232e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002332:	6593      	str	r3, [r2, #88]	@ 0x58
 8002334:	4b54      	ldr	r3, [pc, #336]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	4b51      	ldr	r3, [pc, #324]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	4a50      	ldr	r2, [pc, #320]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234c:	4b4e      	ldr	r3, [pc, #312]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002358:	4b4b      	ldr	r3, [pc, #300]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235c:	4a4a      	ldr	r2, [pc, #296]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002364:	4b48      	ldr	r3, [pc, #288]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 8002366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002370:	4b45      	ldr	r3, [pc, #276]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 8002372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002374:	4a44      	ldr	r2, [pc, #272]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237c:	4b42      	ldr	r3, [pc, #264]	@ (8002488 <SPI_WIFI_MspInit+0x168>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800238e:	483f      	ldr	r0, [pc, #252]	@ (800248c <SPI_WIFI_MspInit+0x16c>)
 8002390:	f001 fbba 	bl	8003b08 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002398:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4837      	ldr	r0, [pc, #220]	@ (800248c <SPI_WIFI_MspInit+0x16c>)
 80023ae:	f001 f9e9 	bl	8003784 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80023b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023ba:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80023c4:	f107 031c 	add.w	r3, r7, #28
 80023c8:	4619      	mov	r1, r3
 80023ca:	4831      	ldr	r0, [pc, #196]	@ (8002490 <SPI_WIFI_MspInit+0x170>)
 80023cc:	f001 f9da 	bl	8003784 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80023d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023d4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	4619      	mov	r1, r3
 80023ec:	4828      	ldr	r0, [pc, #160]	@ (8002490 <SPI_WIFI_MspInit+0x170>)
 80023ee:	f001 f9c9 	bl	8003784 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80023f2:	2201      	movs	r2, #1
 80023f4:	2101      	movs	r1, #1
 80023f6:	4826      	ldr	r0, [pc, #152]	@ (8002490 <SPI_WIFI_MspInit+0x170>)
 80023f8:	f001 fb86 	bl	8003b08 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80023fc:	2301      	movs	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002408:	2301      	movs	r3, #1
 800240a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	4619      	mov	r1, r3
 8002412:	481f      	ldr	r0, [pc, #124]	@ (8002490 <SPI_WIFI_MspInit+0x170>)
 8002414:	f001 f9b6 	bl	8003784 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8002418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002426:	2301      	movs	r3, #1
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800242a:	2306      	movs	r3, #6
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	4817      	ldr	r0, [pc, #92]	@ (8002494 <SPI_WIFI_MspInit+0x174>)
 8002436:	f001 f9a5 	bl	8003784 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800243a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002448:	2301      	movs	r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800244c:	2306      	movs	r3, #6
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002450:	f107 031c 	add.w	r3, r7, #28
 8002454:	4619      	mov	r1, r3
 8002456:	480f      	ldr	r0, [pc, #60]	@ (8002494 <SPI_WIFI_MspInit+0x174>)
 8002458:	f001 f994 	bl	8003784 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800245c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002460:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800246a:	2301      	movs	r3, #1
 800246c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800246e:	2306      	movs	r3, #6
 8002470:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002472:	f107 031c 	add.w	r3, r7, #28
 8002476:	4619      	mov	r1, r3
 8002478:	4806      	ldr	r0, [pc, #24]	@ (8002494 <SPI_WIFI_MspInit+0x174>)
 800247a:	f001 f983 	bl	8003784 <HAL_GPIO_Init>
}
 800247e:	bf00      	nop
 8002480:	3730      	adds	r7, #48	@ 0x30
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	48000400 	.word	0x48000400
 8002490:	48001000 	.word	0x48001000
 8002494:	48000800 	.word	0x48000800

08002498 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d145      	bne.n	8002538 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 80024ac:	4b27      	ldr	r3, [pc, #156]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <SPI_WIFI_Init+0xb8>)
 80024b0:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 80024b2:	4826      	ldr	r0, [pc, #152]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024b4:	f7ff ff34 	bl	8002320 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 80024b8:	4b24      	ldr	r3, [pc, #144]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024ba:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024be:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80024c0:	4b22      	ldr	r3, [pc, #136]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80024c6:	4b21      	ldr	r3, [pc, #132]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024c8:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80024cc:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80024da:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e0:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024e4:	2210      	movs	r2, #16
 80024e6:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80024ee:	4b17      	ldr	r3, [pc, #92]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80024f4:	4b15      	ldr	r3, [pc, #84]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi.Init.CRCPolynomial     = 0;
 80024fa:	4b14      	ldr	r3, [pc, #80]	@ (800254c <SPI_WIFI_Init+0xb4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8002500:	4812      	ldr	r0, [pc, #72]	@ (800254c <SPI_WIFI_Init+0xb4>)
 8002502:	f002 ff4f 	bl	80053a4 <HAL_SPI_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	e018      	b.n	8002544 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2007      	movs	r0, #7
 8002518:	f001 f8bd 	bl	8003696 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800251c:	2007      	movs	r0, #7
 800251e:	f001 f8d6 	bl	80036ce <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2033      	movs	r0, #51	@ 0x33
 8002528:	f001 f8b5 	bl	8003696 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800252c:	2033      	movs	r0, #51	@ 0x33
 800252e:	f001 f8ce 	bl	80036ce <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002532:	200a      	movs	r0, #10
 8002534:	f000 f9fe 	bl	8002934 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 8002538:	f000 f80c 	bl	8002554 <SPI_WIFI_ResetModule>
 800253c:	4603      	mov	r3, r0
 800253e:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200008b4 	.word	0x200008b4
 8002550:	40003c00 	.word	0x40003c00

08002554 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800255a:	f000 ff91 	bl	8003480 <HAL_GetTick>
 800255e:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002564:	2200      	movs	r2, #0
 8002566:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800256a:	4830      	ldr	r0, [pc, #192]	@ (800262c <SPI_WIFI_ResetModule+0xd8>)
 800256c:	f001 facc 	bl	8003b08 <HAL_GPIO_WritePin>
 8002570:	200a      	movs	r0, #10
 8002572:	f000 ff91 	bl	8003498 <HAL_Delay>
 8002576:	2201      	movs	r2, #1
 8002578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800257c:	482b      	ldr	r0, [pc, #172]	@ (800262c <SPI_WIFI_ResetModule+0xd8>)
 800257e:	f001 fac3 	bl	8003b08 <HAL_GPIO_WritePin>
 8002582:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002586:	f000 ff87 	bl	8003498 <HAL_Delay>
  WIFI_ENABLE_NSS();
 800258a:	2200      	movs	r2, #0
 800258c:	2101      	movs	r1, #1
 800258e:	4827      	ldr	r0, [pc, #156]	@ (800262c <SPI_WIFI_ResetModule+0xd8>)
 8002590:	f001 faba 	bl	8003b08 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002594:	200f      	movs	r0, #15
 8002596:	f000 f9cd 	bl	8002934 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 800259a:	e020      	b.n	80025de <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	463a      	mov	r2, r7
 80025a0:	18d1      	adds	r1, r2, r3
 80025a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025a6:	2201      	movs	r2, #1
 80025a8:	4821      	ldr	r0, [pc, #132]	@ (8002630 <SPI_WIFI_ResetModule+0xdc>)
 80025aa:	f003 f803 	bl	80055b4 <HAL_SPI_Receive>
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	3302      	adds	r3, #2
 80025b6:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80025b8:	f000 ff62 	bl	8003480 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c6:	d202      	bcs.n	80025ce <SPI_WIFI_ResetModule+0x7a>
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80025ce:	2201      	movs	r2, #1
 80025d0:	2101      	movs	r1, #1
 80025d2:	4816      	ldr	r0, [pc, #88]	@ (800262c <SPI_WIFI_ResetModule+0xd8>)
 80025d4:	f001 fa98 	bl	8003b08 <HAL_GPIO_WritePin>
      return -1;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
 80025dc:	e021      	b.n	8002622 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80025de:	2102      	movs	r1, #2
 80025e0:	4812      	ldr	r0, [pc, #72]	@ (800262c <SPI_WIFI_ResetModule+0xd8>)
 80025e2:	f001 fa79 	bl	8003ad8 <HAL_GPIO_ReadPin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d0d7      	beq.n	800259c <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80025ec:	2201      	movs	r2, #1
 80025ee:	2101      	movs	r1, #1
 80025f0:	480e      	ldr	r0, [pc, #56]	@ (800262c <SPI_WIFI_ResetModule+0xd8>)
 80025f2:	f001 fa89 	bl	8003b08 <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80025f6:	783b      	ldrb	r3, [r7, #0]
 80025f8:	2b15      	cmp	r3, #21
 80025fa:	d10e      	bne.n	800261a <SPI_WIFI_ResetModule+0xc6>
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b15      	cmp	r3, #21
 8002600:	d10b      	bne.n	800261a <SPI_WIFI_ResetModule+0xc6>
 8002602:	78bb      	ldrb	r3, [r7, #2]
 8002604:	2b0d      	cmp	r3, #13
 8002606:	d108      	bne.n	800261a <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8002608:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800260a:	2b0a      	cmp	r3, #10
 800260c:	d105      	bne.n	800261a <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800260e:	793b      	ldrb	r3, [r7, #4]
 8002610:	2b3e      	cmp	r3, #62	@ 0x3e
 8002612:	d102      	bne.n	800261a <SPI_WIFI_ResetModule+0xc6>
 8002614:	797b      	ldrb	r3, [r7, #5]
 8002616:	2b20      	cmp	r3, #32
 8002618:	d002      	beq.n	8002620 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	e000      	b.n	8002622 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	48001000 	.word	0x48001000
 8002630:	200008b4 	.word	0x200008b4

08002634 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <SPI_WIFI_DeInit+0x10>)
 800263a:	f002 ff7f 	bl	800553c <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200008b4 	.word	0x200008b4

08002648 <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002650:	f000 ff16 	bl	8003480 <HAL_GetTick>
 8002654:	4603      	mov	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002658:	e00a      	b.n	8002670 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800265a:	f000 ff11 	bl	8003480 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d902      	bls.n	8002670 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e007      	b.n	8002680 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002670:	2102      	movs	r1, #2
 8002672:	4805      	ldr	r0, [pc, #20]	@ (8002688 <wait_cmddata_rdy_high+0x40>)
 8002674:	f001 fa30 	bl	8003ad8 <HAL_GPIO_ReadPin>
 8002678:	4603      	mov	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	d1ed      	bne.n	800265a <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	48001000 	.word	0x48001000

0800268c <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002694:	f000 fef4 	bl	8003480 <HAL_GetTick>
 8002698:	4603      	mov	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 800269c:	e00a      	b.n	80026b4 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800269e:	f000 feef 	bl	8003480 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad2      	subs	r2, r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d902      	bls.n	80026b4 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e004      	b.n	80026be <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <wait_cmddata_rdy_rising_event+0x3c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d0f0      	beq.n	800269e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 80026bc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000920 	.word	0x20000920

080026cc <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80026d4:	f000 fed4 	bl	8003480 <HAL_GetTick>
 80026d8:	4603      	mov	r3, r0
 80026da:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 80026dc:	e00a      	b.n	80026f4 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80026de:	f000 fecf 	bl	8003480 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad2      	subs	r2, r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d902      	bls.n	80026f4 <wait_spi_rx_event+0x28>
    {
      return -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e004      	b.n	80026fe <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <wait_spi_rx_event+0x3c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d0f0      	beq.n	80026de <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80026fc:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000918 	.word	0x20000918

0800270c <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002714:	f000 feb4 	bl	8003480 <HAL_GetTick>
 8002718:	4603      	mov	r3, r0
 800271a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 800271c:	e00a      	b.n	8002734 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800271e:	f000 feaf 	bl	8003480 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1ad2      	subs	r2, r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d902      	bls.n	8002734 <wait_spi_tx_event+0x28>
    {
      return -1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e004      	b.n	800273e <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002734:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <wait_spi_tx_event+0x3c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d0f0      	beq.n	800271e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 800273c:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000091c 	.word	0x2000091c

0800274c <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	460b      	mov	r3, r1
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 800275e:	2201      	movs	r2, #1
 8002760:	2101      	movs	r1, #1
 8002762:	4834      	ldr	r0, [pc, #208]	@ (8002834 <SPI_WIFI_ReceiveData+0xe8>)
 8002764:	f001 f9d0 	bl	8003b08 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8002768:	2003      	movs	r0, #3
 800276a:	f000 f8e3 	bl	8002934 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff8b 	bl	800268c <wait_cmddata_rdy_rising_event>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	da02      	bge.n	8002782 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800277c:	f06f 0302 	mvn.w	r3, #2
 8002780:	e054      	b.n	800282c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002782:	2200      	movs	r2, #0
 8002784:	2101      	movs	r1, #1
 8002786:	482b      	ldr	r0, [pc, #172]	@ (8002834 <SPI_WIFI_ReceiveData+0xe8>)
 8002788:	f001 f9be 	bl	8003b08 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800278c:	200f      	movs	r0, #15
 800278e:	f000 f8d1 	bl	8002934 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002792:	e03d      	b.n	8002810 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8002794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002798:	897b      	ldrh	r3, [r7, #10]
 800279a:	429a      	cmp	r2, r3
 800279c:	db02      	blt.n	80027a4 <SPI_WIFI_ReceiveData+0x58>
 800279e:	897b      	ldrh	r3, [r7, #10]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d13c      	bne.n	800281e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 80027a4:	4b24      	ldr	r3, [pc, #144]	@ (8002838 <SPI_WIFI_ReceiveData+0xec>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	2201      	movs	r2, #1
 80027b0:	4619      	mov	r1, r3
 80027b2:	4822      	ldr	r0, [pc, #136]	@ (800283c <SPI_WIFI_ReceiveData+0xf0>)
 80027b4:	f003 fccc 	bl	8006150 <HAL_SPI_Receive_IT>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 80027be:	2201      	movs	r2, #1
 80027c0:	2101      	movs	r1, #1
 80027c2:	481c      	ldr	r0, [pc, #112]	@ (8002834 <SPI_WIFI_ReceiveData+0xe8>)
 80027c4:	f001 f9a0 	bl	8003b08 <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	e02e      	b.n	800282c <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff7b 	bl	80026cc <wait_spi_rx_event>

      pData[0] = tmp[0];
 80027d6:	7d3a      	ldrb	r2, [r7, #20]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3301      	adds	r3, #1
 80027e0:	7d7a      	ldrb	r2, [r7, #21]
 80027e2:	701a      	strb	r2, [r3, #0]
      length += 2;
 80027e4:	8afb      	ldrh	r3, [r7, #22]
 80027e6:	3302      	adds	r3, #2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3302      	adds	r3, #2
 80027f0:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80027f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027f6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80027fa:	db09      	blt.n	8002810 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80027fc:	2201      	movs	r2, #1
 80027fe:	2101      	movs	r1, #1
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <SPI_WIFI_ReceiveData+0xe8>)
 8002802:	f001 f981 	bl	8003b08 <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002806:	f7ff fea5 	bl	8002554 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800280a:	f06f 0303 	mvn.w	r3, #3
 800280e:	e00d      	b.n	800282c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002810:	2102      	movs	r1, #2
 8002812:	4808      	ldr	r0, [pc, #32]	@ (8002834 <SPI_WIFI_ReceiveData+0xe8>)
 8002814:	f001 f960 	bl	8003ad8 <HAL_GPIO_ReadPin>
 8002818:	4603      	mov	r3, r0
 800281a:	2b01      	cmp	r3, #1
 800281c:	d0ba      	beq.n	8002794 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800281e:	2201      	movs	r2, #1
 8002820:	2101      	movs	r1, #1
 8002822:	4804      	ldr	r0, [pc, #16]	@ (8002834 <SPI_WIFI_ReceiveData+0xe8>)
 8002824:	f001 f970 	bl	8003b08 <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	48001000 	.word	0x48001000
 8002838:	20000918 	.word	0x20000918
 800283c:	200008b4 	.word	0x200008b4

08002840 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	460b      	mov	r3, r1
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fef9 	bl	8002648 <wait_cmddata_rdy_high>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	da02      	bge.n	8002862 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	e04f      	b.n	8002902 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002862:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <SPI_WIFI_SendData+0xcc>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002868:	2200      	movs	r2, #0
 800286a:	2101      	movs	r1, #1
 800286c:	4828      	ldr	r0, [pc, #160]	@ (8002910 <SPI_WIFI_SendData+0xd0>)
 800286e:	f001 f94b 	bl	8003b08 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002872:	200f      	movs	r0, #15
 8002874:	f000 f85e 	bl	8002934 <SPI_WIFI_DelayUs>
  if (len > 1)
 8002878:	897b      	ldrh	r3, [r7, #10]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d919      	bls.n	80028b2 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 800287e:	4b25      	ldr	r3, [pc, #148]	@ (8002914 <SPI_WIFI_SendData+0xd4>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	b29b      	uxth	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	4822      	ldr	r0, [pc, #136]	@ (8002918 <SPI_WIFI_SendData+0xd8>)
 8002890:	f003 fbbe 	bl	8006010 <HAL_SPI_Transmit_IT>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800289a:	2201      	movs	r2, #1
 800289c:	2101      	movs	r1, #1
 800289e:	481c      	ldr	r0, [pc, #112]	@ (8002910 <SPI_WIFI_SendData+0xd0>)
 80028a0:	f001 f932 	bl	8003b08 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	e02b      	b.n	8002902 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff2d 	bl	800270c <wait_spi_tx_event>
  }

  if (len & 1)
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	3b01      	subs	r3, #1
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 80028c8:	230a      	movs	r3, #10
 80028ca:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <SPI_WIFI_SendData+0xd4>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	2201      	movs	r2, #1
 80028d8:	4619      	mov	r1, r3
 80028da:	480f      	ldr	r0, [pc, #60]	@ (8002918 <SPI_WIFI_SendData+0xd8>)
 80028dc:	f003 fb98 	bl	8006010 <HAL_SPI_Transmit_IT>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80028e6:	2201      	movs	r2, #1
 80028e8:	2101      	movs	r1, #1
 80028ea:	4809      	ldr	r0, [pc, #36]	@ (8002910 <SPI_WIFI_SendData+0xd0>)
 80028ec:	f001 f90c 	bl	8003b08 <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	e005      	b.n	8002902 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff07 	bl	800270c <wait_spi_tx_event>
  }
  return len;
 80028fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000920 	.word	0x20000920
 8002910:	48001000 	.word	0x48001000
 8002914:	2000091c 	.word	0x2000091c
 8002918:	200008b4 	.word	0x200008b4

0800291c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fdb7 	bl	8003498 <HAL_Delay>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002944:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <SPI_WIFI_DelayUs+0x94>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d122      	bne.n	8002992 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 800294c:	4b1f      	ldr	r3, [pc, #124]	@ (80029cc <SPI_WIFI_DelayUs+0x98>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1f      	ldr	r2, [pc, #124]	@ (80029d0 <SPI_WIFI_DelayUs+0x9c>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	099b      	lsrs	r3, r3, #6
 8002958:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002962:	f000 fd8d 	bl	8003480 <HAL_GetTick>
 8002966:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002968:	e002      	b.n	8002970 <SPI_WIFI_DelayUs+0x3c>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3b01      	subs	r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f9      	bne.n	800296a <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002976:	f000 fd83 	bl	8003480 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <SPI_WIFI_DelayUs+0x94>)
 8002982:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002984:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <SPI_WIFI_DelayUs+0x94>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <SPI_WIFI_DelayUs+0x5e>
 800298c:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <SPI_WIFI_DelayUs+0x94>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002992:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <SPI_WIFI_DelayUs+0x98>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <SPI_WIFI_DelayUs+0xa0>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	0c9a      	lsrs	r2, r3, #18
 800299e:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <SPI_WIFI_DelayUs+0x94>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 80029b2:	e002      	b.n	80029ba <SPI_WIFI_DelayUs+0x86>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <SPI_WIFI_DelayUs+0x80>
  return;
 80029c0:	bf00      	nop
}
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000924 	.word	0x20000924
 80029cc:	20000010 	.word	0x20000010
 80029d0:	10624dd3 	.word	0x10624dd3
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_SPI_RxCpltCallback+0x24>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <HAL_SPI_RxCpltCallback+0x24>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
  }
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000918 	.word	0x20000918

08002a00 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_SPI_TxCpltCallback+0x24>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002a10:	4b04      	ldr	r3, [pc, #16]	@ (8002a24 <HAL_SPI_TxCpltCallback+0x24>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
  }
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	2000091c 	.word	0x2000091c

08002a28 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <SPI_WIFI_ISR+0x1c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d102      	bne.n	8002a3a <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002a34:	4b03      	ldr	r3, [pc, #12]	@ (8002a44 <SPI_WIFI_ISR+0x1c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
   }
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	20000920 	.word	0x20000920

08002a48 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002a52:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <WIFI_Init+0x40>)
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <WIFI_Init+0x44>)
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <WIFI_Init+0x48>)
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <WIFI_Init+0x4c>)
 8002a5e:	490e      	ldr	r1, [pc, #56]	@ (8002a98 <WIFI_Init+0x50>)
 8002a60:	480e      	ldr	r0, [pc, #56]	@ (8002a9c <WIFI_Init+0x54>)
 8002a62:	f7fe ff13 	bl	800188c <ES_WIFI_RegisterBusIO>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002a6c:	480b      	ldr	r0, [pc, #44]	@ (8002a9c <WIFI_Init+0x54>)
 8002a6e:	f7fe fed9 	bl	8001824 <ES_WIFI_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	0800274d 	.word	0x0800274d
 8002a8c:	08002841 	.word	0x08002841
 8002a90:	0800291d 	.word	0x0800291d
 8002a94:	08002635 	.word	0x08002635
 8002a98:	08002499 	.word	0x08002499
 8002a9c:	20000928 	.word	0x20000928

08002aa0 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	4809      	ldr	r0, [pc, #36]	@ (8002ae0 <WIFI_Connect+0x40>)
 8002aba:	f7fe ff1b 	bl	80018f4 <ES_WIFI_Connect>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002ac4:	4806      	ldr	r0, [pc, #24]	@ (8002ae0 <WIFI_Connect+0x40>)
 8002ac6:	f7fe ffbd 	bl	8001a44 <ES_WIFI_GetNetworkSettings>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000928 	.word	0x20000928

08002ae4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <WIFI_GetMAC_Address+0x32>
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	461a      	mov	r2, r3
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4806      	ldr	r0, [pc, #24]	@ (8002b20 <WIFI_GetMAC_Address+0x3c>)
 8002b08:	f7fe ffc6 	bl	8001a98 <ES_WIFI_GetMACAddress>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000928 	.word	0x20000928

08002b24 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d010      	beq.n	8002b5c <WIFI_GetIP_Address+0x38>
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d90d      	bls.n	8002b5c <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002b40:	4809      	ldr	r0, [pc, #36]	@ (8002b68 <WIFI_GetIP_Address+0x44>)
 8002b42:	f7fe ff4f 	bl	80019e4 <ES_WIFI_IsConnected>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d107      	bne.n	8002b5c <WIFI_GetIP_Address+0x38>
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002b4c:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <WIFI_GetIP_Address+0x44>)
 8002b4e:	f8d3 30d5 	ldr.w	r3, [r3, #213]	@ 0xd5
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000928 	.word	0x20000928

08002b6c <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	@ 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	72fb      	strb	r3, [r7, #11]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8002b8a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002b8c:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4807      	ldr	r0, [pc, #28]	@ (8002bc8 <WIFI_StartServer+0x5c>)
 8002bac:	f7fe ffaa 	bl	8001b04 <ES_WIFI_StartServerSingleConn>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3728      	adds	r7, #40	@ 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000928 	.word	0x20000928

08002bcc <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	461a      	mov	r2, r3
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	481c      	ldr	r0, [pc, #112]	@ (8002c5c <WIFI_WaitServerConnection+0x90>)
 8002bea:	f7ff f837 	bl	8001c5c <ES_WIFI_WaitServerConnection>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8002bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d112      	bne.n	8002c22 <WIFI_WaitServerConnection+0x56>
  {
    if (RemotePort)
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 8002c02:	8a7a      	ldrh	r2, [r7, #18]
 8002c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c06:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <WIFI_WaitServerConnection+0x52>
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d904      	bls.n	8002c1e <WIFI_WaitServerConnection+0x52>
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 8002c14:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e017      	b.n	8002c52 <WIFI_WaitServerConnection+0x86>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 8002c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d112      	bne.n	8002c50 <WIFI_WaitServerConnection+0x84>
  {
    if (RemotePort)
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <WIFI_WaitServerConnection+0x6a>
    {
      *RemotePort = 0;
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	2200      	movs	r2, #0
 8002c34:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <WIFI_WaitServerConnection+0x80>
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d904      	bls.n	8002c4c <WIFI_WaitServerConnection+0x80>
    {
      memset(RemoteIp, 0, 4);
 8002c42:	2204      	movs	r2, #4
 8002c44:	2100      	movs	r1, #0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f005 fa8e 	bl	8008168 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	e000      	b.n	8002c52 <WIFI_WaitServerConnection+0x86>
  }

  return WIFI_STATUS_ERROR;
 8002c50:	2301      	movs	r3, #1
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3728      	adds	r7, #40	@ 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000928 	.word	0x20000928

08002c60 <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	4806      	ldr	r0, [pc, #24]	@ (8002c8c <WIFI_CloseServerConnection+0x2c>)
 8002c74:	f7ff f916 	bl	8001ea4 <ES_WIFI_CloseServerConnection>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000928 	.word	0x20000928

08002c90 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4806      	ldr	r0, [pc, #24]	@ (8002cbc <WIFI_StopServer+0x2c>)
 8002ca4:	f7ff f95e 	bl	8001f64 <ES_WIFI_StopServerSingleConn>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000928 	.word	0x20000928

08002cc0 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	b2d9      	uxtb	r1, r3
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	4806      	ldr	r0, [pc, #24]	@ (8002d00 <WIFI_SendData+0x40>)
 8002ce8:	f7ff f99e 	bl	8002028 <ES_WIFI_SendData>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000928 	.word	0x20000928

08002d04 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	b2d9      	uxtb	r1, r3
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	4806      	ldr	r0, [pc, #24]	@ (8002d44 <WIFI_ReceiveData+0x40>)
 8002d2c:	f7ff fa38 	bl	80021a0 <ES_WIFI_ReceiveData>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000928 	.word	0x20000928

08002d48 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2120      	movs	r1, #32
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 faba 	bl	80032d4 <SENSOR_IO_Read>
 8002d60:	4603      	mov	r3, r0
 8002d62:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	f023 0304 	bic.w	r3, r3, #4
 8002d6a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	2120      	movs	r1, #32
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fa83 	bl	80032a0 <SENSOR_IO_Write>
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b088      	sub	sp, #32
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	b2d8      	uxtb	r0, r3
 8002db0:	f107 0208 	add.w	r2, r7, #8
 8002db4:	2302      	movs	r3, #2
 8002db6:	21b2      	movs	r1, #178	@ 0xb2
 8002db8:	f000 faaa 	bl	8003310 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2135      	movs	r1, #53	@ 0x35
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fa86 	bl	80032d4 <SENSOR_IO_Read>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	b21b      	sxth	r3, r3
 8002dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd6:	b21a      	sxth	r2, r3
 8002dd8:	7a3b      	ldrb	r3, [r7, #8]
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dea:	b21a      	sxth	r2, r3
 8002dec:	7a7b      	ldrb	r3, [r7, #9]
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	4313      	orrs	r3, r2
 8002df2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002df4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002df8:	10db      	asrs	r3, r3, #3
 8002dfa:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002dfc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e00:	10db      	asrs	r3, r3, #3
 8002e02:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	b2d8      	uxtb	r0, r3
 8002e08:	f107 0208 	add.w	r2, r7, #8
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	21bc      	movs	r1, #188	@ 0xbc
 8002e10:	f000 fa7e 	bl	8003310 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002e14:	7a7b      	ldrb	r3, [r7, #9]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	b21a      	sxth	r2, r3
 8002e1a:	7a3b      	ldrb	r3, [r7, #8]
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	7abb      	ldrb	r3, [r7, #10]
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	b2d8      	uxtb	r0, r3
 8002e34:	f107 0208 	add.w	r2, r7, #8
 8002e38:	2302      	movs	r3, #2
 8002e3a:	21aa      	movs	r1, #170	@ 0xaa
 8002e3c:	f000 fa68 	bl	8003310 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002e40:	7a7b      	ldrb	r3, [r7, #9]
 8002e42:	021b      	lsls	r3, r3, #8
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	7a3b      	ldrb	r3, [r7, #8]
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002e4e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002e52:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e76:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	ee07 3a90 	vmov	s15, r3
 8002e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e90:	ee07 3a90 	vmov	s15, r3
 8002e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e9c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	ee07 3a90 	vmov	s15, r3
}
 8002ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb4:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <SystemInit+0x64>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <SystemInit+0x64>)
 8002ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <SystemInit+0x68>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <SystemInit+0x68>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <SystemInit+0x68>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <SystemInit+0x68>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a0f      	ldr	r2, [pc, #60]	@ (8002f18 <SystemInit+0x68>)
 8002edc:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002ee0:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <SystemInit+0x68>)
 8002ee8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002eec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <SystemInit+0x68>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a09      	ldr	r2, [pc, #36]	@ (8002f18 <SystemInit+0x68>)
 8002ef4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <SystemInit+0x68>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <SystemInit+0x64>)
 8002f02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f06:	609a      	str	r2, [r3, #8]
#endif
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000ed00 	.word	0xe000ed00
 8002f18:	40021000 	.word	0x40021000

08002f1c <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <BSP_LED_Init+0x28>
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <BSP_LED_Init+0x58>)
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	4a10      	ldr	r2, [pc, #64]	@ (8002f74 <BSP_LED_Init+0x58>)
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f38:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <BSP_LED_Init+0x58>)
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8002f44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f48:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f52:	2302      	movs	r3, #2
 8002f54:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	4a07      	ldr	r2, [pc, #28]	@ (8002f78 <BSP_LED_Init+0x5c>)
 8002f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5e:	f107 020c 	add.w	r2, r7, #12
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fc0d 	bl	8003784 <HAL_GPIO_Init>
}
 8002f6a:	bf00      	nop
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	20000014 	.word	0x20000014

08002f7c <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	4a06      	ldr	r2, [pc, #24]	@ (8002fa4 <BSP_LED_On+0x28>)
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f92:	b291      	uxth	r1, r2
 8002f94:	2201      	movs	r2, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fdb6 	bl	8003b08 <HAL_GPIO_WritePin>
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000014 	.word	0x20000014

08002fa8 <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4a06      	ldr	r2, [pc, #24]	@ (8002fd0 <BSP_LED_Off+0x28>)
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fbe:	b291      	uxth	r1, r2
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fda0 	bl	8003b08 <HAL_GPIO_WritePin>
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000014 	.word	0x20000014

08002fd4 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <BSP_COM_Init+0x2a>
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <BSP_COM_Init+0xc8>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <BSP_COM_Init+0xc8>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800309c <BSP_COM_Init+0xc8>)
 8002ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <BSP_COM_Init+0x48>
 8003004:	4b25      	ldr	r3, [pc, #148]	@ (800309c <BSP_COM_Init+0xc8>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003008:	4a24      	ldr	r2, [pc, #144]	@ (800309c <BSP_COM_Init+0xc8>)
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003010:	4b22      	ldr	r3, [pc, #136]	@ (800309c <BSP_COM_Init+0xc8>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <BSP_COM_Init+0x66>
 8003022:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <BSP_COM_Init+0xc8>)
 8003024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003026:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <BSP_COM_Init+0xc8>)
 8003028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800302c:	6613      	str	r3, [r2, #96]	@ 0x60
 800302e:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <BSP_COM_Init+0xc8>)
 8003030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800303a:	2340      	movs	r3, #64	@ 0x40
 800303c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003042:	2302      	movs	r3, #2
 8003044:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800304a:	2307      	movs	r3, #7
 800304c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	4a13      	ldr	r2, [pc, #76]	@ (80030a0 <BSP_COM_Init+0xcc>)
 8003052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003056:	f107 0214 	add.w	r2, r7, #20
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fb91 	bl	8003784 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800306a:	2307      	movs	r3, #7
 800306c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <BSP_COM_Init+0xd0>)
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	f107 0214 	add.w	r2, r7, #20
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fb81 	bl	8003784 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4a08      	ldr	r2, [pc, #32]	@ (80030a8 <BSP_COM_Init+0xd4>)
 8003086:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 800308e:	6838      	ldr	r0, [r7, #0]
 8003090:	f004 f881 	bl	8007196 <HAL_UART_Init>
}
 8003094:	bf00      	nop
 8003096:	3728      	adds	r7, #40	@ 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000
 80030a0:	2000001c 	.word	0x2000001c
 80030a4:	20000020 	.word	0x20000020
 80030a8:	20000018 	.word	0x20000018

080030ac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80030b4:	4b27      	ldr	r3, [pc, #156]	@ (8003154 <I2Cx_MspInit+0xa8>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b8:	4a26      	ldr	r2, [pc, #152]	@ (8003154 <I2Cx_MspInit+0xa8>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c0:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <I2Cx_MspInit+0xa8>)
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80030cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80030d2:	2312      	movs	r3, #18
 80030d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030da:	2303      	movs	r3, #3
 80030dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80030de:	2304      	movs	r3, #4
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	481b      	ldr	r0, [pc, #108]	@ (8003158 <I2Cx_MspInit+0xac>)
 80030ea:	f000 fb4b 	bl	8003784 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4619      	mov	r1, r3
 80030f4:	4818      	ldr	r0, [pc, #96]	@ (8003158 <I2Cx_MspInit+0xac>)
 80030f6:	f000 fb45 	bl	8003784 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80030fa:	4b16      	ldr	r3, [pc, #88]	@ (8003154 <I2Cx_MspInit+0xa8>)
 80030fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fe:	4a15      	ldr	r2, [pc, #84]	@ (8003154 <I2Cx_MspInit+0xa8>)
 8003100:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003104:	6593      	str	r3, [r2, #88]	@ 0x58
 8003106:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <I2Cx_MspInit+0xa8>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <I2Cx_MspInit+0xa8>)
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	4a0f      	ldr	r2, [pc, #60]	@ (8003154 <I2Cx_MspInit+0xa8>)
 8003118:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800311c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800311e:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <I2Cx_MspInit+0xa8>)
 8003120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003122:	4a0c      	ldr	r2, [pc, #48]	@ (8003154 <I2Cx_MspInit+0xa8>)
 8003124:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003128:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800312a:	2200      	movs	r2, #0
 800312c:	210f      	movs	r1, #15
 800312e:	2021      	movs	r0, #33	@ 0x21
 8003130:	f000 fab1 	bl	8003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003134:	2021      	movs	r0, #33	@ 0x21
 8003136:	f000 faca 	bl	80036ce <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	210f      	movs	r1, #15
 800313e:	2022      	movs	r0, #34	@ 0x22
 8003140:	f000 faa9 	bl	8003696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003144:	2022      	movs	r0, #34	@ 0x22
 8003146:	f000 fac2 	bl	80036ce <HAL_NVIC_EnableIRQ>
}
 800314a:	bf00      	nop
 800314c:	3728      	adds	r7, #40	@ 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	48000400 	.word	0x48000400

0800315c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <I2Cx_Init+0x54>)
 8003168:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <I2Cx_Init+0x58>)
 800316e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff89 	bl	80030ac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fce4 	bl	8003b68 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80031a0:	2100      	movs	r1, #0
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f001 faa4 	bl	80046f0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40005800 	.word	0x40005800
 80031b4:	00702681 	.word	0x00702681

080031b8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	@ 0x28
 80031bc:	af04      	add	r7, sp, #16
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	72fb      	strb	r3, [r7, #11]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	b299      	uxth	r1, r3
 80031da:	88f8      	ldrh	r0, [r7, #6]
 80031dc:	893a      	ldrh	r2, [r7, #8]
 80031de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031e2:	9302      	str	r3, [sp, #8]
 80031e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4603      	mov	r3, r0
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 feac 	bl	8003f4c <HAL_I2C_Mem_Read>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	4619      	mov	r1, r3
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f832 	bl	800326c <I2Cx_Error>
  }
  return status;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b08a      	sub	sp, #40	@ 0x28
 8003216:	af04      	add	r7, sp, #16
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	4608      	mov	r0, r1
 800321c:	4611      	mov	r1, r2
 800321e:	461a      	mov	r2, r3
 8003220:	4603      	mov	r3, r0
 8003222:	72fb      	strb	r3, [r7, #11]
 8003224:	460b      	mov	r3, r1
 8003226:	813b      	strh	r3, [r7, #8]
 8003228:	4613      	mov	r3, r2
 800322a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003230:	7afb      	ldrb	r3, [r7, #11]
 8003232:	b299      	uxth	r1, r3
 8003234:	88f8      	ldrh	r0, [r7, #6]
 8003236:	893a      	ldrh	r2, [r7, #8]
 8003238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800323c:	9302      	str	r3, [sp, #8]
 800323e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	4603      	mov	r3, r0
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fd6b 	bl	8003d24 <HAL_I2C_Mem_Write>
 800324e:	4603      	mov	r3, r0
 8003250:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003258:	7afb      	ldrb	r3, [r7, #11]
 800325a:	4619      	mov	r1, r3
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f805 	bl	800326c <I2Cx_Error>
  }
  return status;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fd10 	bl	8003c9e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff6c 	bl	800315c <I2Cx_Init>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003290:	4802      	ldr	r0, [pc, #8]	@ (800329c <SENSOR_IO_Init+0x10>)
 8003292:	f7ff ff63 	bl	800315c <I2Cx_Init>
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20001228 	.word	0x20001228

080032a0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
 80032aa:	460b      	mov	r3, r1
 80032ac:	71bb      	strb	r3, [r7, #6]
 80032ae:	4613      	mov	r3, r2
 80032b0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80032b2:	79bb      	ldrb	r3, [r7, #6]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	79f9      	ldrb	r1, [r7, #7]
 80032b8:	2301      	movs	r3, #1
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	1d7b      	adds	r3, r7, #5
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2301      	movs	r3, #1
 80032c2:	4803      	ldr	r0, [pc, #12]	@ (80032d0 <SENSOR_IO_Write+0x30>)
 80032c4:	f7ff ffa5 	bl	8003212 <I2Cx_WriteMultiple>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20001228 	.word	0x20001228

080032d4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af02      	add	r7, sp, #8
 80032da:	4603      	mov	r3, r0
 80032dc:	460a      	mov	r2, r1
 80032de:	71fb      	strb	r3, [r7, #7]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80032e8:	79bb      	ldrb	r3, [r7, #6]
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	79f9      	ldrb	r1, [r7, #7]
 80032ee:	2301      	movs	r3, #1
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	f107 030f 	add.w	r3, r7, #15
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	2301      	movs	r3, #1
 80032fa:	4804      	ldr	r0, [pc, #16]	@ (800330c <SENSOR_IO_Read+0x38>)
 80032fc:	f7ff ff5c 	bl	80031b8 <I2Cx_ReadMultiple>

  return read_value;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20001228 	.word	0x20001228

08003310 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af02      	add	r7, sp, #8
 8003316:	603a      	str	r2, [r7, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
 800331e:	460b      	mov	r3, r1
 8003320:	71bb      	strb	r3, [r7, #6]
 8003322:	4613      	mov	r3, r2
 8003324:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003326:	79bb      	ldrb	r3, [r7, #6]
 8003328:	b29a      	uxth	r2, r3
 800332a:	79f9      	ldrb	r1, [r7, #7]
 800332c:	88bb      	ldrh	r3, [r7, #4]
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2301      	movs	r3, #1
 8003336:	4804      	ldr	r0, [pc, #16]	@ (8003348 <SENSOR_IO_ReadMultiple+0x38>)
 8003338:	f7ff ff3e 	bl	80031b8 <I2Cx_ReadMultiple>
 800333c:	4603      	mov	r3, r0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20001228 	.word	0x20001228

0800334c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <BSP_TSENSOR_Init+0x30>)
 8003358:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <BSP_TSENSOR_Init+0x34>)
 800335a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800335c:	f7ff ff96 	bl	800328c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <BSP_TSENSOR_Init+0x30>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2100      	movs	r1, #0
 8003368:	20be      	movs	r0, #190	@ 0xbe
 800336a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003370:	79fb      	ldrb	r3, [r7, #7]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20001304 	.word	0x20001304
 8003380:	20000000 	.word	0x20000000

08003384 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003388:	4b04      	ldr	r3, [pc, #16]	@ (800339c <BSP_TSENSOR_ReadTemp+0x18>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	20be      	movs	r0, #190	@ 0xbe
 8003390:	4798      	blx	r3
 8003392:	eef0 7a40 	vmov.f32	s15, s0
}
 8003396:	eeb0 0a67 	vmov.f32	s0, s15
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20001304 	.word	0x20001304

080033a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033aa:	2003      	movs	r0, #3
 80033ac:	f000 f968 	bl	8003680 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033b0:	200f      	movs	r0, #15
 80033b2:	f000 f815 	bl	80033e0 <HAL_InitTick>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	71fb      	strb	r3, [r7, #7]
 80033c0:	e001      	b.n	80033c6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033c2:	f000 f805 	bl	80033d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033c6:	79fb      	ldrb	r3, [r7, #7]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033ec:	4b17      	ldr	r3, [pc, #92]	@ (800344c <HAL_InitTick+0x6c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033f4:	4b16      	ldr	r3, [pc, #88]	@ (8003450 <HAL_InitTick+0x70>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b14      	ldr	r3, [pc, #80]	@ (800344c <HAL_InitTick+0x6c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
 80033fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003402:	fbb3 f3f1 	udiv	r3, r3, r1
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f96d 	bl	80036ea <HAL_SYSTICK_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d809      	bhi.n	8003430 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800341c:	2200      	movs	r2, #0
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	f000 f937 	bl	8003696 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003428:	4a0a      	ldr	r2, [pc, #40]	@ (8003454 <HAL_InitTick+0x74>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e007      	b.n	8003440 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e004      	b.n	8003440 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
 800343a:	e001      	b.n	8003440 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000028 	.word	0x20000028
 8003450:	20000010 	.word	0x20000010
 8003454:	20000024 	.word	0x20000024

08003458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_IncTick+0x20>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_IncTick+0x24>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
 8003468:	4a04      	ldr	r2, [pc, #16]	@ (800347c <HAL_IncTick+0x24>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000028 	.word	0x20000028
 800347c:	20001308 	.word	0x20001308

08003480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return uwTick;
 8003484:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <HAL_GetTick+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20001308 	.word	0x20001308

08003498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a0:	f7ff ffee 	bl	8003480 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d005      	beq.n	80034be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_Delay+0x44>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034be:	bf00      	nop
 80034c0:	f7ff ffde 	bl	8003480 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d8f7      	bhi.n	80034c0 <HAL_Delay+0x28>
  {
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000028 	.word	0x20000028

080034e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034fc:	4013      	ands	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800350c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003512:	4a04      	ldr	r2, [pc, #16]	@ (8003524 <__NVIC_SetPriorityGrouping+0x44>)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	60d3      	str	r3, [r2, #12]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <__NVIC_GetPriorityGrouping+0x18>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f003 0307 	and.w	r3, r3, #7
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db0b      	blt.n	800356e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	f003 021f 	and.w	r2, r3, #31
 800355c:	4907      	ldr	r1, [pc, #28]	@ (800357c <__NVIC_EnableIRQ+0x38>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2001      	movs	r0, #1
 8003566:	fa00 f202 	lsl.w	r2, r0, r2
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000e100 	.word	0xe000e100

08003580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db0a      	blt.n	80035aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	490c      	ldr	r1, [pc, #48]	@ (80035cc <__NVIC_SetPriority+0x4c>)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	440b      	add	r3, r1
 80035a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a8:	e00a      	b.n	80035c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4908      	ldr	r1, [pc, #32]	@ (80035d0 <__NVIC_SetPriority+0x50>)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	3b04      	subs	r3, #4
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	440b      	add	r3, r1
 80035be:	761a      	strb	r2, [r3, #24]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	e000e100 	.word	0xe000e100
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	bf28      	it	cs
 80035f2:	2304      	movcs	r3, #4
 80035f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d902      	bls.n	8003604 <NVIC_EncodePriority+0x30>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3b03      	subs	r3, #3
 8003602:	e000      	b.n	8003606 <NVIC_EncodePriority+0x32>
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	401a      	ands	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800361c:	f04f 31ff 	mov.w	r1, #4294967295
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43d9      	mvns	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	4313      	orrs	r3, r2
         );
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	@ 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3b01      	subs	r3, #1
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800364c:	d301      	bcc.n	8003652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003652:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <SysTick_Config+0x40>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365a:	210f      	movs	r1, #15
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	f7ff ff8e 	bl	8003580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003664:	4b05      	ldr	r3, [pc, #20]	@ (800367c <SysTick_Config+0x40>)
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366a:	4b04      	ldr	r3, [pc, #16]	@ (800367c <SysTick_Config+0x40>)
 800366c:	2207      	movs	r2, #7
 800366e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000e010 	.word	0xe000e010

08003680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff29 	bl	80034e0 <__NVIC_SetPriorityGrouping>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b086      	sub	sp, #24
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036a8:	f7ff ff3e 	bl	8003528 <__NVIC_GetPriorityGrouping>
 80036ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	6978      	ldr	r0, [r7, #20]
 80036b4:	f7ff ff8e 	bl	80035d4 <NVIC_EncodePriority>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036be:	4611      	mov	r1, r2
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff ff5d 	bl	8003580 <__NVIC_SetPriority>
}
 80036c6:	bf00      	nop
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	4603      	mov	r3, r0
 80036d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff31 	bl	8003544 <__NVIC_EnableIRQ>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffa2 	bl	800363c <SysTick_Config>
 80036f8:	4603      	mov	r3, r0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d005      	beq.n	8003726 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2204      	movs	r2, #4
 800371e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e029      	b.n	800377a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 020e 	bic.w	r2, r2, #14
 8003734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f003 021c 	and.w	r2, r3, #28
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	4798      	blx	r3
    }
  }
  return status;
 800377a:	7bfb      	ldrb	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800378e:	2300      	movs	r3, #0
 8003790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003792:	e17f      	b.n	8003a94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	4013      	ands	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8171 	beq.w	8003a8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d005      	beq.n	80037c4 <HAL_GPIO_Init+0x40>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d130      	bne.n	8003826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037fa:	2201      	movs	r2, #1
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 0201 	and.w	r2, r3, #1
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b03      	cmp	r3, #3
 8003830:	d118      	bne.n	8003864 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003838:	2201      	movs	r2, #1
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	08db      	lsrs	r3, r3, #3
 800384e:	f003 0201 	and.w	r2, r3, #1
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d017      	beq.n	80038a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d123      	bne.n	80038f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	08da      	lsrs	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3208      	adds	r2, #8
 80038b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	220f      	movs	r2, #15
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	08da      	lsrs	r2, r3, #3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3208      	adds	r2, #8
 80038ee:	6939      	ldr	r1, [r7, #16]
 80038f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80ac 	beq.w	8003a8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003936:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab4 <HAL_GPIO_Init+0x330>)
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab4 <HAL_GPIO_Init+0x330>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6613      	str	r3, [r2, #96]	@ 0x60
 8003942:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab4 <HAL_GPIO_Init+0x330>)
 8003944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800394e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ab8 <HAL_GPIO_Init+0x334>)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3302      	adds	r3, #2
 8003956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	220f      	movs	r2, #15
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	43db      	mvns	r3, r3
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4013      	ands	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003978:	d025      	beq.n	80039c6 <HAL_GPIO_Init+0x242>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4f      	ldr	r2, [pc, #316]	@ (8003abc <HAL_GPIO_Init+0x338>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01f      	beq.n	80039c2 <HAL_GPIO_Init+0x23e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4e      	ldr	r2, [pc, #312]	@ (8003ac0 <HAL_GPIO_Init+0x33c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d019      	beq.n	80039be <HAL_GPIO_Init+0x23a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac4 <HAL_GPIO_Init+0x340>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_GPIO_Init+0x236>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4c      	ldr	r2, [pc, #304]	@ (8003ac8 <HAL_GPIO_Init+0x344>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d00d      	beq.n	80039b6 <HAL_GPIO_Init+0x232>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4b      	ldr	r2, [pc, #300]	@ (8003acc <HAL_GPIO_Init+0x348>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d007      	beq.n	80039b2 <HAL_GPIO_Init+0x22e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad0 <HAL_GPIO_Init+0x34c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_GPIO_Init+0x22a>
 80039aa:	2306      	movs	r3, #6
 80039ac:	e00c      	b.n	80039c8 <HAL_GPIO_Init+0x244>
 80039ae:	2307      	movs	r3, #7
 80039b0:	e00a      	b.n	80039c8 <HAL_GPIO_Init+0x244>
 80039b2:	2305      	movs	r3, #5
 80039b4:	e008      	b.n	80039c8 <HAL_GPIO_Init+0x244>
 80039b6:	2304      	movs	r3, #4
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_Init+0x244>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_Init+0x244>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_Init+0x244>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_Init+0x244>
 80039c6:	2300      	movs	r3, #0
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039d8:	4937      	ldr	r1, [pc, #220]	@ (8003ab8 <HAL_GPIO_Init+0x334>)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	3302      	adds	r3, #2
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a0a:	4a32      	ldr	r2, [pc, #200]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a10:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a34:	4a27      	ldr	r2, [pc, #156]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a3a:	4b26      	ldr	r3, [pc, #152]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	43db      	mvns	r3, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a88:	4a12      	ldr	r2, [pc, #72]	@ (8003ad4 <HAL_GPIO_Init+0x350>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f47f ae78 	bne.w	8003794 <HAL_GPIO_Init+0x10>
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40010000 	.word	0x40010000
 8003abc:	48000400 	.word	0x48000400
 8003ac0:	48000800 	.word	0x48000800
 8003ac4:	48000c00 	.word	0x48000c00
 8003ac8:	48001000 	.word	0x48001000
 8003acc:	48001400 	.word	0x48001400
 8003ad0:	48001800 	.word	0x48001800
 8003ad4:	40010400 	.word	0x40010400

08003ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
 8003af4:	e001      	b.n	8003afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b24:	e002      	b.n	8003b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b42:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b4e:	4a05      	ldr	r2, [pc, #20]	@ (8003b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd f94c 	bl	8000df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40010400 	.word	0x40010400

08003b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e08d      	b.n	8003c96 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8b4 	bl	8003cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	@ 0x24
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003bb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	e006      	b.n	8003bf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d108      	bne.n	8003c0a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	e007      	b.n	8003c1a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69d9      	ldr	r1, [r3, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e021      	b.n	8003cf4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2224      	movs	r2, #36	@ 0x24
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f821 	bl	8003d10 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f040 80f9 	bne.w	8003f3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_I2C_Mem_Write+0x34>
 8003d52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0ed      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Mem_Write+0x4e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0e6      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d7a:	f7ff fb81 	bl	8003480 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2319      	movs	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fac3 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0d1      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2221      	movs	r2, #33	@ 0x21
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2240      	movs	r2, #64	@ 0x40
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc4:	88f8      	ldrh	r0, [r7, #6]
 8003dc6:	893a      	ldrh	r2, [r7, #8]
 8003dc8:	8979      	ldrh	r1, [r7, #10]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f9d3 	bl	8004180 <I2C_RequestMemoryWrite>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0a9      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2bff      	cmp	r3, #255	@ 0xff
 8003df4:	d90e      	bls.n	8003e14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	22ff      	movs	r2, #255	@ 0xff
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	2300      	movs	r3, #0
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fc3d 	bl	800468c <I2C_TransferConfig>
 8003e12:	e00f      	b.n	8003e34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	8979      	ldrh	r1, [r7, #10]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fc2c 	bl	800468c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fabc 	bl	80043b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e07b      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d034      	beq.n	8003eec <HAL_I2C_Mem_Write+0x1c8>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d130      	bne.n	8003eec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	2200      	movs	r2, #0
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa3f 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e04d      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2bff      	cmp	r3, #255	@ 0xff
 8003eac:	d90e      	bls.n	8003ecc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	22ff      	movs	r2, #255	@ 0xff
 8003eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	8979      	ldrh	r1, [r7, #10]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fbe1 	bl	800468c <I2C_TransferConfig>
 8003eca:	e00f      	b.n	8003eec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	8979      	ldrh	r1, [r7, #10]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fbd0 	bl	800468c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d19e      	bne.n	8003e34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 faa2 	bl	8004444 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e01a      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f48 <HAL_I2C_Mem_Write+0x224>)
 8003f1e:	400b      	ands	r3, r1
 8003f20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e000      	b.n	8003f40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	fe00e800 	.word	0xfe00e800

08003f4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	813b      	strh	r3, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 80fd 	bne.w	800416e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_I2C_Mem_Read+0x34>
 8003f7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0f1      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Mem_Read+0x4e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e0ea      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fa2:	f7ff fa6d 	bl	8003480 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	2319      	movs	r3, #25
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f9af 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d5      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2222      	movs	r2, #34	@ 0x22
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2240      	movs	r2, #64	@ 0x40
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a3a      	ldr	r2, [r7, #32]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fec:	88f8      	ldrh	r0, [r7, #6]
 8003fee:	893a      	ldrh	r2, [r7, #8]
 8003ff0:	8979      	ldrh	r1, [r7, #10]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f913 	bl	8004228 <I2C_RequestMemoryRead>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0ad      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	2bff      	cmp	r3, #255	@ 0xff
 800401c:	d90e      	bls.n	800403c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	@ 0xff
 8004022:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004028:	b2da      	uxtb	r2, r3
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	4b52      	ldr	r3, [pc, #328]	@ (8004178 <HAL_I2C_Mem_Read+0x22c>)
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fb29 	bl	800468c <I2C_TransferConfig>
 800403a:	e00f      	b.n	800405c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800404a:	b2da      	uxtb	r2, r3
 800404c:	8979      	ldrh	r1, [r7, #10]
 800404e:	4b4a      	ldr	r3, [pc, #296]	@ (8004178 <HAL_I2C_Mem_Read+0x22c>)
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fb18 	bl	800468c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	2200      	movs	r2, #0
 8004064:	2104      	movs	r1, #4
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f956 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07c      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d034      	beq.n	800411c <HAL_I2C_Mem_Read+0x1d0>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d130      	bne.n	800411c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c0:	2200      	movs	r2, #0
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f927 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e04d      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2bff      	cmp	r3, #255	@ 0xff
 80040dc:	d90e      	bls.n	80040fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22ff      	movs	r2, #255	@ 0xff
 80040e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fac9 	bl	800468c <I2C_TransferConfig>
 80040fa:	e00f      	b.n	800411c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	b2da      	uxtb	r2, r3
 800410c:	8979      	ldrh	r1, [r7, #10]
 800410e:	2300      	movs	r3, #0
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fab8 	bl	800468c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d19a      	bne.n	800405c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f98a 	bl	8004444 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e01a      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2220      	movs	r2, #32
 8004140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_I2C_Mem_Read+0x230>)
 800414e:	400b      	ands	r3, r1
 8004150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	80002400 	.word	0x80002400
 800417c:	fe00e800 	.word	0xfe00e800

08004180 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	460b      	mov	r3, r1
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	4b20      	ldr	r3, [pc, #128]	@ (8004224 <I2C_RequestMemoryWrite+0xa4>)
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fa6f 	bl	800468c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f8ff 	bl	80043b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e02c      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d2:	e015      	b.n	8004200 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	b29b      	uxth	r3, r3
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	69b9      	ldr	r1, [r7, #24]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8e5 	bl	80043b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e012      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041f6:	893b      	ldrh	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2200      	movs	r2, #0
 8004208:	2180      	movs	r1, #128	@ 0x80
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f884 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	80002000 	.word	0x80002000

08004228 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	8979      	ldrh	r1, [r7, #10]
 8004248:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <I2C_RequestMemoryRead+0xa4>)
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2300      	movs	r3, #0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa1c 	bl	800468c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f8ac 	bl	80043b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e02c      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d105      	bne.n	800427a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28
 8004278:	e015      	b.n	80042a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800427a:	893b      	ldrh	r3, [r7, #8]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	b2da      	uxtb	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f892 	bl	80043b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e012      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800429c:	893b      	ldrh	r3, [r7, #8]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2200      	movs	r2, #0
 80042ae:	2140      	movs	r1, #64	@ 0x40
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f831 	bl	8004318 <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	80002000 	.word	0x80002000

080042d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d103      	bne.n	80042ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d007      	beq.n	800430c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	619a      	str	r2, [r3, #24]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004328:	e031      	b.n	800438e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d02d      	beq.n	800438e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004332:	f7ff f8a5 	bl	8003480 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d122      	bne.n	800438e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4013      	ands	r3, r2
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	429a      	cmp	r2, r3
 8004364:	d113      	bne.n	800438e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d0be      	beq.n	800432a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043c2:	e033      	b.n	800442c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f87f 	bl	80044cc <I2C_IsErrorOccurred>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e031      	b.n	800443c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d025      	beq.n	800442c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7ff f84e 	bl	8003480 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11a      	bne.n	800442c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b02      	cmp	r3, #2
 8004402:	d013      	beq.n	800442c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d1c4      	bne.n	80043c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004450:	e02f      	b.n	80044b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f838 	bl	80044cc <I2C_IsErrorOccurred>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e02d      	b.n	80044c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7ff f80b 	bl	8003480 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d11a      	bne.n	80044b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b20      	cmp	r3, #32
 8004488:	d013      	beq.n	80044b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e007      	b.n	80044c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d1c8      	bne.n	8004452 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d068      	beq.n	80045ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2210      	movs	r2, #16
 80044fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004500:	e049      	b.n	8004596 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d045      	beq.n	8004596 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe ffb9 	bl	8003480 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_IsErrorOccurred+0x54>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d13a      	bne.n	8004596 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800452a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004532:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004542:	d121      	bne.n	8004588 <I2C_IsErrorOccurred+0xbc>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800454a:	d01d      	beq.n	8004588 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	2b20      	cmp	r3, #32
 8004550:	d01a      	beq.n	8004588 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004560:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004562:	f7fe ff8d 	bl	8003480 <HAL_GetTick>
 8004566:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004568:	e00e      	b.n	8004588 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800456a:	f7fe ff89 	bl	8003480 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b19      	cmp	r3, #25
 8004576:	d907      	bls.n	8004588 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f043 0320 	orr.w	r3, r3, #32
 800457e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004586:	e006      	b.n	8004596 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b20      	cmp	r3, #32
 8004594:	d1e9      	bne.n	800456a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d003      	beq.n	80045ac <I2C_IsErrorOccurred+0xe0>
 80045a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0aa      	beq.n	8004502 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2220      	movs	r2, #32
 80045ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f043 0304 	orr.w	r3, r3, #4
 80045c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f043 0308 	orr.w	r3, r3, #8
 8004604:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800460e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	f043 0302 	orr.w	r3, r3, #2
 8004626:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004630:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01c      	beq.n	800467a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7ff fe45 	bl	80042d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <I2C_IsErrorOccurred+0x1bc>)
 8004652:	400b      	ands	r3, r1
 8004654:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	431a      	orrs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800467a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800467e:	4618      	mov	r0, r3
 8004680:	3728      	adds	r7, #40	@ 0x28
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	fe00e800 	.word	0xfe00e800

0800468c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	817b      	strh	r3, [r7, #10]
 800469a:	4613      	mov	r3, r2
 800469c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800469e:	897b      	ldrh	r3, [r7, #10]
 80046a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046a4:	7a7b      	ldrb	r3, [r7, #9]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	0d5b      	lsrs	r3, r3, #21
 80046c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046ca:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <I2C_TransferConfig+0x60>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	43db      	mvns	r3, r3
 80046d0:	ea02 0103 	and.w	r1, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	03ff63ff 	.word	0x03ff63ff

080046f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	d138      	bne.n	8004778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004710:	2302      	movs	r3, #2
 8004712:	e032      	b.n	800477a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	@ 0x24
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40007000 	.word	0x40007000

080047a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e3ca      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b6:	4b97      	ldr	r3, [pc, #604]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c0:	4b94      	ldr	r3, [pc, #592]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80e4 	beq.w	80049a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <HAL_RCC_OscConfig+0x4a>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	f040 808b 	bne.w	80048fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f040 8087 	bne.w	80048fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ee:	4b89      	ldr	r3, [pc, #548]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_RCC_OscConfig+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e3a2      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1a      	ldr	r2, [r3, #32]
 800480a:	4b82      	ldr	r3, [pc, #520]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <HAL_RCC_OscConfig+0x7c>
 8004816:	4b7f      	ldr	r3, [pc, #508]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800481e:	e005      	b.n	800482c <HAL_RCC_OscConfig+0x88>
 8004820:	4b7c      	ldr	r3, [pc, #496]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800482c:	4293      	cmp	r3, r2
 800482e:	d223      	bcs.n	8004878 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fd55 	bl	80052e4 <RCC_SetFlashLatencyFromMSIRange>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e383      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004844:	4b73      	ldr	r3, [pc, #460]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a72      	ldr	r2, [pc, #456]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800484a:	f043 0308 	orr.w	r3, r3, #8
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	4b70      	ldr	r3, [pc, #448]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	496d      	ldr	r1, [pc, #436]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004862:	4b6c      	ldr	r3, [pc, #432]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	4968      	ldr	r1, [pc, #416]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]
 8004876:	e025      	b.n	80048c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004878:	4b66      	ldr	r3, [pc, #408]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a65      	ldr	r2, [pc, #404]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800487e:	f043 0308 	orr.w	r3, r3, #8
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	4b63      	ldr	r3, [pc, #396]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4960      	ldr	r1, [pc, #384]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004896:	4b5f      	ldr	r3, [pc, #380]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	495b      	ldr	r1, [pc, #364]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fd15 	bl	80052e4 <RCC_SetFlashLatencyFromMSIRange>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e343      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c4:	f000 fc4a 	bl	800515c <HAL_RCC_GetSysClockFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b52      	ldr	r3, [pc, #328]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	4950      	ldr	r1, [pc, #320]	@ (8004a18 <HAL_RCC_OscConfig+0x274>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	4a4e      	ldr	r2, [pc, #312]	@ (8004a1c <HAL_RCC_OscConfig+0x278>)
 80048e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fe fd79 	bl	80033e0 <HAL_InitTick>
 80048ee:	4603      	mov	r3, r0
 80048f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d052      	beq.n	800499e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	e327      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d032      	beq.n	800496a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004904:	4b43      	ldr	r3, [pc, #268]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a42      	ldr	r2, [pc, #264]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004910:	f7fe fdb6 	bl	8003480 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004918:	f7fe fdb2 	bl	8003480 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e310      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800492a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004936:	4b37      	ldr	r3, [pc, #220]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a36      	ldr	r2, [pc, #216]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	4b34      	ldr	r3, [pc, #208]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	4931      	ldr	r1, [pc, #196]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004954:	4b2f      	ldr	r3, [pc, #188]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	492c      	ldr	r1, [pc, #176]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
 8004968:	e01a      	b.n	80049a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a29      	ldr	r2, [pc, #164]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004976:	f7fe fd83 	bl	8003480 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800497e:	f7fe fd7f 	bl	8003480 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e2dd      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004990:	4b20      	ldr	r3, [pc, #128]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x1da>
 800499c:	e000      	b.n	80049a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800499e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d074      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d005      	beq.n	80049be <HAL_RCC_OscConfig+0x21a>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d10e      	bne.n	80049d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d10b      	bne.n	80049d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d064      	beq.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d160      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e2ba      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x24a>
 80049e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e026      	b.n	8004a3c <HAL_RCC_OscConfig+0x298>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f6:	d115      	bne.n	8004a24 <HAL_RCC_OscConfig+0x280>
 80049f8:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a05      	ldr	r2, [pc, #20]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b03      	ldr	r3, [pc, #12]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a02      	ldr	r2, [pc, #8]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x298>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08009d5c 	.word	0x08009d5c
 8004a1c:	20000010 	.word	0x20000010
 8004a20:	20000024 	.word	0x20000024
 8004a24:	4ba0      	ldr	r3, [pc, #640]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a9f      	ldr	r2, [pc, #636]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4b9d      	ldr	r3, [pc, #628]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a9c      	ldr	r2, [pc, #624]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d013      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fe fd1c 	bl	8003480 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fe fd18 	bl	8003480 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	@ 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e276      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5e:	4b92      	ldr	r3, [pc, #584]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2a8>
 8004a6a:	e014      	b.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fd08 	bl	8003480 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fe fd04 	bl	8003480 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	@ 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e262      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a86:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2d0>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d060      	beq.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x310>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d116      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab4:	4b7c      	ldr	r3, [pc, #496]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_OscConfig+0x328>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e23f      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004acc:	4b76      	ldr	r3, [pc, #472]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	4973      	ldr	r1, [pc, #460]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	e040      	b.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d023      	beq.n	8004b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aea:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fe fcc3 	bl	8003480 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fe fcbf 	bl	8003480 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e21d      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b10:	4b65      	ldr	r3, [pc, #404]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b62      	ldr	r3, [pc, #392]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	495f      	ldr	r1, [pc, #380]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
 8004b30:	e018      	b.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a5c      	ldr	r2, [pc, #368]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fe fc9f 	bl	8003480 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fe fc9b 	bl	8003480 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e1f9      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b58:	4b53      	ldr	r3, [pc, #332]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d03c      	beq.n	8004bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01c      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fe fc7a 	bl	8003480 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fe fc76 	bl	8003480 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e1d4      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba2:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <HAL_RCC_OscConfig+0x3ec>
 8004bb0:	e01b      	b.n	8004bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fe fc5d 	bl	8003480 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fe fc59 	bl	8003480 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1b7      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bdc:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ef      	bne.n	8004bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a6 	beq.w	8004d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0c:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c14:	4b24      	ldr	r3, [pc, #144]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c24:	4b21      	ldr	r3, [pc, #132]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d118      	bne.n	8004c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c30:	4b1e      	ldr	r3, [pc, #120]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3c:	f7fe fc20 	bl	8003480 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fe fc1c 	bl	8003480 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e17a      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c56:	4b15      	ldr	r3, [pc, #84]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d108      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4d8>
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c70:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c7a:	e029      	b.n	8004cd0 <HAL_RCC_OscConfig+0x52c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d115      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x50c>
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	4a07      	ldr	r2, [pc, #28]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c94:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9a:	4a03      	ldr	r2, [pc, #12]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ca4:	e014      	b.n	8004cd0 <HAL_RCC_OscConfig+0x52c>
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	4b9c      	ldr	r3, [pc, #624]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	4a9b      	ldr	r2, [pc, #620]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc0:	4b98      	ldr	r3, [pc, #608]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	4a97      	ldr	r2, [pc, #604]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d016      	beq.n	8004d06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fe fbd2 	bl	8003480 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fe fbce 	bl	8003480 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e12a      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ed      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x53c>
 8004d04:	e015      	b.n	8004d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fe fbbb 	bl	8003480 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fe fbb7 	bl	8003480 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e113      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d24:	4b7f      	ldr	r3, [pc, #508]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ed      	bne.n	8004d0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d38:	4b7a      	ldr	r3, [pc, #488]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	4a79      	ldr	r2, [pc, #484]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80fe 	beq.w	8004f4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	f040 80d0 	bne.w	8004ef8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d58:	4b72      	ldr	r3, [pc, #456]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f003 0203 	and.w	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d130      	bne.n	8004dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	3b01      	subs	r3, #1
 8004d78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d127      	bne.n	8004dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d11f      	bne.n	8004dce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d98:	2a07      	cmp	r2, #7
 8004d9a:	bf14      	ite	ne
 8004d9c:	2201      	movne	r2, #1
 8004d9e:	2200      	moveq	r2, #0
 8004da0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d113      	bne.n	8004dce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	3b01      	subs	r3, #1
 8004db4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d109      	bne.n	8004dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d06e      	beq.n	8004eac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d069      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dd4:	4b53      	ldr	r3, [pc, #332]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d105      	bne.n	8004dec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004de0:	4b50      	ldr	r3, [pc, #320]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0ad      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004df0:	4b4c      	ldr	r3, [pc, #304]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a4b      	ldr	r2, [pc, #300]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dfc:	f7fe fb40 	bl	8003480 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fe fb3c 	bl	8003480 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e09a      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e16:	4b43      	ldr	r3, [pc, #268]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e22:	4b40      	ldr	r3, [pc, #256]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	4b40      	ldr	r3, [pc, #256]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e32:	3a01      	subs	r2, #1
 8004e34:	0112      	lsls	r2, r2, #4
 8004e36:	4311      	orrs	r1, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e3c:	0212      	lsls	r2, r2, #8
 8004e3e:	4311      	orrs	r1, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e44:	0852      	lsrs	r2, r2, #1
 8004e46:	3a01      	subs	r2, #1
 8004e48:	0552      	lsls	r2, r2, #21
 8004e4a:	4311      	orrs	r1, r2
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e50:	0852      	lsrs	r2, r2, #1
 8004e52:	3a01      	subs	r2, #1
 8004e54:	0652      	lsls	r2, r2, #25
 8004e56:	4311      	orrs	r1, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e5c:	0912      	lsrs	r2, r2, #4
 8004e5e:	0452      	lsls	r2, r2, #17
 8004e60:	430a      	orrs	r2, r1
 8004e62:	4930      	ldr	r1, [pc, #192]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e68:	4b2e      	ldr	r3, [pc, #184]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e74:	4b2b      	ldr	r3, [pc, #172]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e80:	f7fe fafe 	bl	8003480 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fe fafa 	bl	8003480 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e058      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9a:	4b22      	ldr	r3, [pc, #136]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ea6:	e050      	b.n	8004f4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e04f      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eac:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d148      	bne.n	8004f4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ec2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec4:	4b17      	ldr	r3, [pc, #92]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4a16      	ldr	r2, [pc, #88]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ed0:	f7fe fad6 	bl	8003480 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fe fad2 	bl	8003480 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e030      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eea:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0f0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x734>
 8004ef6:	e028      	b.n	8004f4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d023      	beq.n	8004f46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efe:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a08      	ldr	r2, [pc, #32]	@ (8004f24 <HAL_RCC_OscConfig+0x780>)
 8004f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fe fab9 	bl	8003480 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f10:	e00c      	b.n	8004f2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fe fab5 	bl	8003480 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d905      	bls.n	8004f2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e013      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
 8004f24:	40021000 	.word	0x40021000
 8004f28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	4b09      	ldr	r3, [pc, #36]	@ (8004f54 <HAL_RCC_OscConfig+0x7b0>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1ec      	bne.n	8004f12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f38:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <HAL_RCC_OscConfig+0x7b0>)
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	4905      	ldr	r1, [pc, #20]	@ (8004f54 <HAL_RCC_OscConfig+0x7b0>)
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCC_OscConfig+0x7b4>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	60cb      	str	r3, [r1, #12]
 8004f44:	e001      	b.n	8004f4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000
 8004f58:	feeefffc 	.word	0xfeeefffc

08004f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0e7      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b75      	ldr	r3, [pc, #468]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b72      	ldr	r3, [pc, #456]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0207 	bic.w	r2, r3, #7
 8004f86:	4970      	ldr	r1, [pc, #448]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0cf      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d010      	beq.n	8004fce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	4b66      	ldr	r3, [pc, #408]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d908      	bls.n	8004fce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fbc:	4b63      	ldr	r3, [pc, #396]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4960      	ldr	r1, [pc, #384]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d04c      	beq.n	8005074 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d107      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d121      	bne.n	8005032 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0a6      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ffa:	4b54      	ldr	r3, [pc, #336]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d115      	bne.n	8005032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e09a      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005012:	4b4e      	ldr	r3, [pc, #312]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e08e      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005022:	4b4a      	ldr	r3, [pc, #296]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e086      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005032:	4b46      	ldr	r3, [pc, #280]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f023 0203 	bic.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4943      	ldr	r1, [pc, #268]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005044:	f7fe fa1c 	bl	8003480 <HAL_GetTick>
 8005048:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	e00a      	b.n	8005062 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800504c:	f7fe fa18 	bl	8003480 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e06e      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005062:	4b3a      	ldr	r3, [pc, #232]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 020c 	and.w	r2, r3, #12
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	429a      	cmp	r2, r3
 8005072:	d1eb      	bne.n	800504c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d010      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	4b31      	ldr	r3, [pc, #196]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800508c:	429a      	cmp	r2, r3
 800508e:	d208      	bcs.n	80050a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005090:	4b2e      	ldr	r3, [pc, #184]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	492b      	ldr	r1, [pc, #172]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050a2:	4b29      	ldr	r3, [pc, #164]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d210      	bcs.n	80050d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b0:	4b25      	ldr	r3, [pc, #148]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f023 0207 	bic.w	r2, r3, #7
 80050b8:	4923      	ldr	r1, [pc, #140]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c0:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <HAL_RCC_ClockConfig+0x1ec>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e036      	b.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050de:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	4918      	ldr	r1, [pc, #96]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d009      	beq.n	8005110 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fc:	4b13      	ldr	r3, [pc, #76]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	4910      	ldr	r1, [pc, #64]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005110:	f000 f824 	bl	800515c <HAL_RCC_GetSysClockFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <HAL_RCC_ClockConfig+0x1f0>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	091b      	lsrs	r3, r3, #4
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	490b      	ldr	r1, [pc, #44]	@ (8005150 <HAL_RCC_ClockConfig+0x1f4>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	4a09      	ldr	r2, [pc, #36]	@ (8005154 <HAL_RCC_ClockConfig+0x1f8>)
 800512e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005130:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <HAL_RCC_ClockConfig+0x1fc>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f7fe f953 	bl	80033e0 <HAL_InitTick>
 800513a:	4603      	mov	r3, r0
 800513c:	72fb      	strb	r3, [r7, #11]

  return status;
 800513e:	7afb      	ldrb	r3, [r7, #11]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40022000 	.word	0x40022000
 800514c:	40021000 	.word	0x40021000
 8005150:	08009d5c 	.word	0x08009d5c
 8005154:	20000010 	.word	0x20000010
 8005158:	20000024 	.word	0x20000024

0800515c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800515c:	b480      	push	{r7}
 800515e:	b089      	sub	sp, #36	@ 0x24
 8005160:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800516a:	4b3e      	ldr	r3, [pc, #248]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005174:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x34>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b0c      	cmp	r3, #12
 8005188:	d121      	bne.n	80051ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d11e      	bne.n	80051ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005190:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0308 	and.w	r3, r3, #8
 8005198:	2b00      	cmp	r3, #0
 800519a:	d107      	bne.n	80051ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800519c:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a2:	0a1b      	lsrs	r3, r3, #8
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e005      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10d      	bne.n	80051e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d102      	bne.n	80051da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051d4:	4b25      	ldr	r3, [pc, #148]	@ (800526c <HAL_RCC_GetSysClockFreq+0x110>)
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	e004      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d101      	bne.n	80051e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051e0:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x114>)
 80051e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b0c      	cmp	r3, #12
 80051e8:	d134      	bne.n	8005254 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d003      	beq.n	8005202 <HAL_RCC_GetSysClockFreq+0xa6>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d003      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0xac>
 8005200:	e005      	b.n	800520e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005202:	4b1a      	ldr	r3, [pc, #104]	@ (800526c <HAL_RCC_GetSysClockFreq+0x110>)
 8005204:	617b      	str	r3, [r7, #20]
      break;
 8005206:	e005      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005208:	4b19      	ldr	r3, [pc, #100]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x114>)
 800520a:	617b      	str	r3, [r7, #20]
      break;
 800520c:	e002      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	617b      	str	r3, [r7, #20]
      break;
 8005212:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005214:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	3301      	adds	r3, #1
 8005220:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005222:	4b10      	ldr	r3, [pc, #64]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	fb03 f202 	mul.w	r2, r3, r2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800523a:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <HAL_RCC_GetSysClockFreq+0x108>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	0e5b      	lsrs	r3, r3, #25
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	3301      	adds	r3, #1
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005252:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005254:	69bb      	ldr	r3, [r7, #24]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3724      	adds	r7, #36	@ 0x24
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	08009d74 	.word	0x08009d74
 800526c:	00f42400 	.word	0x00f42400
 8005270:	007a1200 	.word	0x007a1200

08005274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005278:	4b03      	ldr	r3, [pc, #12]	@ (8005288 <HAL_RCC_GetHCLKFreq+0x14>)
 800527a:	681b      	ldr	r3, [r3, #0]
}
 800527c:	4618      	mov	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000010 	.word	0x20000010

0800528c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005290:	f7ff fff0 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	0a1b      	lsrs	r3, r3, #8
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	4904      	ldr	r1, [pc, #16]	@ (80052b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	08009d6c 	.word	0x08009d6c

080052b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052bc:	f7ff ffda 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b06      	ldr	r3, [pc, #24]	@ (80052dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	0adb      	lsrs	r3, r3, #11
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	4904      	ldr	r1, [pc, #16]	@ (80052e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ce:	5ccb      	ldrb	r3, [r1, r3]
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	08009d6c 	.word	0x08009d6c

080052e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052f0:	4b2a      	ldr	r3, [pc, #168]	@ (800539c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052fc:	f7ff fa44 	bl	8004788 <HAL_PWREx_GetVoltageRange>
 8005300:	6178      	str	r0, [r7, #20]
 8005302:	e014      	b.n	800532e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005304:	4b25      	ldr	r3, [pc, #148]	@ (800539c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	4a24      	ldr	r2, [pc, #144]	@ (800539c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800530a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005310:	4b22      	ldr	r3, [pc, #136]	@ (800539c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800531c:	f7ff fa34 	bl	8004788 <HAL_PWREx_GetVoltageRange>
 8005320:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005322:	4b1e      	ldr	r3, [pc, #120]	@ (800539c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005326:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800532c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005334:	d10b      	bne.n	800534e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b80      	cmp	r3, #128	@ 0x80
 800533a:	d919      	bls.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005340:	d902      	bls.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005342:	2302      	movs	r3, #2
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	e013      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005348:	2301      	movs	r3, #1
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e010      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b80      	cmp	r3, #128	@ 0x80
 8005352:	d902      	bls.n	800535a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005354:	2303      	movs	r3, #3
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	e00a      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b80      	cmp	r3, #128	@ 0x80
 800535e:	d102      	bne.n	8005366 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005360:	2302      	movs	r3, #2
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	e004      	b.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b70      	cmp	r3, #112	@ 0x70
 800536a:	d101      	bne.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800536c:	2301      	movs	r3, #1
 800536e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f023 0207 	bic.w	r2, r3, #7
 8005378:	4909      	ldr	r1, [pc, #36]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005380:	4b07      	ldr	r3, [pc, #28]	@ (80053a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	429a      	cmp	r2, r3
 800538c:	d001      	beq.n	8005392 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e000      	b.n	8005394 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40021000 	.word	0x40021000
 80053a0:	40022000 	.word	0x40022000

080053a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e0be      	b.n	8005534 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d108      	bne.n	80053d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053c6:	d009      	beq.n	80053dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	61da      	str	r2, [r3, #28]
 80053ce:	e005      	b.n	80053dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8cb 	bl	800558c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800540c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005416:	d902      	bls.n	800541e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e002      	b.n	8005424 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800541e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005422:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800542c:	d007      	beq.n	800543e <HAL_SPI_Init+0x9a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005436:	d002      	beq.n	800543e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005480:	ea42 0103 	orr.w	r1, r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005488:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549c:	d11b      	bne.n	80054d6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054ae:	d903      	bls.n	80054b8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80054b6:	e002      	b.n	80054be <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d107      	bne.n	80054d6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	0c1b      	lsrs	r3, r3, #16
 80054dc:	f003 0204 	and.w	r2, r3, #4
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80054fc:	ea42 0103 	orr.w	r1, r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005516:	d105      	bne.n	8005524 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	b292      	uxth	r2, r2
 8005522:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e01a      	b.n	8005584 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005564:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f81a 	bl	80055a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	@ 0x30
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d003      	beq.n	80055e6 <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80055e4:	e1cc      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ee:	d112      	bne.n	8005616 <HAL_SPI_Receive+0x62>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10e      	bne.n	8005616 <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2204      	movs	r2, #4
 80055fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005600:	88fa      	ldrh	r2, [r7, #6]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f9c1 	bl	8005994 <HAL_SPI_TransmitReceive>
 8005612:	4603      	mov	r3, r0
 8005614:	e1ba      	b.n	800598c <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_SPI_Receive+0x70>
 8005620:	2302      	movs	r3, #2
 8005622:	e1b3      	b.n	800598c <HAL_SPI_Receive+0x3d8>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562c:	f7fd ff28 	bl	8003480 <HAL_GetTick>
 8005630:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <HAL_SPI_Receive+0x8a>
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8005644:	e19c      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2204      	movs	r2, #4
 800564a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	88fa      	ldrh	r2, [r7, #6]
 8005666:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005690:	d118      	bne.n	80056c4 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056b0:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056cc:	d908      	bls.n	80056e0 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	e007      	b.n	80056f0 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056f8:	d10f      	bne.n	800571a <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005718:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b40      	cmp	r3, #64	@ 0x40
 8005726:	d007      	beq.n	8005738 <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005736:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005740:	d871      	bhi.n	8005826 <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005742:	e035      	b.n	80057b0 <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d117      	bne.n	8005782 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f103 020c 	add.w	r2, r3, #12
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005780:	e016      	b.n	80057b0 <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005782:	f7fd fe7d 	bl	8003480 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d803      	bhi.n	800579a <HAL_SPI_Receive+0x1e6>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d102      	bne.n	80057a0 <HAL_SPI_Receive+0x1ec>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d107      	bne.n	80057b0 <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          hspi->State = HAL_SPI_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80057ae:	e0e7      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1c3      	bne.n	8005744 <HAL_SPI_Receive+0x190>
 80057bc:	e039      	b.n	8005832 <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d115      	bne.n	80057f8 <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d6:	b292      	uxth	r2, r2
 80057d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80057f6:	e016      	b.n	8005826 <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f8:	f7fd fe42 	bl	8003480 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d803      	bhi.n	8005810 <HAL_SPI_Receive+0x25c>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Receive+0x262>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          hspi->State = HAL_SPI_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005824:	e0ac      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1c5      	bne.n	80057be <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800583a:	d178      	bne.n	800592e <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800584a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2201      	movs	r2, #1
 8005854:	2101      	movs	r1, #1
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f001 fa00 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8005868:	e08a      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005872:	d907      	bls.n	8005884 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587e:	b292      	uxth	r2, r2
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e008      	b.n	8005896 <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f103 020c 	add.w	r2, r3, #12
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	7812      	ldrb	r2, [r2, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2201      	movs	r2, #1
 800589e:	2101      	movs	r1, #1
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f001 f9db 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d009      	beq.n	80058c0 <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b0:	f043 0202 	orr.w	r2, r3, #2
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 80058be:	e05f      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058c8:	d105      	bne.n	80058d6 <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	e02b      	b.n	800592e <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80058e6:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058f0:	d11d      	bne.n	800592e <HAL_SPI_Receive+0x37a>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d119      	bne.n	800592e <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2201      	movs	r2, #1
 8005902:	2101      	movs	r1, #1
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f001 f9a9 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005914:	f043 0202 	orr.w	r2, r3, #2
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8005922:	e02d      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800592c:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800592e:	6a3a      	ldr	r2, [r7, #32]
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f001 fab0 	bl	8006e98 <SPI_EndRxTransaction>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b10      	cmp	r3, #16
 8005950:	d10a      	bne.n	8005968 <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005956:	f043 0202 	orr.w	r2, r3, #2
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005966:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005976:	e003      	b.n	8005980 <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	@ 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b092      	sub	sp, #72	@ 0x48
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059aa:	2301      	movs	r3, #1
 80059ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x2e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e322      	b.n	8006008 <HAL_SPI_TransmitReceive+0x674>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ca:	f7fd fd59 	bl	8003480 <HAL_GetTick>
 80059ce:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  tmp_mode            = hspi->Init.Mode;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  initial_TxXferCount = Size;
 80059e0:	887b      	ldrh	r3, [r7, #2]
 80059e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	853b      	strh	r3, [r7, #40]	@ 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d00f      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x8c>
 8005a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a06:	d107      	bne.n	8005a18 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <HAL_SPI_TransmitReceive+0x84>
 8005a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d003      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8005a1e:	e2ed      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_SPI_TransmitReceive+0x9e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_SPI_TransmitReceive+0x9e>
 8005a2c:	887b      	ldrh	r3, [r7, #2]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    goto error;
 8005a38:	e2e0      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d003      	beq.n	8005a4e <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2205      	movs	r2, #5
 8005a4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	887a      	ldrh	r2, [r7, #2]
 8005a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	887a      	ldrh	r2, [r7, #2]
 8005a66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	887a      	ldrh	r2, [r7, #2]
 8005a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	887a      	ldrh	r2, [r7, #2]
 8005a7a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a90:	d10f      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ab0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005aba:	d802      	bhi.n	8005ac2 <HAL_SPI_TransmitReceive+0x12e>
 8005abc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d908      	bls.n	8005ad4 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	e007      	b.n	8005ae4 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ae2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b40      	cmp	r3, #64	@ 0x40
 8005af0:	d007      	beq.n	8005b02 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b0a:	f240 80ce 	bls.w	8005caa <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x18a>
 8005b16:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	f040 80b8 	bne.w	8005c8e <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 80a0 	bne.w	8005c8e <HAL_SPI_TransmitReceive+0x2fa>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b56:	f040 809a 	bne.w	8005c8e <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10c      	bne.n	8005b7e <HAL_SPI_TransmitReceive+0x1ea>
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b7c:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005b8c:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b8e:	e07e      	b.n	8005c8e <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d13f      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x28a>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d03a      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x28a>
 8005ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d137      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb2:	881a      	ldrh	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bbe:	1c9a      	adds	r2, r3, #2
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11e      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x28a>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be8:	d119      	bne.n	8005c1e <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10c      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x27a>
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0c:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c1c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d11c      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0x2d2>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d016      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	b292      	uxth	r2, r2
 8005c44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	1c9a      	adds	r2, r3, #2
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c62:	2301      	movs	r3, #1
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c66:	f7fd fc0b 	bl	8003480 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d80b      	bhi.n	8005c8e <HAL_SPI_TransmitReceive+0x2fa>
 8005c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7c:	d007      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005c8c:	e1b6      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f47f af7b 	bne.w	8005b90 <HAL_SPI_TransmitReceive+0x1fc>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f47f af74 	bne.w	8005b90 <HAL_SPI_TransmitReceive+0x1fc>
 8005ca8:	e12d      	b.n	8005f06 <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x326>
 8005cb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	f040 8119 	bne.w	8005eec <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d912      	bls.n	8005cea <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc8:	881a      	ldrh	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b02      	subs	r3, #2
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ce8:	e100      	b.n	8005eec <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f040 80e8 	bne.w	8005eec <HAL_SPI_TransmitReceive+0x558>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d24:	f040 80e2 	bne.w	8005eec <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10c      	bne.n	8005d4c <HAL_SPI_TransmitReceive+0x3b8>
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4a:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d5a:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5c:	e0c6      	b.n	8005eec <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d158      	bne.n	8005e1e <HAL_SPI_TransmitReceive+0x48a>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d053      	beq.n	8005e1e <HAL_SPI_TransmitReceive+0x48a>
 8005d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d150      	bne.n	8005e1e <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d912      	bls.n	8005dac <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	881a      	ldrh	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	1c9a      	adds	r2, r3, #2
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b02      	subs	r3, #2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005daa:	e012      	b.n	8005dd2 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d11e      	bne.n	8005e1e <HAL_SPI_TransmitReceive+0x48a>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005de8:	d119      	bne.n	8005e1e <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10c      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x47a>
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e0c:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e1c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d148      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x52a>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d042      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d923      	bls.n	8005e8c <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	b292      	uxth	r2, r2
 8005e50:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	1c9a      	adds	r2, r3, #2
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b02      	subs	r3, #2
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d81f      	bhi.n	8005eba <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	e016      	b.n	8005eba <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f103 020c 	add.w	r2, r3, #12
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ebe:	f7fd fadf 	bl	8003480 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d803      	bhi.n	8005ed6 <HAL_SPI_TransmitReceive+0x542>
 8005ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d102      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x548>
 8005ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005eea:	e087      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f47f af33 	bne.w	8005d5e <HAL_SPI_TransmitReceive+0x3ca>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f af2c 	bne.w	8005d5e <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f0e:	d146      	bne.n	8005f9e <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f16:	2201      	movs	r2, #1
 8005f18:	2101      	movs	r1, #1
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fe9e 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2a:	f043 0202 	orr.w	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      goto error;
 8005f38:	e060      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f42:	d105      	bne.n	8005f50 <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	e026      	b.n	8005f9e <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f60:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d119      	bne.n	8005f9e <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f70:	2201      	movs	r2, #1
 8005f72:	2101      	movs	r1, #1
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 fe71 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d009      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f84:	f043 0202 	orr.w	r2, r3, #2
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	661a      	str	r2, [r3, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
          goto error;
 8005f92:	e033      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d10d      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fb0:	f043 0202 	orr.w	r2, r3, #2
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8005fc0:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 ffbb 	bl	8006f48 <SPI_EndRxTxTransaction>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8005ff2:	e003      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006004:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8006008:	4618      	mov	r0, r3
 800600a:	3740      	adds	r7, #64	@ 0x40
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_SPI_Transmit_IT+0x1e>
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006032:	e082      	b.n	800613a <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d002      	beq.n	8006046 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8006040:	2302      	movs	r3, #2
 8006042:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006044:	e079      	b.n	800613a <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_SPI_Transmit_IT+0x44>
 8006050:	2302      	movs	r3, #2
 8006052:	e073      	b.n	800613c <HAL_SPI_Transmit_IT+0x12c>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2203      	movs	r2, #3
 8006060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	88fa      	ldrh	r2, [r7, #6]
 800607a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060a0:	d903      	bls.n	80060aa <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a28      	ldr	r2, [pc, #160]	@ (8006148 <HAL_SPI_Transmit_IT+0x138>)
 80060a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80060a8:	e002      	b.n	80060b0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4a27      	ldr	r2, [pc, #156]	@ (800614c <HAL_SPI_Transmit_IT+0x13c>)
 80060ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b8:	d10f      	bne.n	80060da <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060d8:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e2:	d10f      	bne.n	8006104 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006102:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	d007      	beq.n	8006122 <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006120:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8006138:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800613a:	7dfb      	ldrb	r3, [r7, #23]
}
 800613c:	4618      	mov	r0, r3
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	08006bfd 	.word	0x08006bfd
 800614c:	08006b9d 	.word	0x08006b9d

08006150 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800616e:	2302      	movs	r3, #2
 8006170:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006172:	e0ba      	b.n	80062ea <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d110      	bne.n	800619e <HAL_SPI_Receive_IT+0x4e>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006184:	d10b      	bne.n	800619e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2204      	movs	r2, #4
 800618a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f8b1 	bl	80062fc <HAL_SPI_TransmitReceive_IT>
 800619a:	4603      	mov	r3, r0
 800619c:	e0a6      	b.n	80062ec <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_SPI_Receive_IT+0x5a>
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061ae:	e09c      	b.n	80062ea <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_SPI_Receive_IT+0x6e>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e096      	b.n	80062ec <HAL_SPI_Receive_IT+0x19c>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2204      	movs	r2, #4
 80061ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	88fa      	ldrh	r2, [r7, #6]
 80061de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800620a:	d90b      	bls.n	8006224 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800621a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a35      	ldr	r2, [pc, #212]	@ (80062f4 <HAL_SPI_Receive_IT+0x1a4>)
 8006220:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006222:	e00a      	b.n	800623a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006232:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a30      	ldr	r2, [pc, #192]	@ (80062f8 <HAL_SPI_Receive_IT+0x1a8>)
 8006238:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006242:	d10f      	bne.n	8006264 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006252:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006262:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800626c:	d11f      	bne.n	80062ae <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800627c:	d806      	bhi.n	800628c <HAL_SPI_Receive_IT+0x13c>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	2b02      	cmp	r3, #2
 8006284:	d102      	bne.n	800628c <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2202      	movs	r2, #2
 800628a:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	e002      	b.n	80062b4 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062be:	2b40      	cmp	r3, #64	@ 0x40
 80062c0:	d007      	beq.n	80062d2 <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062d0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80062e8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	08006b15 	.word	0x08006b15
 80062f8:	08006a55 	.word	0x08006a55

080062fc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006314:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800631c:	7dbb      	ldrb	r3, [r7, #22]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d00d      	beq.n	800633e <HAL_SPI_TransmitReceive_IT+0x42>
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006328:	d106      	bne.n	8006338 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006332:	7dbb      	ldrb	r3, [r7, #22]
 8006334:	2b04      	cmp	r3, #4
 8006336:	d002      	beq.n	800633e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800633c:	e0a5      	b.n	800648a <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_SPI_TransmitReceive_IT+0x54>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_SPI_TransmitReceive_IT+0x54>
 800634a:	887b      	ldrh	r3, [r7, #2]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006354:	e099      	b.n	800648a <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_SPI_TransmitReceive_IT+0x68>
 8006360:	2302      	movs	r3, #2
 8006362:	e093      	b.n	800648c <HAL_SPI_TransmitReceive_IT+0x190>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b04      	cmp	r3, #4
 8006376:	d003      	beq.n	8006380 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2205      	movs	r2, #5
 800637c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	887a      	ldrh	r2, [r7, #2]
 8006390:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	887a      	ldrh	r2, [r7, #2]
 8006396:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	887a      	ldrh	r2, [r7, #2]
 80063a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	887a      	ldrh	r2, [r7, #2]
 80063aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063b6:	d906      	bls.n	80063c6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a37      	ldr	r2, [pc, #220]	@ (8006498 <HAL_SPI_TransmitReceive_IT+0x19c>)
 80063bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4a36      	ldr	r2, [pc, #216]	@ (800649c <HAL_SPI_TransmitReceive_IT+0x1a0>)
 80063c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80063c4:	e005      	b.n	80063d2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a35      	ldr	r2, [pc, #212]	@ (80064a0 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 80063ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a35      	ldr	r2, [pc, #212]	@ (80064a4 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 80063d0:	651a      	str	r2, [r3, #80]	@ 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063da:	d11f      	bne.n	800641c <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	649a      	str	r2, [r3, #72]	@ 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80063ea:	d806      	bhi.n	80063fa <HAL_SPI_TransmitReceive_IT+0xfe>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    SPI_RESET_CRC(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e002      	b.n	8006422 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	649a      	str	r2, [r3, #72]	@ 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800642a:	d802      	bhi.n	8006432 <HAL_SPI_TransmitReceive_IT+0x136>
 800642c:	887b      	ldrh	r3, [r7, #2]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d908      	bls.n	8006444 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	e007      	b.n	8006454 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006452:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b40      	cmp	r3, #64	@ 0x40
 8006460:	d007      	beq.n	8006472 <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006470:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006488:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
}
 800648c:	4618      	mov	r0, r3
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	080068dd 	.word	0x080068dd
 800649c:	0800698d 	.word	0x0800698d
 80064a0:	080066e5 	.word	0x080066e5
 80064a4:	08006821 	.word	0x08006821

080064a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10e      	bne.n	80064e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	4798      	blx	r3
    return;
 80064e6:	e0ce      	b.n	8006686 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <HAL_SPI_IRQHandler+0x5e>
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
    return;
 8006504:	e0bf      	b.n	8006686 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <HAL_SPI_IRQHandler+0x7e>
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80b0 	beq.w	8006686 <HAL_SPI_IRQHandler+0x1de>
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 80aa 	beq.w	8006686 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d023      	beq.n	8006584 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b03      	cmp	r3, #3
 8006546:	d011      	beq.n	800656c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654c:	f043 0204 	orr.w	r2, r3, #4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	e00b      	b.n	8006584 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800656c:	2300      	movs	r3, #0
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	613b      	str	r3, [r7, #16]
 8006580:	693b      	ldr	r3, [r7, #16]
        return;
 8006582:	e080      	b.n	8006686 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d014      	beq.n	80065b8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00c      	beq.n	80065dc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c6:	f043 0208 	orr.w	r2, r3, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d04f      	beq.n	8006684 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <HAL_SPI_IRQHandler+0x168>
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d034      	beq.n	800667a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0203 	bic.w	r2, r2, #3
 800661e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006624:	2b00      	cmp	r3, #0
 8006626:	d011      	beq.n	800664c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800662c:	4a17      	ldr	r2, [pc, #92]	@ (800668c <HAL_SPI_IRQHandler+0x1e4>)
 800662e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006634:	4618      	mov	r0, r3
 8006636:	f7fd f864 	bl	8003702 <HAL_DMA_Abort_IT>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006644:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006650:	2b00      	cmp	r3, #0
 8006652:	d016      	beq.n	8006682 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006658:	4a0c      	ldr	r2, [pc, #48]	@ (800668c <HAL_SPI_IRQHandler+0x1e4>)
 800665a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006660:	4618      	mov	r0, r3
 8006662:	f7fd f84e 	bl	8003702 <HAL_DMA_Abort_IT>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006670:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8006678:	e003      	b.n	8006682 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f812 	bl	80066a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006680:	e000      	b.n	8006684 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006682:	bf00      	nop
    return;
 8006684:	bf00      	nop
  }
}
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	080066b9 	.word	0x080066b9

08006690 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff ffe5 	bl	80066a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
	...

080066e4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d923      	bls.n	8006740 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	b292      	uxth	r2, r2
 8006704:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	1c9a      	adds	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b02      	subs	r3, #2
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d11f      	bne.n	800676e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	e016      	b.n	800676e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f103 020c 	add.w	r2, r3, #12
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006762:	b29b      	uxth	r3, r3
 8006764:	3b01      	subs	r3, #1
 8006766:	b29a      	uxth	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006774:	b29b      	uxth	r3, r3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d120      	bne.n	80067bc <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006782:	d10b      	bne.n	800679c <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006792:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a0b      	ldr	r2, [pc, #44]	@ (80067c4 <SPI_2linesRxISR_8BIT+0xe0>)
 8006798:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800679a:	e00f      	b.n	80067bc <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067aa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fc0c 	bl	8006fd4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	080067c9 	.word	0x080067c9

080067c8 <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80067e4:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ea:	1e5a      	subs	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10f      	bne.n	8006818 <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006806:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d102      	bne.n	8006818 <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fbde 	bl	8006fd4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d912      	bls.n	8006858 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006842:	1c9a      	adds	r2, r3, #2
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b02      	subs	r3, #2
 8006850:	b29a      	uxth	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006856:	e012      	b.n	800687e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	330c      	adds	r3, #12
 8006862:	7812      	ldrb	r2, [r2, #0]
 8006864:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006882:	b29b      	uxth	r3, r3
 8006884:	2b00      	cmp	r3, #0
 8006886:	d126      	bne.n	80068d6 <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006890:	d110      	bne.n	80068b4 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068a0:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068b0:	605a      	str	r2, [r3, #4]
      return;
 80068b2:	e010      	b.n	80068d6 <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068c2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fb7f 	bl	8006fd4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ee:	b292      	uxth	r2, r2
 80068f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	1c9a      	adds	r2, r3, #2
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d118      	bne.n	800694c <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006922:	d103      	bne.n	800692c <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a0b      	ldr	r2, [pc, #44]	@ (8006954 <SPI_2linesRxISR_16BIT+0x78>)
 8006928:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 800692a:	e00f      	b.n	800694c <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800693a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fb44 	bl	8006fd4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	08006959 	.word	0x08006959

08006958 <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 800696c:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800697c:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fb28 	bl	8006fd4 <SPI_CloseRxTx_ISR>
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006998:	881a      	ldrh	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a4:	1c9a      	adds	r2, r3, #2
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d126      	bne.n	8006a10 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ca:	d110      	bne.n	80069ee <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069da:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069ea:	605a      	str	r2, [r3, #4]
      return;
 80069ec:	e010      	b.n	8006a10 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069fc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fae2 	bl	8006fd4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006a32:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a38:	1e5a      	subs	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	649a      	str	r2, [r3, #72]	@ 0x48

  if (hspi->CRCSize == 0U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb20 	bl	800708c <SPI_CloseRx_ISR>
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f103 020c 	add.w	r2, r3, #12
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	7812      	ldrb	r2, [r2, #0]
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d10c      	bne.n	8006ab0 <SPI_RxISR_8BIT+0x5c>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a9e:	d107      	bne.n	8006ab0 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006aae:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac4:	d103      	bne.n	8006ace <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a04      	ldr	r2, [pc, #16]	@ (8006adc <SPI_RxISR_8BIT+0x88>)
 8006aca:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006acc:	e002      	b.n	8006ad4 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fadc 	bl	800708c <SPI_CloseRx_ISR>
  }
}
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	08006a17 	.word	0x08006a17

08006ae0 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006af4:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b04:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fac0 	bl	800708c <SPI_CloseRx_ISR>
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	b292      	uxth	r2, r2
 8006b28:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	1c9a      	adds	r2, r3, #2
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d10c      	bne.n	8006b6c <SPI_RxISR_16BIT+0x58>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b5a:	d107      	bne.n	8006b6c <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b6a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10b      	bne.n	8006b90 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b80:	d103      	bne.n	8006b8a <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a04      	ldr	r2, [pc, #16]	@ (8006b98 <SPI_RxISR_16BIT+0x84>)
 8006b86:	64da      	str	r2, [r3, #76]	@ 0x4c
      return;
 8006b88:	e002      	b.n	8006b90 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa7e 	bl	800708c <SPI_CloseRx_ISR>
  }
}
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	08006ae1 	.word	0x08006ae1

08006b9c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10f      	bne.n	8006bf4 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bdc:	d107      	bne.n	8006bee <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006bec:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa92 	bl	8007118 <SPI_CloseTx_ISR>
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	881a      	ldrh	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	1c9a      	adds	r2, r3, #2
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10f      	bne.n	8006c52 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c3a:	d107      	bne.n	8006c4c <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c4a:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fa63 	bl	8007118 <SPI_CloseTx_ISR>
  }
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c6c:	f7fc fc08 	bl	8003480 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c7c:	f7fc fc00 	bl	8003480 <HAL_GetTick>
 8006c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c82:	4b39      	ldr	r3, [pc, #228]	@ (8006d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	015b      	lsls	r3, r3, #5
 8006c88:	0d1b      	lsrs	r3, r3, #20
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c92:	e054      	b.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d050      	beq.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c9c:	f7fc fbf0 	bl	8003480 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d902      	bls.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d13d      	bne.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cca:	d111      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd4:	d004      	beq.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cde:	d107      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cf8:	d10f      	bne.n	8006d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e017      	b.n	8006d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d19b      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000010 	.word	0x20000010

08006d6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	@ 0x28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d7e:	f7fc fb7f 	bl	8003480 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	1a9b      	subs	r3, r3, r2
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006d8e:	f7fc fb77 	bl	8003480 <HAL_GetTick>
 8006d92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8006e94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	00da      	lsls	r2, r3, #3
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	0d1b      	lsrs	r3, r3, #20
 8006dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
 8006db2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006db4:	e060      	b.n	8006e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006dbc:	d107      	bne.n	8006dce <SPI_WaitFifoStateUntilTimeout+0x62>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd4:	d050      	beq.n	8006e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dd6:	f7fc fb53 	bl	8003480 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d902      	bls.n	8006dec <SPI_WaitFifoStateUntilTimeout+0x80>
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d13d      	bne.n	8006e68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e04:	d111      	bne.n	8006e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e0e:	d004      	beq.n	8006e1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e18:	d107      	bne.n	8006e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e32:	d10f      	bne.n	8006e54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e010      	b.n	8006e8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	4013      	ands	r3, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d196      	bne.n	8006db6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3728      	adds	r7, #40	@ 0x28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000010 	.word	0x20000010

08006e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006eac:	d111      	bne.n	8006ed2 <SPI_EndRxTransaction+0x3a>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb6:	d004      	beq.n	8006ec2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ec0:	d107      	bne.n	8006ed2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ed0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2180      	movs	r1, #128	@ 0x80
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7ff febd 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eec:	f043 0220 	orr.w	r2, r3, #32
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e023      	b.n	8006f40 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f00:	d11d      	bne.n	8006f3e <SPI_EndRxTransaction+0xa6>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f0a:	d004      	beq.n	8006f16 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f14:	d113      	bne.n	8006f3e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff ff22 	bl	8006d6c <SPI_WaitFifoStateUntilTimeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d007      	beq.n	8006f3e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f32:	f043 0220 	orr.w	r2, r3, #32
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e000      	b.n	8006f40 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff ff03 	bl	8006d6c <SPI_WaitFifoStateUntilTimeout>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e027      	b.n	8006fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2180      	movs	r1, #128	@ 0x80
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff fe68 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f96:	f043 0220 	orr.w	r2, r3, #32
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e014      	b.n	8006fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f7ff fedc 	bl	8006d6c <SPI_WaitFifoStateUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fbe:	f043 0220 	orr.w	r2, r3, #32
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e000      	b.n	8006fcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fdc:	f7fc fa50 	bl	8003480 <HAL_GetTick>
 8006fe0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0220 	bic.w	r2, r2, #32
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	2164      	movs	r1, #100	@ 0x64
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7ff ffa6 	bl	8006f48 <SPI_EndRxTxTransaction>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b10      	cmp	r3, #16
 800701a:	d112      	bne.n	8007042 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007028:	f043 0202 	orr.w	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007038:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fb32 	bl	80066a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007040:	e020      	b.n	8007084 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007046:	2b00      	cmp	r3, #0
 8007048:	d115      	bne.n	8007076 <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b04      	cmp	r3, #4
 8007054:	d107      	bne.n	8007066 <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fb fcba 	bl	80029d8 <HAL_SPI_RxCpltCallback>
}
 8007064:	e00e      	b.n	8007084 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fb0e 	bl	8006690 <HAL_SPI_TxRxCpltCallback>
}
 8007074:	e006      	b.n	8007084 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff fb10 	bl	80066a4 <HAL_SPI_ErrorCallback>
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070a2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80070a4:	f7fc f9ec 	bl	8003480 <HAL_GetTick>
 80070a8:	4603      	mov	r3, r0
 80070aa:	461a      	mov	r2, r3
 80070ac:	2164      	movs	r1, #100	@ 0x64
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fef2 	bl	8006e98 <SPI_EndRxTransaction>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070be:	f043 0220 	orr.w	r2, r3, #32
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d10e      	bne.n	80070fa <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070e0:	f043 0202 	orr.w	r2, r3, #2
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80070f0:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fad6 	bl	80066a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80070f8:	e00a      	b.n	8007110 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d103      	bne.n	800710a <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fb fc68 	bl	80029d8 <HAL_SPI_RxCpltCallback>
}
 8007108:	e002      	b.n	8007110 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff faca 	bl	80066a4 <HAL_SPI_ErrorCallback>
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007120:	f7fc f9ae 	bl	8003480 <HAL_GetTick>
 8007124:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007134:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	2164      	movs	r1, #100	@ 0x64
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff ff04 	bl	8006f48 <SPI_EndRxTxTransaction>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800714a:	f043 0220 	orr.w	r2, r3, #32
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fa8f 	bl	80066a4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8007186:	e002      	b.n	800718e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fb fc39 	bl	8002a00 <HAL_SPI_TxCpltCallback>
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e040      	b.n	800722a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d106      	bne.n	80071be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f83a 	bl	8007232 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	@ 0x24
 80071c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0201 	bic.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb73 	bl	80078c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8b8 	bl	8007358 <UART_SetConfig>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e01b      	b.n	800722a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007200:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007210:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0201 	orr.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fbf2 	bl	8007a0c <UART_CheckIdleState>
 8007228:	4603      	mov	r3, r0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b08a      	sub	sp, #40	@ 0x28
 800724a:	af02      	add	r7, sp, #8
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	603b      	str	r3, [r7, #0]
 8007252:	4613      	mov	r3, r2
 8007254:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800725a:	2b20      	cmp	r3, #32
 800725c:	d177      	bne.n	800734e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <HAL_UART_Transmit+0x24>
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e070      	b.n	8007350 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2221      	movs	r2, #33	@ 0x21
 800727a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800727c:	f7fc f900 	bl	8003480 <HAL_GetTick>
 8007280:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	88fa      	ldrh	r2, [r7, #6]
 8007286:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	88fa      	ldrh	r2, [r7, #6]
 800728e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729a:	d108      	bne.n	80072ae <HAL_UART_Transmit+0x68>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d104      	bne.n	80072ae <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	61bb      	str	r3, [r7, #24]
 80072ac:	e003      	b.n	80072b6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072b6:	e02f      	b.n	8007318 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	2180      	movs	r1, #128	@ 0x80
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fc4a 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2220      	movs	r2, #32
 80072d2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e03b      	b.n	8007350 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10b      	bne.n	80072f6 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	881a      	ldrh	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ea:	b292      	uxth	r2, r2
 80072ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	3302      	adds	r3, #2
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	e007      	b.n	8007306 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	3301      	adds	r3, #1
 8007304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1c9      	bne.n	80072b8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2200      	movs	r2, #0
 800732c:	2140      	movs	r1, #64	@ 0x40
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 fc14 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e005      	b.n	8007350 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e000      	b.n	8007350 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800734e:	2302      	movs	r3, #2
  }
}
 8007350:	4618      	mov	r0, r3
 8007352:	3720      	adds	r7, #32
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800735c:	b08a      	sub	sp, #40	@ 0x28
 800735e:	af00      	add	r7, sp, #0
 8007360:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	431a      	orrs	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	4313      	orrs	r3, r2
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4ba4      	ldr	r3, [pc, #656]	@ (8007618 <UART_SetConfig+0x2c0>)
 8007388:	4013      	ands	r3, r2
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007390:	430b      	orrs	r3, r1
 8007392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a99      	ldr	r2, [pc, #612]	@ (800761c <UART_SetConfig+0x2c4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c0:	4313      	orrs	r3, r2
 80073c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d4:	430a      	orrs	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a90      	ldr	r2, [pc, #576]	@ (8007620 <UART_SetConfig+0x2c8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d126      	bne.n	8007430 <UART_SetConfig+0xd8>
 80073e2:	4b90      	ldr	r3, [pc, #576]	@ (8007624 <UART_SetConfig+0x2cc>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d81b      	bhi.n	8007428 <UART_SetConfig+0xd0>
 80073f0:	a201      	add	r2, pc, #4	@ (adr r2, 80073f8 <UART_SetConfig+0xa0>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007419 	.word	0x08007419
 8007400:	08007411 	.word	0x08007411
 8007404:	08007421 	.word	0x08007421
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740e:	e116      	b.n	800763e <UART_SetConfig+0x2e6>
 8007410:	2302      	movs	r3, #2
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007416:	e112      	b.n	800763e <UART_SetConfig+0x2e6>
 8007418:	2304      	movs	r3, #4
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800741e:	e10e      	b.n	800763e <UART_SetConfig+0x2e6>
 8007420:	2308      	movs	r3, #8
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007426:	e10a      	b.n	800763e <UART_SetConfig+0x2e6>
 8007428:	2310      	movs	r3, #16
 800742a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800742e:	e106      	b.n	800763e <UART_SetConfig+0x2e6>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a7c      	ldr	r2, [pc, #496]	@ (8007628 <UART_SetConfig+0x2d0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d138      	bne.n	80074ac <UART_SetConfig+0x154>
 800743a:	4b7a      	ldr	r3, [pc, #488]	@ (8007624 <UART_SetConfig+0x2cc>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007440:	f003 030c 	and.w	r3, r3, #12
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d82d      	bhi.n	80074a4 <UART_SetConfig+0x14c>
 8007448:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <UART_SetConfig+0xf8>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007485 	.word	0x08007485
 8007454:	080074a5 	.word	0x080074a5
 8007458:	080074a5 	.word	0x080074a5
 800745c:	080074a5 	.word	0x080074a5
 8007460:	08007495 	.word	0x08007495
 8007464:	080074a5 	.word	0x080074a5
 8007468:	080074a5 	.word	0x080074a5
 800746c:	080074a5 	.word	0x080074a5
 8007470:	0800748d 	.word	0x0800748d
 8007474:	080074a5 	.word	0x080074a5
 8007478:	080074a5 	.word	0x080074a5
 800747c:	080074a5 	.word	0x080074a5
 8007480:	0800749d 	.word	0x0800749d
 8007484:	2300      	movs	r3, #0
 8007486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800748a:	e0d8      	b.n	800763e <UART_SetConfig+0x2e6>
 800748c:	2302      	movs	r3, #2
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007492:	e0d4      	b.n	800763e <UART_SetConfig+0x2e6>
 8007494:	2304      	movs	r3, #4
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800749a:	e0d0      	b.n	800763e <UART_SetConfig+0x2e6>
 800749c:	2308      	movs	r3, #8
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074a2:	e0cc      	b.n	800763e <UART_SetConfig+0x2e6>
 80074a4:	2310      	movs	r3, #16
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074aa:	e0c8      	b.n	800763e <UART_SetConfig+0x2e6>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a5e      	ldr	r2, [pc, #376]	@ (800762c <UART_SetConfig+0x2d4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d125      	bne.n	8007502 <UART_SetConfig+0x1aa>
 80074b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007624 <UART_SetConfig+0x2cc>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80074c0:	2b30      	cmp	r3, #48	@ 0x30
 80074c2:	d016      	beq.n	80074f2 <UART_SetConfig+0x19a>
 80074c4:	2b30      	cmp	r3, #48	@ 0x30
 80074c6:	d818      	bhi.n	80074fa <UART_SetConfig+0x1a2>
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d00a      	beq.n	80074e2 <UART_SetConfig+0x18a>
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d814      	bhi.n	80074fa <UART_SetConfig+0x1a2>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <UART_SetConfig+0x182>
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d008      	beq.n	80074ea <UART_SetConfig+0x192>
 80074d8:	e00f      	b.n	80074fa <UART_SetConfig+0x1a2>
 80074da:	2300      	movs	r3, #0
 80074dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e0:	e0ad      	b.n	800763e <UART_SetConfig+0x2e6>
 80074e2:	2302      	movs	r3, #2
 80074e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074e8:	e0a9      	b.n	800763e <UART_SetConfig+0x2e6>
 80074ea:	2304      	movs	r3, #4
 80074ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f0:	e0a5      	b.n	800763e <UART_SetConfig+0x2e6>
 80074f2:	2308      	movs	r3, #8
 80074f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80074f8:	e0a1      	b.n	800763e <UART_SetConfig+0x2e6>
 80074fa:	2310      	movs	r3, #16
 80074fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007500:	e09d      	b.n	800763e <UART_SetConfig+0x2e6>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a4a      	ldr	r2, [pc, #296]	@ (8007630 <UART_SetConfig+0x2d8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d125      	bne.n	8007558 <UART_SetConfig+0x200>
 800750c:	4b45      	ldr	r3, [pc, #276]	@ (8007624 <UART_SetConfig+0x2cc>)
 800750e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007512:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007516:	2bc0      	cmp	r3, #192	@ 0xc0
 8007518:	d016      	beq.n	8007548 <UART_SetConfig+0x1f0>
 800751a:	2bc0      	cmp	r3, #192	@ 0xc0
 800751c:	d818      	bhi.n	8007550 <UART_SetConfig+0x1f8>
 800751e:	2b80      	cmp	r3, #128	@ 0x80
 8007520:	d00a      	beq.n	8007538 <UART_SetConfig+0x1e0>
 8007522:	2b80      	cmp	r3, #128	@ 0x80
 8007524:	d814      	bhi.n	8007550 <UART_SetConfig+0x1f8>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <UART_SetConfig+0x1d8>
 800752a:	2b40      	cmp	r3, #64	@ 0x40
 800752c:	d008      	beq.n	8007540 <UART_SetConfig+0x1e8>
 800752e:	e00f      	b.n	8007550 <UART_SetConfig+0x1f8>
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007536:	e082      	b.n	800763e <UART_SetConfig+0x2e6>
 8007538:	2302      	movs	r3, #2
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800753e:	e07e      	b.n	800763e <UART_SetConfig+0x2e6>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007546:	e07a      	b.n	800763e <UART_SetConfig+0x2e6>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754e:	e076      	b.n	800763e <UART_SetConfig+0x2e6>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007556:	e072      	b.n	800763e <UART_SetConfig+0x2e6>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a35      	ldr	r2, [pc, #212]	@ (8007634 <UART_SetConfig+0x2dc>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d12a      	bne.n	80075b8 <UART_SetConfig+0x260>
 8007562:	4b30      	ldr	r3, [pc, #192]	@ (8007624 <UART_SetConfig+0x2cc>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007570:	d01a      	beq.n	80075a8 <UART_SetConfig+0x250>
 8007572:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007576:	d81b      	bhi.n	80075b0 <UART_SetConfig+0x258>
 8007578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800757c:	d00c      	beq.n	8007598 <UART_SetConfig+0x240>
 800757e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007582:	d815      	bhi.n	80075b0 <UART_SetConfig+0x258>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <UART_SetConfig+0x238>
 8007588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758c:	d008      	beq.n	80075a0 <UART_SetConfig+0x248>
 800758e:	e00f      	b.n	80075b0 <UART_SetConfig+0x258>
 8007590:	2300      	movs	r3, #0
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007596:	e052      	b.n	800763e <UART_SetConfig+0x2e6>
 8007598:	2302      	movs	r3, #2
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759e:	e04e      	b.n	800763e <UART_SetConfig+0x2e6>
 80075a0:	2304      	movs	r3, #4
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a6:	e04a      	b.n	800763e <UART_SetConfig+0x2e6>
 80075a8:	2308      	movs	r3, #8
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ae:	e046      	b.n	800763e <UART_SetConfig+0x2e6>
 80075b0:	2310      	movs	r3, #16
 80075b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075b6:	e042      	b.n	800763e <UART_SetConfig+0x2e6>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a17      	ldr	r2, [pc, #92]	@ (800761c <UART_SetConfig+0x2c4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d13a      	bne.n	8007638 <UART_SetConfig+0x2e0>
 80075c2:	4b18      	ldr	r3, [pc, #96]	@ (8007624 <UART_SetConfig+0x2cc>)
 80075c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075d0:	d01a      	beq.n	8007608 <UART_SetConfig+0x2b0>
 80075d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075d6:	d81b      	bhi.n	8007610 <UART_SetConfig+0x2b8>
 80075d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075dc:	d00c      	beq.n	80075f8 <UART_SetConfig+0x2a0>
 80075de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075e2:	d815      	bhi.n	8007610 <UART_SetConfig+0x2b8>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <UART_SetConfig+0x298>
 80075e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ec:	d008      	beq.n	8007600 <UART_SetConfig+0x2a8>
 80075ee:	e00f      	b.n	8007610 <UART_SetConfig+0x2b8>
 80075f0:	2300      	movs	r3, #0
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f6:	e022      	b.n	800763e <UART_SetConfig+0x2e6>
 80075f8:	2302      	movs	r3, #2
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fe:	e01e      	b.n	800763e <UART_SetConfig+0x2e6>
 8007600:	2304      	movs	r3, #4
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007606:	e01a      	b.n	800763e <UART_SetConfig+0x2e6>
 8007608:	2308      	movs	r3, #8
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800760e:	e016      	b.n	800763e <UART_SetConfig+0x2e6>
 8007610:	2310      	movs	r3, #16
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007616:	e012      	b.n	800763e <UART_SetConfig+0x2e6>
 8007618:	efff69f3 	.word	0xefff69f3
 800761c:	40008000 	.word	0x40008000
 8007620:	40013800 	.word	0x40013800
 8007624:	40021000 	.word	0x40021000
 8007628:	40004400 	.word	0x40004400
 800762c:	40004800 	.word	0x40004800
 8007630:	40004c00 	.word	0x40004c00
 8007634:	40005000 	.word	0x40005000
 8007638:	2310      	movs	r3, #16
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a9f      	ldr	r2, [pc, #636]	@ (80078c0 <UART_SetConfig+0x568>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d17a      	bne.n	800773e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007648:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800764c:	2b08      	cmp	r3, #8
 800764e:	d824      	bhi.n	800769a <UART_SetConfig+0x342>
 8007650:	a201      	add	r2, pc, #4	@ (adr r2, 8007658 <UART_SetConfig+0x300>)
 8007652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007656:	bf00      	nop
 8007658:	0800767d 	.word	0x0800767d
 800765c:	0800769b 	.word	0x0800769b
 8007660:	08007685 	.word	0x08007685
 8007664:	0800769b 	.word	0x0800769b
 8007668:	0800768b 	.word	0x0800768b
 800766c:	0800769b 	.word	0x0800769b
 8007670:	0800769b 	.word	0x0800769b
 8007674:	0800769b 	.word	0x0800769b
 8007678:	08007693 	.word	0x08007693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800767c:	f7fd fe06 	bl	800528c <HAL_RCC_GetPCLK1Freq>
 8007680:	61f8      	str	r0, [r7, #28]
        break;
 8007682:	e010      	b.n	80076a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007684:	4b8f      	ldr	r3, [pc, #572]	@ (80078c4 <UART_SetConfig+0x56c>)
 8007686:	61fb      	str	r3, [r7, #28]
        break;
 8007688:	e00d      	b.n	80076a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800768a:	f7fd fd67 	bl	800515c <HAL_RCC_GetSysClockFreq>
 800768e:	61f8      	str	r0, [r7, #28]
        break;
 8007690:	e009      	b.n	80076a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007696:	61fb      	str	r3, [r7, #28]
        break;
 8007698:	e005      	b.n	80076a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80fb 	beq.w	80078a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4413      	add	r3, r2
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d305      	bcc.n	80076ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d903      	bls.n	80076d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076d0:	e0e8      	b.n	80078a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2200      	movs	r2, #0
 80076d6:	461c      	mov	r4, r3
 80076d8:	4615      	mov	r5, r2
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	022b      	lsls	r3, r5, #8
 80076e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80076e8:	0222      	lsls	r2, r4, #8
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	6849      	ldr	r1, [r1, #4]
 80076ee:	0849      	lsrs	r1, r1, #1
 80076f0:	2000      	movs	r0, #0
 80076f2:	4688      	mov	r8, r1
 80076f4:	4681      	mov	r9, r0
 80076f6:	eb12 0a08 	adds.w	sl, r2, r8
 80076fa:	eb43 0b09 	adc.w	fp, r3, r9
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800770c:	4650      	mov	r0, sl
 800770e:	4659      	mov	r1, fp
 8007710:	f7f8 fdb6 	bl	8000280 <__aeabi_uldivmod>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4613      	mov	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007722:	d308      	bcc.n	8007736 <UART_SetConfig+0x3de>
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800772a:	d204      	bcs.n	8007736 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	60da      	str	r2, [r3, #12]
 8007734:	e0b6      	b.n	80078a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800773c:	e0b2      	b.n	80078a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007746:	d15e      	bne.n	8007806 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007748:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800774c:	2b08      	cmp	r3, #8
 800774e:	d828      	bhi.n	80077a2 <UART_SetConfig+0x44a>
 8007750:	a201      	add	r2, pc, #4	@ (adr r2, 8007758 <UART_SetConfig+0x400>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	0800777d 	.word	0x0800777d
 800775c:	08007785 	.word	0x08007785
 8007760:	0800778d 	.word	0x0800778d
 8007764:	080077a3 	.word	0x080077a3
 8007768:	08007793 	.word	0x08007793
 800776c:	080077a3 	.word	0x080077a3
 8007770:	080077a3 	.word	0x080077a3
 8007774:	080077a3 	.word	0x080077a3
 8007778:	0800779b 	.word	0x0800779b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800777c:	f7fd fd86 	bl	800528c <HAL_RCC_GetPCLK1Freq>
 8007780:	61f8      	str	r0, [r7, #28]
        break;
 8007782:	e014      	b.n	80077ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007784:	f7fd fd98 	bl	80052b8 <HAL_RCC_GetPCLK2Freq>
 8007788:	61f8      	str	r0, [r7, #28]
        break;
 800778a:	e010      	b.n	80077ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800778c:	4b4d      	ldr	r3, [pc, #308]	@ (80078c4 <UART_SetConfig+0x56c>)
 800778e:	61fb      	str	r3, [r7, #28]
        break;
 8007790:	e00d      	b.n	80077ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007792:	f7fd fce3 	bl	800515c <HAL_RCC_GetSysClockFreq>
 8007796:	61f8      	str	r0, [r7, #28]
        break;
 8007798:	e009      	b.n	80077ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800779a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800779e:	61fb      	str	r3, [r7, #28]
        break;
 80077a0:	e005      	b.n	80077ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d077      	beq.n	80078a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005a      	lsls	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b0f      	cmp	r3, #15
 80077ce:	d916      	bls.n	80077fe <UART_SetConfig+0x4a6>
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d6:	d212      	bcs.n	80077fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f023 030f 	bic.w	r3, r3, #15
 80077e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	8afb      	ldrh	r3, [r7, #22]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	8afa      	ldrh	r2, [r7, #22]
 80077fa:	60da      	str	r2, [r3, #12]
 80077fc:	e052      	b.n	80078a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007804:	e04e      	b.n	80078a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007806:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800780a:	2b08      	cmp	r3, #8
 800780c:	d827      	bhi.n	800785e <UART_SetConfig+0x506>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <UART_SetConfig+0x4bc>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007839 	.word	0x08007839
 8007818:	08007841 	.word	0x08007841
 800781c:	08007849 	.word	0x08007849
 8007820:	0800785f 	.word	0x0800785f
 8007824:	0800784f 	.word	0x0800784f
 8007828:	0800785f 	.word	0x0800785f
 800782c:	0800785f 	.word	0x0800785f
 8007830:	0800785f 	.word	0x0800785f
 8007834:	08007857 	.word	0x08007857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007838:	f7fd fd28 	bl	800528c <HAL_RCC_GetPCLK1Freq>
 800783c:	61f8      	str	r0, [r7, #28]
        break;
 800783e:	e014      	b.n	800786a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007840:	f7fd fd3a 	bl	80052b8 <HAL_RCC_GetPCLK2Freq>
 8007844:	61f8      	str	r0, [r7, #28]
        break;
 8007846:	e010      	b.n	800786a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007848:	4b1e      	ldr	r3, [pc, #120]	@ (80078c4 <UART_SetConfig+0x56c>)
 800784a:	61fb      	str	r3, [r7, #28]
        break;
 800784c:	e00d      	b.n	800786a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784e:	f7fd fc85 	bl	800515c <HAL_RCC_GetSysClockFreq>
 8007852:	61f8      	str	r0, [r7, #28]
        break;
 8007854:	e009      	b.n	800786a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800785a:	61fb      	str	r3, [r7, #28]
        break;
 800785c:	e005      	b.n	800786a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007868:	bf00      	nop
    }

    if (pclk != 0U)
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d019      	beq.n	80078a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	085a      	lsrs	r2, r3, #1
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	441a      	add	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b0f      	cmp	r3, #15
 8007888:	d909      	bls.n	800789e <UART_SetConfig+0x546>
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007890:	d205      	bcs.n	800789e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60da      	str	r2, [r3, #12]
 800789c:	e002      	b.n	80078a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3728      	adds	r7, #40	@ 0x28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	40008000 	.word	0x40008000
 80078c4:	00f42400 	.word	0x00f42400

080078c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00a      	beq.n	80078f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	f003 0304 	and.w	r3, r3, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d01a      	beq.n	80079de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c6:	d10a      	bne.n	80079de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	605a      	str	r2, [r3, #4]
  }
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b098      	sub	sp, #96	@ 0x60
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a1c:	f7fb fd30 	bl	8003480 <HAL_GetTick>
 8007a20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d12e      	bne.n	8007a8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f88c 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d021      	beq.n	8007a8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e6      	bne.n	8007a4a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e062      	b.n	8007b54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b04      	cmp	r3, #4
 8007a9a:	d149      	bne.n	8007b30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f856 	bl	8007b5c <UART_WaitOnFlagUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d03c      	beq.n	8007b30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abe:	e853 3f00 	ldrex	r3, [r3]
 8007ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007adc:	e841 2300 	strex	r3, r2, [r1]
 8007ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1e6      	bne.n	8007ab6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	e853 3f00 	ldrex	r3, [r3]
 8007af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f023 0301 	bic.w	r3, r3, #1
 8007afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b08:	61fa      	str	r2, [r7, #28]
 8007b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	69b9      	ldr	r1, [r7, #24]
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	617b      	str	r3, [r7, #20]
   return(result);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e5      	bne.n	8007ae8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e011      	b.n	8007b54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3758      	adds	r7, #88	@ 0x58
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6c:	e049      	b.n	8007c02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d045      	beq.n	8007c02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b76:	f7fb fc83 	bl	8003480 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d302      	bcc.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e048      	b.n	8007c22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d031      	beq.n	8007c02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	f003 0308 	and.w	r3, r3, #8
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d110      	bne.n	8007bce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 f838 	bl	8007c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e029      	b.n	8007c22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69db      	ldr	r3, [r3, #28]
 8007bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bdc:	d111      	bne.n	8007c02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007be6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 f81e 	bl	8007c2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e00f      	b.n	8007c22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69da      	ldr	r2, [r3, #28]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	bf0c      	ite	eq
 8007c12:	2301      	moveq	r3, #1
 8007c14:	2300      	movne	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d0a6      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b095      	sub	sp, #84	@ 0x54
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e6      	bne.n	8007c32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3308      	adds	r3, #8
 8007c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e5      	bne.n	8007c64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d118      	bne.n	8007cd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	f023 0310 	bic.w	r3, r3, #16
 8007cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cbe:	61bb      	str	r3, [r7, #24]
 8007cc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6979      	ldr	r1, [r7, #20]
 8007cc4:	69ba      	ldr	r2, [r7, #24]
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	613b      	str	r3, [r7, #16]
   return(result);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e6      	bne.n	8007ca0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007ce6:	bf00      	nop
 8007ce8:	3754      	adds	r7, #84	@ 0x54
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <std>:
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8007cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d02:	6083      	str	r3, [r0, #8]
 8007d04:	8181      	strh	r1, [r0, #12]
 8007d06:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d08:	81c2      	strh	r2, [r0, #14]
 8007d0a:	6183      	str	r3, [r0, #24]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	2208      	movs	r2, #8
 8007d10:	305c      	adds	r0, #92	@ 0x5c
 8007d12:	f000 fa29 	bl	8008168 <memset>
 8007d16:	4b0d      	ldr	r3, [pc, #52]	@ (8007d4c <std+0x58>)
 8007d18:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d50 <std+0x5c>)
 8007d1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d54 <std+0x60>)
 8007d20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <std+0x64>)
 8007d24:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d26:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <std+0x68>)
 8007d28:	6224      	str	r4, [r4, #32]
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d006      	beq.n	8007d3c <std+0x48>
 8007d2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d32:	4294      	cmp	r4, r2
 8007d34:	d002      	beq.n	8007d3c <std+0x48>
 8007d36:	33d0      	adds	r3, #208	@ 0xd0
 8007d38:	429c      	cmp	r4, r3
 8007d3a:	d105      	bne.n	8007d48 <std+0x54>
 8007d3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	f000 bb2e 	b.w	80083a4 <__retarget_lock_init_recursive>
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	bf00      	nop
 8007d4c:	08007f99 	.word	0x08007f99
 8007d50:	08007fbb 	.word	0x08007fbb
 8007d54:	08007ff3 	.word	0x08007ff3
 8007d58:	08008017 	.word	0x08008017
 8007d5c:	2000130c 	.word	0x2000130c

08007d60 <stdio_exit_handler>:
 8007d60:	4a02      	ldr	r2, [pc, #8]	@ (8007d6c <stdio_exit_handler+0xc>)
 8007d62:	4903      	ldr	r1, [pc, #12]	@ (8007d70 <stdio_exit_handler+0x10>)
 8007d64:	4803      	ldr	r0, [pc, #12]	@ (8007d74 <stdio_exit_handler+0x14>)
 8007d66:	f000 b869 	b.w	8007e3c <_fwalk_sglue>
 8007d6a:	bf00      	nop
 8007d6c:	2000002c 	.word	0x2000002c
 8007d70:	08008f5d 	.word	0x08008f5d
 8007d74:	2000003c 	.word	0x2000003c

08007d78 <cleanup_stdio>:
 8007d78:	6841      	ldr	r1, [r0, #4]
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <cleanup_stdio+0x34>)
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	4604      	mov	r4, r0
 8007d82:	d001      	beq.n	8007d88 <cleanup_stdio+0x10>
 8007d84:	f001 f8ea 	bl	8008f5c <_fflush_r>
 8007d88:	68a1      	ldr	r1, [r4, #8]
 8007d8a:	4b09      	ldr	r3, [pc, #36]	@ (8007db0 <cleanup_stdio+0x38>)
 8007d8c:	4299      	cmp	r1, r3
 8007d8e:	d002      	beq.n	8007d96 <cleanup_stdio+0x1e>
 8007d90:	4620      	mov	r0, r4
 8007d92:	f001 f8e3 	bl	8008f5c <_fflush_r>
 8007d96:	68e1      	ldr	r1, [r4, #12]
 8007d98:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <cleanup_stdio+0x3c>)
 8007d9a:	4299      	cmp	r1, r3
 8007d9c:	d004      	beq.n	8007da8 <cleanup_stdio+0x30>
 8007d9e:	4620      	mov	r0, r4
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	f001 b8da 	b.w	8008f5c <_fflush_r>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	bf00      	nop
 8007dac:	2000130c 	.word	0x2000130c
 8007db0:	20001374 	.word	0x20001374
 8007db4:	200013dc 	.word	0x200013dc

08007db8 <global_stdio_init.part.0>:
 8007db8:	b510      	push	{r4, lr}
 8007dba:	4b0b      	ldr	r3, [pc, #44]	@ (8007de8 <global_stdio_init.part.0+0x30>)
 8007dbc:	4c0b      	ldr	r4, [pc, #44]	@ (8007dec <global_stdio_init.part.0+0x34>)
 8007dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8007df0 <global_stdio_init.part.0+0x38>)
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	2104      	movs	r1, #4
 8007dc8:	f7ff ff94 	bl	8007cf4 <std>
 8007dcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	2109      	movs	r1, #9
 8007dd4:	f7ff ff8e 	bl	8007cf4 <std>
 8007dd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ddc:	2202      	movs	r2, #2
 8007dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de2:	2112      	movs	r1, #18
 8007de4:	f7ff bf86 	b.w	8007cf4 <std>
 8007de8:	20001444 	.word	0x20001444
 8007dec:	2000130c 	.word	0x2000130c
 8007df0:	08007d61 	.word	0x08007d61

08007df4 <__sfp_lock_acquire>:
 8007df4:	4801      	ldr	r0, [pc, #4]	@ (8007dfc <__sfp_lock_acquire+0x8>)
 8007df6:	f000 bad6 	b.w	80083a6 <__retarget_lock_acquire_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	2000144d 	.word	0x2000144d

08007e00 <__sfp_lock_release>:
 8007e00:	4801      	ldr	r0, [pc, #4]	@ (8007e08 <__sfp_lock_release+0x8>)
 8007e02:	f000 bad1 	b.w	80083a8 <__retarget_lock_release_recursive>
 8007e06:	bf00      	nop
 8007e08:	2000144d 	.word	0x2000144d

08007e0c <__sinit>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	4604      	mov	r4, r0
 8007e10:	f7ff fff0 	bl	8007df4 <__sfp_lock_acquire>
 8007e14:	6a23      	ldr	r3, [r4, #32]
 8007e16:	b11b      	cbz	r3, 8007e20 <__sinit+0x14>
 8007e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e1c:	f7ff bff0 	b.w	8007e00 <__sfp_lock_release>
 8007e20:	4b04      	ldr	r3, [pc, #16]	@ (8007e34 <__sinit+0x28>)
 8007e22:	6223      	str	r3, [r4, #32]
 8007e24:	4b04      	ldr	r3, [pc, #16]	@ (8007e38 <__sinit+0x2c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f5      	bne.n	8007e18 <__sinit+0xc>
 8007e2c:	f7ff ffc4 	bl	8007db8 <global_stdio_init.part.0>
 8007e30:	e7f2      	b.n	8007e18 <__sinit+0xc>
 8007e32:	bf00      	nop
 8007e34:	08007d79 	.word	0x08007d79
 8007e38:	20001444 	.word	0x20001444

08007e3c <_fwalk_sglue>:
 8007e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e40:	4607      	mov	r7, r0
 8007e42:	4688      	mov	r8, r1
 8007e44:	4614      	mov	r4, r2
 8007e46:	2600      	movs	r6, #0
 8007e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8007e50:	d505      	bpl.n	8007e5e <_fwalk_sglue+0x22>
 8007e52:	6824      	ldr	r4, [r4, #0]
 8007e54:	2c00      	cmp	r4, #0
 8007e56:	d1f7      	bne.n	8007e48 <_fwalk_sglue+0xc>
 8007e58:	4630      	mov	r0, r6
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	89ab      	ldrh	r3, [r5, #12]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d907      	bls.n	8007e74 <_fwalk_sglue+0x38>
 8007e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	d003      	beq.n	8007e74 <_fwalk_sglue+0x38>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4638      	mov	r0, r7
 8007e70:	47c0      	blx	r8
 8007e72:	4306      	orrs	r6, r0
 8007e74:	3568      	adds	r5, #104	@ 0x68
 8007e76:	e7e9      	b.n	8007e4c <_fwalk_sglue+0x10>

08007e78 <iprintf>:
 8007e78:	b40f      	push	{r0, r1, r2, r3}
 8007e7a:	b507      	push	{r0, r1, r2, lr}
 8007e7c:	4906      	ldr	r1, [pc, #24]	@ (8007e98 <iprintf+0x20>)
 8007e7e:	ab04      	add	r3, sp, #16
 8007e80:	6808      	ldr	r0, [r1, #0]
 8007e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e86:	6881      	ldr	r1, [r0, #8]
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	f000 fd3d 	bl	8008908 <_vfiprintf_r>
 8007e8e:	b003      	add	sp, #12
 8007e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e94:	b004      	add	sp, #16
 8007e96:	4770      	bx	lr
 8007e98:	20000038 	.word	0x20000038

08007e9c <_puts_r>:
 8007e9c:	6a03      	ldr	r3, [r0, #32]
 8007e9e:	b570      	push	{r4, r5, r6, lr}
 8007ea0:	6884      	ldr	r4, [r0, #8]
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	460e      	mov	r6, r1
 8007ea6:	b90b      	cbnz	r3, 8007eac <_puts_r+0x10>
 8007ea8:	f7ff ffb0 	bl	8007e0c <__sinit>
 8007eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eae:	07db      	lsls	r3, r3, #31
 8007eb0:	d405      	bmi.n	8007ebe <_puts_r+0x22>
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	0598      	lsls	r0, r3, #22
 8007eb6:	d402      	bmi.n	8007ebe <_puts_r+0x22>
 8007eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eba:	f000 fa74 	bl	80083a6 <__retarget_lock_acquire_recursive>
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	0719      	lsls	r1, r3, #28
 8007ec2:	d502      	bpl.n	8007eca <_puts_r+0x2e>
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d135      	bne.n	8007f36 <_puts_r+0x9a>
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 f8e5 	bl	800809c <__swsetup_r>
 8007ed2:	b380      	cbz	r0, 8007f36 <_puts_r+0x9a>
 8007ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eda:	07da      	lsls	r2, r3, #31
 8007edc:	d405      	bmi.n	8007eea <_puts_r+0x4e>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	059b      	lsls	r3, r3, #22
 8007ee2:	d402      	bmi.n	8007eea <_puts_r+0x4e>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ee6:	f000 fa5f 	bl	80083a8 <__retarget_lock_release_recursive>
 8007eea:	4628      	mov	r0, r5
 8007eec:	bd70      	pop	{r4, r5, r6, pc}
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da04      	bge.n	8007efc <_puts_r+0x60>
 8007ef2:	69a2      	ldr	r2, [r4, #24]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	dc17      	bgt.n	8007f28 <_puts_r+0x8c>
 8007ef8:	290a      	cmp	r1, #10
 8007efa:	d015      	beq.n	8007f28 <_puts_r+0x8c>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	6022      	str	r2, [r4, #0]
 8007f02:	7019      	strb	r1, [r3, #0]
 8007f04:	68a3      	ldr	r3, [r4, #8]
 8007f06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	60a3      	str	r3, [r4, #8]
 8007f0e:	2900      	cmp	r1, #0
 8007f10:	d1ed      	bne.n	8007eee <_puts_r+0x52>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da11      	bge.n	8007f3a <_puts_r+0x9e>
 8007f16:	4622      	mov	r2, r4
 8007f18:	210a      	movs	r1, #10
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 f87f 	bl	800801e <__swbuf_r>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d0d7      	beq.n	8007ed4 <_puts_r+0x38>
 8007f24:	250a      	movs	r5, #10
 8007f26:	e7d7      	b.n	8007ed8 <_puts_r+0x3c>
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 f877 	bl	800801e <__swbuf_r>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d1e7      	bne.n	8007f04 <_puts_r+0x68>
 8007f34:	e7ce      	b.n	8007ed4 <_puts_r+0x38>
 8007f36:	3e01      	subs	r6, #1
 8007f38:	e7e4      	b.n	8007f04 <_puts_r+0x68>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	6022      	str	r2, [r4, #0]
 8007f40:	220a      	movs	r2, #10
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e7ee      	b.n	8007f24 <_puts_r+0x88>
	...

08007f48 <puts>:
 8007f48:	4b02      	ldr	r3, [pc, #8]	@ (8007f54 <puts+0xc>)
 8007f4a:	4601      	mov	r1, r0
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	f7ff bfa5 	b.w	8007e9c <_puts_r>
 8007f52:	bf00      	nop
 8007f54:	20000038 	.word	0x20000038

08007f58 <siprintf>:
 8007f58:	b40e      	push	{r1, r2, r3}
 8007f5a:	b500      	push	{lr}
 8007f5c:	b09c      	sub	sp, #112	@ 0x70
 8007f5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f60:	9002      	str	r0, [sp, #8]
 8007f62:	9006      	str	r0, [sp, #24]
 8007f64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f68:	4809      	ldr	r0, [pc, #36]	@ (8007f90 <siprintf+0x38>)
 8007f6a:	9107      	str	r1, [sp, #28]
 8007f6c:	9104      	str	r1, [sp, #16]
 8007f6e:	4909      	ldr	r1, [pc, #36]	@ (8007f94 <siprintf+0x3c>)
 8007f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f74:	9105      	str	r1, [sp, #20]
 8007f76:	6800      	ldr	r0, [r0, #0]
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	a902      	add	r1, sp, #8
 8007f7c:	f000 fb9e 	bl	80086bc <_svfiprintf_r>
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	b01c      	add	sp, #112	@ 0x70
 8007f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f8c:	b003      	add	sp, #12
 8007f8e:	4770      	bx	lr
 8007f90:	20000038 	.word	0x20000038
 8007f94:	ffff0208 	.word	0xffff0208

08007f98 <__sread>:
 8007f98:	b510      	push	{r4, lr}
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa0:	f000 f9b2 	bl	8008308 <_read_r>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	bfab      	itete	ge
 8007fa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007faa:	89a3      	ldrhlt	r3, [r4, #12]
 8007fac:	181b      	addge	r3, r3, r0
 8007fae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007fb2:	bfac      	ite	ge
 8007fb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007fb6:	81a3      	strhlt	r3, [r4, #12]
 8007fb8:	bd10      	pop	{r4, pc}

08007fba <__swrite>:
 8007fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbe:	461f      	mov	r7, r3
 8007fc0:	898b      	ldrh	r3, [r1, #12]
 8007fc2:	05db      	lsls	r3, r3, #23
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	4616      	mov	r6, r2
 8007fca:	d505      	bpl.n	8007fd8 <__swrite+0x1e>
 8007fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f000 f986 	bl	80082e4 <_lseek_r>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	4628      	mov	r0, r5
 8007fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fee:	f000 b99d 	b.w	800832c <_write_r>

08007ff2 <__sseek>:
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffa:	f000 f973 	bl	80082e4 <_lseek_r>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	bf15      	itete	ne
 8008004:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008006:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800800a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800800e:	81a3      	strheq	r3, [r4, #12]
 8008010:	bf18      	it	ne
 8008012:	81a3      	strhne	r3, [r4, #12]
 8008014:	bd10      	pop	{r4, pc}

08008016 <__sclose>:
 8008016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801a:	f000 b953 	b.w	80082c4 <_close_r>

0800801e <__swbuf_r>:
 800801e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008020:	460e      	mov	r6, r1
 8008022:	4614      	mov	r4, r2
 8008024:	4605      	mov	r5, r0
 8008026:	b118      	cbz	r0, 8008030 <__swbuf_r+0x12>
 8008028:	6a03      	ldr	r3, [r0, #32]
 800802a:	b90b      	cbnz	r3, 8008030 <__swbuf_r+0x12>
 800802c:	f7ff feee 	bl	8007e0c <__sinit>
 8008030:	69a3      	ldr	r3, [r4, #24]
 8008032:	60a3      	str	r3, [r4, #8]
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	071a      	lsls	r2, r3, #28
 8008038:	d501      	bpl.n	800803e <__swbuf_r+0x20>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	b943      	cbnz	r3, 8008050 <__swbuf_r+0x32>
 800803e:	4621      	mov	r1, r4
 8008040:	4628      	mov	r0, r5
 8008042:	f000 f82b 	bl	800809c <__swsetup_r>
 8008046:	b118      	cbz	r0, 8008050 <__swbuf_r+0x32>
 8008048:	f04f 37ff 	mov.w	r7, #4294967295
 800804c:	4638      	mov	r0, r7
 800804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	6922      	ldr	r2, [r4, #16]
 8008054:	1a98      	subs	r0, r3, r2
 8008056:	6963      	ldr	r3, [r4, #20]
 8008058:	b2f6      	uxtb	r6, r6
 800805a:	4283      	cmp	r3, r0
 800805c:	4637      	mov	r7, r6
 800805e:	dc05      	bgt.n	800806c <__swbuf_r+0x4e>
 8008060:	4621      	mov	r1, r4
 8008062:	4628      	mov	r0, r5
 8008064:	f000 ff7a 	bl	8008f5c <_fflush_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	d1ed      	bne.n	8008048 <__swbuf_r+0x2a>
 800806c:	68a3      	ldr	r3, [r4, #8]
 800806e:	3b01      	subs	r3, #1
 8008070:	60a3      	str	r3, [r4, #8]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	6022      	str	r2, [r4, #0]
 8008078:	701e      	strb	r6, [r3, #0]
 800807a:	6962      	ldr	r2, [r4, #20]
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	429a      	cmp	r2, r3
 8008080:	d004      	beq.n	800808c <__swbuf_r+0x6e>
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	07db      	lsls	r3, r3, #31
 8008086:	d5e1      	bpl.n	800804c <__swbuf_r+0x2e>
 8008088:	2e0a      	cmp	r6, #10
 800808a:	d1df      	bne.n	800804c <__swbuf_r+0x2e>
 800808c:	4621      	mov	r1, r4
 800808e:	4628      	mov	r0, r5
 8008090:	f000 ff64 	bl	8008f5c <_fflush_r>
 8008094:	2800      	cmp	r0, #0
 8008096:	d0d9      	beq.n	800804c <__swbuf_r+0x2e>
 8008098:	e7d6      	b.n	8008048 <__swbuf_r+0x2a>
	...

0800809c <__swsetup_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4b29      	ldr	r3, [pc, #164]	@ (8008144 <__swsetup_r+0xa8>)
 80080a0:	4605      	mov	r5, r0
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	460c      	mov	r4, r1
 80080a6:	b118      	cbz	r0, 80080b0 <__swsetup_r+0x14>
 80080a8:	6a03      	ldr	r3, [r0, #32]
 80080aa:	b90b      	cbnz	r3, 80080b0 <__swsetup_r+0x14>
 80080ac:	f7ff feae 	bl	8007e0c <__sinit>
 80080b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b4:	0719      	lsls	r1, r3, #28
 80080b6:	d422      	bmi.n	80080fe <__swsetup_r+0x62>
 80080b8:	06da      	lsls	r2, r3, #27
 80080ba:	d407      	bmi.n	80080cc <__swsetup_r+0x30>
 80080bc:	2209      	movs	r2, #9
 80080be:	602a      	str	r2, [r5, #0]
 80080c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ca:	e033      	b.n	8008134 <__swsetup_r+0x98>
 80080cc:	0758      	lsls	r0, r3, #29
 80080ce:	d512      	bpl.n	80080f6 <__swsetup_r+0x5a>
 80080d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080d2:	b141      	cbz	r1, 80080e6 <__swsetup_r+0x4a>
 80080d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080d8:	4299      	cmp	r1, r3
 80080da:	d002      	beq.n	80080e2 <__swsetup_r+0x46>
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 f991 	bl	8008404 <_free_r>
 80080e2:	2300      	movs	r3, #0
 80080e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6063      	str	r3, [r4, #4]
 80080f2:	6923      	ldr	r3, [r4, #16]
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f043 0308 	orr.w	r3, r3, #8
 80080fc:	81a3      	strh	r3, [r4, #12]
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	b94b      	cbnz	r3, 8008116 <__swsetup_r+0x7a>
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800810c:	d003      	beq.n	8008116 <__swsetup_r+0x7a>
 800810e:	4621      	mov	r1, r4
 8008110:	4628      	mov	r0, r5
 8008112:	f000 ff83 	bl	800901c <__smakebuf_r>
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	f013 0201 	ands.w	r2, r3, #1
 800811e:	d00a      	beq.n	8008136 <__swsetup_r+0x9a>
 8008120:	2200      	movs	r2, #0
 8008122:	60a2      	str	r2, [r4, #8]
 8008124:	6962      	ldr	r2, [r4, #20]
 8008126:	4252      	negs	r2, r2
 8008128:	61a2      	str	r2, [r4, #24]
 800812a:	6922      	ldr	r2, [r4, #16]
 800812c:	b942      	cbnz	r2, 8008140 <__swsetup_r+0xa4>
 800812e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008132:	d1c5      	bne.n	80080c0 <__swsetup_r+0x24>
 8008134:	bd38      	pop	{r3, r4, r5, pc}
 8008136:	0799      	lsls	r1, r3, #30
 8008138:	bf58      	it	pl
 800813a:	6962      	ldrpl	r2, [r4, #20]
 800813c:	60a2      	str	r2, [r4, #8]
 800813e:	e7f4      	b.n	800812a <__swsetup_r+0x8e>
 8008140:	2000      	movs	r0, #0
 8008142:	e7f7      	b.n	8008134 <__swsetup_r+0x98>
 8008144:	20000038 	.word	0x20000038

08008148 <memcmp>:
 8008148:	b510      	push	{r4, lr}
 800814a:	3901      	subs	r1, #1
 800814c:	4402      	add	r2, r0
 800814e:	4290      	cmp	r0, r2
 8008150:	d101      	bne.n	8008156 <memcmp+0xe>
 8008152:	2000      	movs	r0, #0
 8008154:	e005      	b.n	8008162 <memcmp+0x1a>
 8008156:	7803      	ldrb	r3, [r0, #0]
 8008158:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800815c:	42a3      	cmp	r3, r4
 800815e:	d001      	beq.n	8008164 <memcmp+0x1c>
 8008160:	1b18      	subs	r0, r3, r4
 8008162:	bd10      	pop	{r4, pc}
 8008164:	3001      	adds	r0, #1
 8008166:	e7f2      	b.n	800814e <memcmp+0x6>

08008168 <memset>:
 8008168:	4402      	add	r2, r0
 800816a:	4603      	mov	r3, r0
 800816c:	4293      	cmp	r3, r2
 800816e:	d100      	bne.n	8008172 <memset+0xa>
 8008170:	4770      	bx	lr
 8008172:	f803 1b01 	strb.w	r1, [r3], #1
 8008176:	e7f9      	b.n	800816c <memset+0x4>

08008178 <strcat>:
 8008178:	b510      	push	{r4, lr}
 800817a:	4602      	mov	r2, r0
 800817c:	7814      	ldrb	r4, [r2, #0]
 800817e:	4613      	mov	r3, r2
 8008180:	3201      	adds	r2, #1
 8008182:	2c00      	cmp	r4, #0
 8008184:	d1fa      	bne.n	800817c <strcat+0x4>
 8008186:	3b01      	subs	r3, #1
 8008188:	f811 2b01 	ldrb.w	r2, [r1], #1
 800818c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008190:	2a00      	cmp	r2, #0
 8008192:	d1f9      	bne.n	8008188 <strcat+0x10>
 8008194:	bd10      	pop	{r4, pc}

08008196 <strncmp>:
 8008196:	b510      	push	{r4, lr}
 8008198:	b16a      	cbz	r2, 80081b6 <strncmp+0x20>
 800819a:	3901      	subs	r1, #1
 800819c:	1884      	adds	r4, r0, r2
 800819e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d103      	bne.n	80081b2 <strncmp+0x1c>
 80081aa:	42a0      	cmp	r0, r4
 80081ac:	d001      	beq.n	80081b2 <strncmp+0x1c>
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	d1f5      	bne.n	800819e <strncmp+0x8>
 80081b2:	1ad0      	subs	r0, r2, r3
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	4610      	mov	r0, r2
 80081b8:	e7fc      	b.n	80081b4 <strncmp+0x1e>

080081ba <strncpy>:
 80081ba:	b510      	push	{r4, lr}
 80081bc:	3901      	subs	r1, #1
 80081be:	4603      	mov	r3, r0
 80081c0:	b132      	cbz	r2, 80081d0 <strncpy+0x16>
 80081c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081c6:	f803 4b01 	strb.w	r4, [r3], #1
 80081ca:	3a01      	subs	r2, #1
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	d1f7      	bne.n	80081c0 <strncpy+0x6>
 80081d0:	441a      	add	r2, r3
 80081d2:	2100      	movs	r1, #0
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d100      	bne.n	80081da <strncpy+0x20>
 80081d8:	bd10      	pop	{r4, pc}
 80081da:	f803 1b01 	strb.w	r1, [r3], #1
 80081de:	e7f9      	b.n	80081d4 <strncpy+0x1a>

080081e0 <strtok>:
 80081e0:	4b16      	ldr	r3, [pc, #88]	@ (800823c <strtok+0x5c>)
 80081e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e6:	681f      	ldr	r7, [r3, #0]
 80081e8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80081ea:	4605      	mov	r5, r0
 80081ec:	460e      	mov	r6, r1
 80081ee:	b9ec      	cbnz	r4, 800822c <strtok+0x4c>
 80081f0:	2050      	movs	r0, #80	@ 0x50
 80081f2:	f000 f951 	bl	8008498 <malloc>
 80081f6:	4602      	mov	r2, r0
 80081f8:	6478      	str	r0, [r7, #68]	@ 0x44
 80081fa:	b920      	cbnz	r0, 8008206 <strtok+0x26>
 80081fc:	4b10      	ldr	r3, [pc, #64]	@ (8008240 <strtok+0x60>)
 80081fe:	4811      	ldr	r0, [pc, #68]	@ (8008244 <strtok+0x64>)
 8008200:	215b      	movs	r1, #91	@ 0x5b
 8008202:	f000 f8e1 	bl	80083c8 <__assert_func>
 8008206:	e9c0 4400 	strd	r4, r4, [r0]
 800820a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800820e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008212:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008216:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800821a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800821e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008222:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008226:	6184      	str	r4, [r0, #24]
 8008228:	7704      	strb	r4, [r0, #28]
 800822a:	6244      	str	r4, [r0, #36]	@ 0x24
 800822c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	2301      	movs	r3, #1
 8008234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008238:	f000 b806 	b.w	8008248 <__strtok_r>
 800823c:	20000038 	.word	0x20000038
 8008240:	08009da4 	.word	0x08009da4
 8008244:	08009dbb 	.word	0x08009dbb

08008248 <__strtok_r>:
 8008248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800824a:	4604      	mov	r4, r0
 800824c:	b908      	cbnz	r0, 8008252 <__strtok_r+0xa>
 800824e:	6814      	ldr	r4, [r2, #0]
 8008250:	b144      	cbz	r4, 8008264 <__strtok_r+0x1c>
 8008252:	4620      	mov	r0, r4
 8008254:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008258:	460f      	mov	r7, r1
 800825a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800825e:	b91e      	cbnz	r6, 8008268 <__strtok_r+0x20>
 8008260:	b965      	cbnz	r5, 800827c <__strtok_r+0x34>
 8008262:	6015      	str	r5, [r2, #0]
 8008264:	2000      	movs	r0, #0
 8008266:	e005      	b.n	8008274 <__strtok_r+0x2c>
 8008268:	42b5      	cmp	r5, r6
 800826a:	d1f6      	bne.n	800825a <__strtok_r+0x12>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f0      	bne.n	8008252 <__strtok_r+0xa>
 8008270:	6014      	str	r4, [r2, #0]
 8008272:	7003      	strb	r3, [r0, #0]
 8008274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008276:	461c      	mov	r4, r3
 8008278:	e00c      	b.n	8008294 <__strtok_r+0x4c>
 800827a:	b915      	cbnz	r5, 8008282 <__strtok_r+0x3a>
 800827c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008280:	460e      	mov	r6, r1
 8008282:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008286:	42ab      	cmp	r3, r5
 8008288:	d1f7      	bne.n	800827a <__strtok_r+0x32>
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0f3      	beq.n	8008276 <__strtok_r+0x2e>
 800828e:	2300      	movs	r3, #0
 8008290:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008294:	6014      	str	r4, [r2, #0]
 8008296:	e7ed      	b.n	8008274 <__strtok_r+0x2c>

08008298 <strstr>:
 8008298:	780a      	ldrb	r2, [r1, #0]
 800829a:	b570      	push	{r4, r5, r6, lr}
 800829c:	b96a      	cbnz	r2, 80082ba <strstr+0x22>
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d109      	bne.n	80082b8 <strstr+0x20>
 80082a4:	460c      	mov	r4, r1
 80082a6:	4605      	mov	r5, r0
 80082a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0f6      	beq.n	800829e <strstr+0x6>
 80082b0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80082b4:	429e      	cmp	r6, r3
 80082b6:	d0f7      	beq.n	80082a8 <strstr+0x10>
 80082b8:	3001      	adds	r0, #1
 80082ba:	7803      	ldrb	r3, [r0, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1ef      	bne.n	80082a0 <strstr+0x8>
 80082c0:	4618      	mov	r0, r3
 80082c2:	e7ec      	b.n	800829e <strstr+0x6>

080082c4 <_close_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d06      	ldr	r5, [pc, #24]	@ (80082e0 <_close_r+0x1c>)
 80082c8:	2300      	movs	r3, #0
 80082ca:	4604      	mov	r4, r0
 80082cc:	4608      	mov	r0, r1
 80082ce:	602b      	str	r3, [r5, #0]
 80082d0:	f7f8 fe3f 	bl	8000f52 <_close>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d102      	bne.n	80082de <_close_r+0x1a>
 80082d8:	682b      	ldr	r3, [r5, #0]
 80082da:	b103      	cbz	r3, 80082de <_close_r+0x1a>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	bd38      	pop	{r3, r4, r5, pc}
 80082e0:	20001448 	.word	0x20001448

080082e4 <_lseek_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d07      	ldr	r5, [pc, #28]	@ (8008304 <_lseek_r+0x20>)
 80082e8:	4604      	mov	r4, r0
 80082ea:	4608      	mov	r0, r1
 80082ec:	4611      	mov	r1, r2
 80082ee:	2200      	movs	r2, #0
 80082f0:	602a      	str	r2, [r5, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	f7f8 fe54 	bl	8000fa0 <_lseek>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_lseek_r+0x1e>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_lseek_r+0x1e>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	20001448 	.word	0x20001448

08008308 <_read_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	@ (8008328 <_read_r+0x20>)
 800830c:	4604      	mov	r4, r0
 800830e:	4608      	mov	r0, r1
 8008310:	4611      	mov	r1, r2
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7f8 fde2 	bl	8000ee0 <_read>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_read_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_read_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20001448 	.word	0x20001448

0800832c <_write_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	@ (800834c <_write_r+0x20>)
 8008330:	4604      	mov	r4, r0
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7f8 fded 	bl	8000f1a <_write>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_write_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_write_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20001448 	.word	0x20001448

08008350 <__errno>:
 8008350:	4b01      	ldr	r3, [pc, #4]	@ (8008358 <__errno+0x8>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	20000038 	.word	0x20000038

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	4d0d      	ldr	r5, [pc, #52]	@ (8008394 <__libc_init_array+0x38>)
 8008360:	4c0d      	ldr	r4, [pc, #52]	@ (8008398 <__libc_init_array+0x3c>)
 8008362:	1b64      	subs	r4, r4, r5
 8008364:	10a4      	asrs	r4, r4, #2
 8008366:	2600      	movs	r6, #0
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	4d0b      	ldr	r5, [pc, #44]	@ (800839c <__libc_init_array+0x40>)
 800836e:	4c0c      	ldr	r4, [pc, #48]	@ (80083a0 <__libc_init_array+0x44>)
 8008370:	f000 ff5e 	bl	8009230 <_init>
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	2600      	movs	r6, #0
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	f855 3b04 	ldr.w	r3, [r5], #4
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	f855 3b04 	ldr.w	r3, [r5], #4
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	08009e8c 	.word	0x08009e8c
 8008398:	08009e8c 	.word	0x08009e8c
 800839c:	08009e8c 	.word	0x08009e8c
 80083a0:	08009e90 	.word	0x08009e90

080083a4 <__retarget_lock_init_recursive>:
 80083a4:	4770      	bx	lr

080083a6 <__retarget_lock_acquire_recursive>:
 80083a6:	4770      	bx	lr

080083a8 <__retarget_lock_release_recursive>:
 80083a8:	4770      	bx	lr

080083aa <memcpy>:
 80083aa:	440a      	add	r2, r1
 80083ac:	4291      	cmp	r1, r2
 80083ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80083b2:	d100      	bne.n	80083b6 <memcpy+0xc>
 80083b4:	4770      	bx	lr
 80083b6:	b510      	push	{r4, lr}
 80083b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c0:	4291      	cmp	r1, r2
 80083c2:	d1f9      	bne.n	80083b8 <memcpy+0xe>
 80083c4:	bd10      	pop	{r4, pc}
	...

080083c8 <__assert_func>:
 80083c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ca:	4614      	mov	r4, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4b09      	ldr	r3, [pc, #36]	@ (80083f4 <__assert_func+0x2c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4605      	mov	r5, r0
 80083d4:	68d8      	ldr	r0, [r3, #12]
 80083d6:	b954      	cbnz	r4, 80083ee <__assert_func+0x26>
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <__assert_func+0x30>)
 80083da:	461c      	mov	r4, r3
 80083dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083e0:	9100      	str	r1, [sp, #0]
 80083e2:	462b      	mov	r3, r5
 80083e4:	4905      	ldr	r1, [pc, #20]	@ (80083fc <__assert_func+0x34>)
 80083e6:	f000 fde1 	bl	8008fac <fiprintf>
 80083ea:	f000 fe9f 	bl	800912c <abort>
 80083ee:	4b04      	ldr	r3, [pc, #16]	@ (8008400 <__assert_func+0x38>)
 80083f0:	e7f4      	b.n	80083dc <__assert_func+0x14>
 80083f2:	bf00      	nop
 80083f4:	20000038 	.word	0x20000038
 80083f8:	08009e50 	.word	0x08009e50
 80083fc:	08009e22 	.word	0x08009e22
 8008400:	08009e15 	.word	0x08009e15

08008404 <_free_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4605      	mov	r5, r0
 8008408:	2900      	cmp	r1, #0
 800840a:	d041      	beq.n	8008490 <_free_r+0x8c>
 800840c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008410:	1f0c      	subs	r4, r1, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	bfb8      	it	lt
 8008416:	18e4      	addlt	r4, r4, r3
 8008418:	f000 f8e8 	bl	80085ec <__malloc_lock>
 800841c:	4a1d      	ldr	r2, [pc, #116]	@ (8008494 <_free_r+0x90>)
 800841e:	6813      	ldr	r3, [r2, #0]
 8008420:	b933      	cbnz	r3, 8008430 <_free_r+0x2c>
 8008422:	6063      	str	r3, [r4, #4]
 8008424:	6014      	str	r4, [r2, #0]
 8008426:	4628      	mov	r0, r5
 8008428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800842c:	f000 b8e4 	b.w	80085f8 <__malloc_unlock>
 8008430:	42a3      	cmp	r3, r4
 8008432:	d908      	bls.n	8008446 <_free_r+0x42>
 8008434:	6820      	ldr	r0, [r4, #0]
 8008436:	1821      	adds	r1, r4, r0
 8008438:	428b      	cmp	r3, r1
 800843a:	bf01      	itttt	eq
 800843c:	6819      	ldreq	r1, [r3, #0]
 800843e:	685b      	ldreq	r3, [r3, #4]
 8008440:	1809      	addeq	r1, r1, r0
 8008442:	6021      	streq	r1, [r4, #0]
 8008444:	e7ed      	b.n	8008422 <_free_r+0x1e>
 8008446:	461a      	mov	r2, r3
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	b10b      	cbz	r3, 8008450 <_free_r+0x4c>
 800844c:	42a3      	cmp	r3, r4
 800844e:	d9fa      	bls.n	8008446 <_free_r+0x42>
 8008450:	6811      	ldr	r1, [r2, #0]
 8008452:	1850      	adds	r0, r2, r1
 8008454:	42a0      	cmp	r0, r4
 8008456:	d10b      	bne.n	8008470 <_free_r+0x6c>
 8008458:	6820      	ldr	r0, [r4, #0]
 800845a:	4401      	add	r1, r0
 800845c:	1850      	adds	r0, r2, r1
 800845e:	4283      	cmp	r3, r0
 8008460:	6011      	str	r1, [r2, #0]
 8008462:	d1e0      	bne.n	8008426 <_free_r+0x22>
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	6053      	str	r3, [r2, #4]
 800846a:	4408      	add	r0, r1
 800846c:	6010      	str	r0, [r2, #0]
 800846e:	e7da      	b.n	8008426 <_free_r+0x22>
 8008470:	d902      	bls.n	8008478 <_free_r+0x74>
 8008472:	230c      	movs	r3, #12
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	e7d6      	b.n	8008426 <_free_r+0x22>
 8008478:	6820      	ldr	r0, [r4, #0]
 800847a:	1821      	adds	r1, r4, r0
 800847c:	428b      	cmp	r3, r1
 800847e:	bf04      	itt	eq
 8008480:	6819      	ldreq	r1, [r3, #0]
 8008482:	685b      	ldreq	r3, [r3, #4]
 8008484:	6063      	str	r3, [r4, #4]
 8008486:	bf04      	itt	eq
 8008488:	1809      	addeq	r1, r1, r0
 800848a:	6021      	streq	r1, [r4, #0]
 800848c:	6054      	str	r4, [r2, #4]
 800848e:	e7ca      	b.n	8008426 <_free_r+0x22>
 8008490:	bd38      	pop	{r3, r4, r5, pc}
 8008492:	bf00      	nop
 8008494:	20001454 	.word	0x20001454

08008498 <malloc>:
 8008498:	4b02      	ldr	r3, [pc, #8]	@ (80084a4 <malloc+0xc>)
 800849a:	4601      	mov	r1, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f000 b825 	b.w	80084ec <_malloc_r>
 80084a2:	bf00      	nop
 80084a4:	20000038 	.word	0x20000038

080084a8 <sbrk_aligned>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	4e0f      	ldr	r6, [pc, #60]	@ (80084e8 <sbrk_aligned+0x40>)
 80084ac:	460c      	mov	r4, r1
 80084ae:	6831      	ldr	r1, [r6, #0]
 80084b0:	4605      	mov	r5, r0
 80084b2:	b911      	cbnz	r1, 80084ba <sbrk_aligned+0x12>
 80084b4:	f000 fe2a 	bl	800910c <_sbrk_r>
 80084b8:	6030      	str	r0, [r6, #0]
 80084ba:	4621      	mov	r1, r4
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 fe25 	bl	800910c <_sbrk_r>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d103      	bne.n	80084ce <sbrk_aligned+0x26>
 80084c6:	f04f 34ff 	mov.w	r4, #4294967295
 80084ca:	4620      	mov	r0, r4
 80084cc:	bd70      	pop	{r4, r5, r6, pc}
 80084ce:	1cc4      	adds	r4, r0, #3
 80084d0:	f024 0403 	bic.w	r4, r4, #3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d0f8      	beq.n	80084ca <sbrk_aligned+0x22>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	4628      	mov	r0, r5
 80084dc:	f000 fe16 	bl	800910c <_sbrk_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1f2      	bne.n	80084ca <sbrk_aligned+0x22>
 80084e4:	e7ef      	b.n	80084c6 <sbrk_aligned+0x1e>
 80084e6:	bf00      	nop
 80084e8:	20001450 	.word	0x20001450

080084ec <_malloc_r>:
 80084ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	1ccd      	adds	r5, r1, #3
 80084f2:	f025 0503 	bic.w	r5, r5, #3
 80084f6:	3508      	adds	r5, #8
 80084f8:	2d0c      	cmp	r5, #12
 80084fa:	bf38      	it	cc
 80084fc:	250c      	movcc	r5, #12
 80084fe:	2d00      	cmp	r5, #0
 8008500:	4606      	mov	r6, r0
 8008502:	db01      	blt.n	8008508 <_malloc_r+0x1c>
 8008504:	42a9      	cmp	r1, r5
 8008506:	d904      	bls.n	8008512 <_malloc_r+0x26>
 8008508:	230c      	movs	r3, #12
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	2000      	movs	r0, #0
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085e8 <_malloc_r+0xfc>
 8008516:	f000 f869 	bl	80085ec <__malloc_lock>
 800851a:	f8d8 3000 	ldr.w	r3, [r8]
 800851e:	461c      	mov	r4, r3
 8008520:	bb44      	cbnz	r4, 8008574 <_malloc_r+0x88>
 8008522:	4629      	mov	r1, r5
 8008524:	4630      	mov	r0, r6
 8008526:	f7ff ffbf 	bl	80084a8 <sbrk_aligned>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	4604      	mov	r4, r0
 800852e:	d158      	bne.n	80085e2 <_malloc_r+0xf6>
 8008530:	f8d8 4000 	ldr.w	r4, [r8]
 8008534:	4627      	mov	r7, r4
 8008536:	2f00      	cmp	r7, #0
 8008538:	d143      	bne.n	80085c2 <_malloc_r+0xd6>
 800853a:	2c00      	cmp	r4, #0
 800853c:	d04b      	beq.n	80085d6 <_malloc_r+0xea>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	4639      	mov	r1, r7
 8008542:	4630      	mov	r0, r6
 8008544:	eb04 0903 	add.w	r9, r4, r3
 8008548:	f000 fde0 	bl	800910c <_sbrk_r>
 800854c:	4581      	cmp	r9, r0
 800854e:	d142      	bne.n	80085d6 <_malloc_r+0xea>
 8008550:	6821      	ldr	r1, [r4, #0]
 8008552:	1a6d      	subs	r5, r5, r1
 8008554:	4629      	mov	r1, r5
 8008556:	4630      	mov	r0, r6
 8008558:	f7ff ffa6 	bl	80084a8 <sbrk_aligned>
 800855c:	3001      	adds	r0, #1
 800855e:	d03a      	beq.n	80085d6 <_malloc_r+0xea>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	442b      	add	r3, r5
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	f8d8 3000 	ldr.w	r3, [r8]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	bb62      	cbnz	r2, 80085c8 <_malloc_r+0xdc>
 800856e:	f8c8 7000 	str.w	r7, [r8]
 8008572:	e00f      	b.n	8008594 <_malloc_r+0xa8>
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	1b52      	subs	r2, r2, r5
 8008578:	d420      	bmi.n	80085bc <_malloc_r+0xd0>
 800857a:	2a0b      	cmp	r2, #11
 800857c:	d917      	bls.n	80085ae <_malloc_r+0xc2>
 800857e:	1961      	adds	r1, r4, r5
 8008580:	42a3      	cmp	r3, r4
 8008582:	6025      	str	r5, [r4, #0]
 8008584:	bf18      	it	ne
 8008586:	6059      	strne	r1, [r3, #4]
 8008588:	6863      	ldr	r3, [r4, #4]
 800858a:	bf08      	it	eq
 800858c:	f8c8 1000 	streq.w	r1, [r8]
 8008590:	5162      	str	r2, [r4, r5]
 8008592:	604b      	str	r3, [r1, #4]
 8008594:	4630      	mov	r0, r6
 8008596:	f000 f82f 	bl	80085f8 <__malloc_unlock>
 800859a:	f104 000b 	add.w	r0, r4, #11
 800859e:	1d23      	adds	r3, r4, #4
 80085a0:	f020 0007 	bic.w	r0, r0, #7
 80085a4:	1ac2      	subs	r2, r0, r3
 80085a6:	bf1c      	itt	ne
 80085a8:	1a1b      	subne	r3, r3, r0
 80085aa:	50a3      	strne	r3, [r4, r2]
 80085ac:	e7af      	b.n	800850e <_malloc_r+0x22>
 80085ae:	6862      	ldr	r2, [r4, #4]
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	bf0c      	ite	eq
 80085b4:	f8c8 2000 	streq.w	r2, [r8]
 80085b8:	605a      	strne	r2, [r3, #4]
 80085ba:	e7eb      	b.n	8008594 <_malloc_r+0xa8>
 80085bc:	4623      	mov	r3, r4
 80085be:	6864      	ldr	r4, [r4, #4]
 80085c0:	e7ae      	b.n	8008520 <_malloc_r+0x34>
 80085c2:	463c      	mov	r4, r7
 80085c4:	687f      	ldr	r7, [r7, #4]
 80085c6:	e7b6      	b.n	8008536 <_malloc_r+0x4a>
 80085c8:	461a      	mov	r2, r3
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d1fb      	bne.n	80085c8 <_malloc_r+0xdc>
 80085d0:	2300      	movs	r3, #0
 80085d2:	6053      	str	r3, [r2, #4]
 80085d4:	e7de      	b.n	8008594 <_malloc_r+0xa8>
 80085d6:	230c      	movs	r3, #12
 80085d8:	6033      	str	r3, [r6, #0]
 80085da:	4630      	mov	r0, r6
 80085dc:	f000 f80c 	bl	80085f8 <__malloc_unlock>
 80085e0:	e794      	b.n	800850c <_malloc_r+0x20>
 80085e2:	6005      	str	r5, [r0, #0]
 80085e4:	e7d6      	b.n	8008594 <_malloc_r+0xa8>
 80085e6:	bf00      	nop
 80085e8:	20001454 	.word	0x20001454

080085ec <__malloc_lock>:
 80085ec:	4801      	ldr	r0, [pc, #4]	@ (80085f4 <__malloc_lock+0x8>)
 80085ee:	f7ff beda 	b.w	80083a6 <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	2000144c 	.word	0x2000144c

080085f8 <__malloc_unlock>:
 80085f8:	4801      	ldr	r0, [pc, #4]	@ (8008600 <__malloc_unlock+0x8>)
 80085fa:	f7ff bed5 	b.w	80083a8 <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	2000144c 	.word	0x2000144c

08008604 <__ssputs_r>:
 8008604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008608:	688e      	ldr	r6, [r1, #8]
 800860a:	461f      	mov	r7, r3
 800860c:	42be      	cmp	r6, r7
 800860e:	680b      	ldr	r3, [r1, #0]
 8008610:	4682      	mov	sl, r0
 8008612:	460c      	mov	r4, r1
 8008614:	4690      	mov	r8, r2
 8008616:	d82d      	bhi.n	8008674 <__ssputs_r+0x70>
 8008618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800861c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008620:	d026      	beq.n	8008670 <__ssputs_r+0x6c>
 8008622:	6965      	ldr	r5, [r4, #20]
 8008624:	6909      	ldr	r1, [r1, #16]
 8008626:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800862a:	eba3 0901 	sub.w	r9, r3, r1
 800862e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008632:	1c7b      	adds	r3, r7, #1
 8008634:	444b      	add	r3, r9
 8008636:	106d      	asrs	r5, r5, #1
 8008638:	429d      	cmp	r5, r3
 800863a:	bf38      	it	cc
 800863c:	461d      	movcc	r5, r3
 800863e:	0553      	lsls	r3, r2, #21
 8008640:	d527      	bpl.n	8008692 <__ssputs_r+0x8e>
 8008642:	4629      	mov	r1, r5
 8008644:	f7ff ff52 	bl	80084ec <_malloc_r>
 8008648:	4606      	mov	r6, r0
 800864a:	b360      	cbz	r0, 80086a6 <__ssputs_r+0xa2>
 800864c:	6921      	ldr	r1, [r4, #16]
 800864e:	464a      	mov	r2, r9
 8008650:	f7ff feab 	bl	80083aa <memcpy>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800865a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	6126      	str	r6, [r4, #16]
 8008662:	6165      	str	r5, [r4, #20]
 8008664:	444e      	add	r6, r9
 8008666:	eba5 0509 	sub.w	r5, r5, r9
 800866a:	6026      	str	r6, [r4, #0]
 800866c:	60a5      	str	r5, [r4, #8]
 800866e:	463e      	mov	r6, r7
 8008670:	42be      	cmp	r6, r7
 8008672:	d900      	bls.n	8008676 <__ssputs_r+0x72>
 8008674:	463e      	mov	r6, r7
 8008676:	6820      	ldr	r0, [r4, #0]
 8008678:	4632      	mov	r2, r6
 800867a:	4641      	mov	r1, r8
 800867c:	f000 fd0a 	bl	8009094 <memmove>
 8008680:	68a3      	ldr	r3, [r4, #8]
 8008682:	1b9b      	subs	r3, r3, r6
 8008684:	60a3      	str	r3, [r4, #8]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	4433      	add	r3, r6
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	2000      	movs	r0, #0
 800868e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008692:	462a      	mov	r2, r5
 8008694:	f000 fd51 	bl	800913a <_realloc_r>
 8008698:	4606      	mov	r6, r0
 800869a:	2800      	cmp	r0, #0
 800869c:	d1e0      	bne.n	8008660 <__ssputs_r+0x5c>
 800869e:	6921      	ldr	r1, [r4, #16]
 80086a0:	4650      	mov	r0, sl
 80086a2:	f7ff feaf 	bl	8008404 <_free_r>
 80086a6:	230c      	movs	r3, #12
 80086a8:	f8ca 3000 	str.w	r3, [sl]
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	e7e9      	b.n	800868e <__ssputs_r+0x8a>
	...

080086bc <_svfiprintf_r>:
 80086bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c0:	4698      	mov	r8, r3
 80086c2:	898b      	ldrh	r3, [r1, #12]
 80086c4:	061b      	lsls	r3, r3, #24
 80086c6:	b09d      	sub	sp, #116	@ 0x74
 80086c8:	4607      	mov	r7, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	4614      	mov	r4, r2
 80086ce:	d510      	bpl.n	80086f2 <_svfiprintf_r+0x36>
 80086d0:	690b      	ldr	r3, [r1, #16]
 80086d2:	b973      	cbnz	r3, 80086f2 <_svfiprintf_r+0x36>
 80086d4:	2140      	movs	r1, #64	@ 0x40
 80086d6:	f7ff ff09 	bl	80084ec <_malloc_r>
 80086da:	6028      	str	r0, [r5, #0]
 80086dc:	6128      	str	r0, [r5, #16]
 80086de:	b930      	cbnz	r0, 80086ee <_svfiprintf_r+0x32>
 80086e0:	230c      	movs	r3, #12
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	b01d      	add	sp, #116	@ 0x74
 80086ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ee:	2340      	movs	r3, #64	@ 0x40
 80086f0:	616b      	str	r3, [r5, #20]
 80086f2:	2300      	movs	r3, #0
 80086f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f6:	2320      	movs	r3, #32
 80086f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008700:	2330      	movs	r3, #48	@ 0x30
 8008702:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80088a0 <_svfiprintf_r+0x1e4>
 8008706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800870a:	f04f 0901 	mov.w	r9, #1
 800870e:	4623      	mov	r3, r4
 8008710:	469a      	mov	sl, r3
 8008712:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008716:	b10a      	cbz	r2, 800871c <_svfiprintf_r+0x60>
 8008718:	2a25      	cmp	r2, #37	@ 0x25
 800871a:	d1f9      	bne.n	8008710 <_svfiprintf_r+0x54>
 800871c:	ebba 0b04 	subs.w	fp, sl, r4
 8008720:	d00b      	beq.n	800873a <_svfiprintf_r+0x7e>
 8008722:	465b      	mov	r3, fp
 8008724:	4622      	mov	r2, r4
 8008726:	4629      	mov	r1, r5
 8008728:	4638      	mov	r0, r7
 800872a:	f7ff ff6b 	bl	8008604 <__ssputs_r>
 800872e:	3001      	adds	r0, #1
 8008730:	f000 80a7 	beq.w	8008882 <_svfiprintf_r+0x1c6>
 8008734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008736:	445a      	add	r2, fp
 8008738:	9209      	str	r2, [sp, #36]	@ 0x24
 800873a:	f89a 3000 	ldrb.w	r3, [sl]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 809f 	beq.w	8008882 <_svfiprintf_r+0x1c6>
 8008744:	2300      	movs	r3, #0
 8008746:	f04f 32ff 	mov.w	r2, #4294967295
 800874a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800874e:	f10a 0a01 	add.w	sl, sl, #1
 8008752:	9304      	str	r3, [sp, #16]
 8008754:	9307      	str	r3, [sp, #28]
 8008756:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800875a:	931a      	str	r3, [sp, #104]	@ 0x68
 800875c:	4654      	mov	r4, sl
 800875e:	2205      	movs	r2, #5
 8008760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008764:	484e      	ldr	r0, [pc, #312]	@ (80088a0 <_svfiprintf_r+0x1e4>)
 8008766:	f7f7 fd3b 	bl	80001e0 <memchr>
 800876a:	9a04      	ldr	r2, [sp, #16]
 800876c:	b9d8      	cbnz	r0, 80087a6 <_svfiprintf_r+0xea>
 800876e:	06d0      	lsls	r0, r2, #27
 8008770:	bf44      	itt	mi
 8008772:	2320      	movmi	r3, #32
 8008774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008778:	0711      	lsls	r1, r2, #28
 800877a:	bf44      	itt	mi
 800877c:	232b      	movmi	r3, #43	@ 0x2b
 800877e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008782:	f89a 3000 	ldrb.w	r3, [sl]
 8008786:	2b2a      	cmp	r3, #42	@ 0x2a
 8008788:	d015      	beq.n	80087b6 <_svfiprintf_r+0xfa>
 800878a:	9a07      	ldr	r2, [sp, #28]
 800878c:	4654      	mov	r4, sl
 800878e:	2000      	movs	r0, #0
 8008790:	f04f 0c0a 	mov.w	ip, #10
 8008794:	4621      	mov	r1, r4
 8008796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800879a:	3b30      	subs	r3, #48	@ 0x30
 800879c:	2b09      	cmp	r3, #9
 800879e:	d94b      	bls.n	8008838 <_svfiprintf_r+0x17c>
 80087a0:	b1b0      	cbz	r0, 80087d0 <_svfiprintf_r+0x114>
 80087a2:	9207      	str	r2, [sp, #28]
 80087a4:	e014      	b.n	80087d0 <_svfiprintf_r+0x114>
 80087a6:	eba0 0308 	sub.w	r3, r0, r8
 80087aa:	fa09 f303 	lsl.w	r3, r9, r3
 80087ae:	4313      	orrs	r3, r2
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	46a2      	mov	sl, r4
 80087b4:	e7d2      	b.n	800875c <_svfiprintf_r+0xa0>
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	1d19      	adds	r1, r3, #4
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	9103      	str	r1, [sp, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfbb      	ittet	lt
 80087c2:	425b      	neglt	r3, r3
 80087c4:	f042 0202 	orrlt.w	r2, r2, #2
 80087c8:	9307      	strge	r3, [sp, #28]
 80087ca:	9307      	strlt	r3, [sp, #28]
 80087cc:	bfb8      	it	lt
 80087ce:	9204      	strlt	r2, [sp, #16]
 80087d0:	7823      	ldrb	r3, [r4, #0]
 80087d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80087d4:	d10a      	bne.n	80087ec <_svfiprintf_r+0x130>
 80087d6:	7863      	ldrb	r3, [r4, #1]
 80087d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80087da:	d132      	bne.n	8008842 <_svfiprintf_r+0x186>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	1d1a      	adds	r2, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	9203      	str	r2, [sp, #12]
 80087e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087e8:	3402      	adds	r4, #2
 80087ea:	9305      	str	r3, [sp, #20]
 80087ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088b0 <_svfiprintf_r+0x1f4>
 80087f0:	7821      	ldrb	r1, [r4, #0]
 80087f2:	2203      	movs	r2, #3
 80087f4:	4650      	mov	r0, sl
 80087f6:	f7f7 fcf3 	bl	80001e0 <memchr>
 80087fa:	b138      	cbz	r0, 800880c <_svfiprintf_r+0x150>
 80087fc:	9b04      	ldr	r3, [sp, #16]
 80087fe:	eba0 000a 	sub.w	r0, r0, sl
 8008802:	2240      	movs	r2, #64	@ 0x40
 8008804:	4082      	lsls	r2, r0
 8008806:	4313      	orrs	r3, r2
 8008808:	3401      	adds	r4, #1
 800880a:	9304      	str	r3, [sp, #16]
 800880c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008810:	4824      	ldr	r0, [pc, #144]	@ (80088a4 <_svfiprintf_r+0x1e8>)
 8008812:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008816:	2206      	movs	r2, #6
 8008818:	f7f7 fce2 	bl	80001e0 <memchr>
 800881c:	2800      	cmp	r0, #0
 800881e:	d036      	beq.n	800888e <_svfiprintf_r+0x1d2>
 8008820:	4b21      	ldr	r3, [pc, #132]	@ (80088a8 <_svfiprintf_r+0x1ec>)
 8008822:	bb1b      	cbnz	r3, 800886c <_svfiprintf_r+0x1b0>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	3307      	adds	r3, #7
 8008828:	f023 0307 	bic.w	r3, r3, #7
 800882c:	3308      	adds	r3, #8
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008832:	4433      	add	r3, r6
 8008834:	9309      	str	r3, [sp, #36]	@ 0x24
 8008836:	e76a      	b.n	800870e <_svfiprintf_r+0x52>
 8008838:	fb0c 3202 	mla	r2, ip, r2, r3
 800883c:	460c      	mov	r4, r1
 800883e:	2001      	movs	r0, #1
 8008840:	e7a8      	b.n	8008794 <_svfiprintf_r+0xd8>
 8008842:	2300      	movs	r3, #0
 8008844:	3401      	adds	r4, #1
 8008846:	9305      	str	r3, [sp, #20]
 8008848:	4619      	mov	r1, r3
 800884a:	f04f 0c0a 	mov.w	ip, #10
 800884e:	4620      	mov	r0, r4
 8008850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008854:	3a30      	subs	r2, #48	@ 0x30
 8008856:	2a09      	cmp	r2, #9
 8008858:	d903      	bls.n	8008862 <_svfiprintf_r+0x1a6>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0c6      	beq.n	80087ec <_svfiprintf_r+0x130>
 800885e:	9105      	str	r1, [sp, #20]
 8008860:	e7c4      	b.n	80087ec <_svfiprintf_r+0x130>
 8008862:	fb0c 2101 	mla	r1, ip, r1, r2
 8008866:	4604      	mov	r4, r0
 8008868:	2301      	movs	r3, #1
 800886a:	e7f0      	b.n	800884e <_svfiprintf_r+0x192>
 800886c:	ab03      	add	r3, sp, #12
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	462a      	mov	r2, r5
 8008872:	4b0e      	ldr	r3, [pc, #56]	@ (80088ac <_svfiprintf_r+0x1f0>)
 8008874:	a904      	add	r1, sp, #16
 8008876:	4638      	mov	r0, r7
 8008878:	f3af 8000 	nop.w
 800887c:	1c42      	adds	r2, r0, #1
 800887e:	4606      	mov	r6, r0
 8008880:	d1d6      	bne.n	8008830 <_svfiprintf_r+0x174>
 8008882:	89ab      	ldrh	r3, [r5, #12]
 8008884:	065b      	lsls	r3, r3, #25
 8008886:	f53f af2d 	bmi.w	80086e4 <_svfiprintf_r+0x28>
 800888a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800888c:	e72c      	b.n	80086e8 <_svfiprintf_r+0x2c>
 800888e:	ab03      	add	r3, sp, #12
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	462a      	mov	r2, r5
 8008894:	4b05      	ldr	r3, [pc, #20]	@ (80088ac <_svfiprintf_r+0x1f0>)
 8008896:	a904      	add	r1, sp, #16
 8008898:	4638      	mov	r0, r7
 800889a:	f000 f9bb 	bl	8008c14 <_printf_i>
 800889e:	e7ed      	b.n	800887c <_svfiprintf_r+0x1c0>
 80088a0:	08009e51 	.word	0x08009e51
 80088a4:	08009e5b 	.word	0x08009e5b
 80088a8:	00000000 	.word	0x00000000
 80088ac:	08008605 	.word	0x08008605
 80088b0:	08009e57 	.word	0x08009e57

080088b4 <__sfputc_r>:
 80088b4:	6893      	ldr	r3, [r2, #8]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	b410      	push	{r4}
 80088bc:	6093      	str	r3, [r2, #8]
 80088be:	da08      	bge.n	80088d2 <__sfputc_r+0x1e>
 80088c0:	6994      	ldr	r4, [r2, #24]
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	db01      	blt.n	80088ca <__sfputc_r+0x16>
 80088c6:	290a      	cmp	r1, #10
 80088c8:	d103      	bne.n	80088d2 <__sfputc_r+0x1e>
 80088ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ce:	f7ff bba6 	b.w	800801e <__swbuf_r>
 80088d2:	6813      	ldr	r3, [r2, #0]
 80088d4:	1c58      	adds	r0, r3, #1
 80088d6:	6010      	str	r0, [r2, #0]
 80088d8:	7019      	strb	r1, [r3, #0]
 80088da:	4608      	mov	r0, r1
 80088dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <__sfputs_r>:
 80088e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e4:	4606      	mov	r6, r0
 80088e6:	460f      	mov	r7, r1
 80088e8:	4614      	mov	r4, r2
 80088ea:	18d5      	adds	r5, r2, r3
 80088ec:	42ac      	cmp	r4, r5
 80088ee:	d101      	bne.n	80088f4 <__sfputs_r+0x12>
 80088f0:	2000      	movs	r0, #0
 80088f2:	e007      	b.n	8008904 <__sfputs_r+0x22>
 80088f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f8:	463a      	mov	r2, r7
 80088fa:	4630      	mov	r0, r6
 80088fc:	f7ff ffda 	bl	80088b4 <__sfputc_r>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d1f3      	bne.n	80088ec <__sfputs_r+0xa>
 8008904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008908 <_vfiprintf_r>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	460d      	mov	r5, r1
 800890e:	b09d      	sub	sp, #116	@ 0x74
 8008910:	4614      	mov	r4, r2
 8008912:	4698      	mov	r8, r3
 8008914:	4606      	mov	r6, r0
 8008916:	b118      	cbz	r0, 8008920 <_vfiprintf_r+0x18>
 8008918:	6a03      	ldr	r3, [r0, #32]
 800891a:	b90b      	cbnz	r3, 8008920 <_vfiprintf_r+0x18>
 800891c:	f7ff fa76 	bl	8007e0c <__sinit>
 8008920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008922:	07d9      	lsls	r1, r3, #31
 8008924:	d405      	bmi.n	8008932 <_vfiprintf_r+0x2a>
 8008926:	89ab      	ldrh	r3, [r5, #12]
 8008928:	059a      	lsls	r2, r3, #22
 800892a:	d402      	bmi.n	8008932 <_vfiprintf_r+0x2a>
 800892c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800892e:	f7ff fd3a 	bl	80083a6 <__retarget_lock_acquire_recursive>
 8008932:	89ab      	ldrh	r3, [r5, #12]
 8008934:	071b      	lsls	r3, r3, #28
 8008936:	d501      	bpl.n	800893c <_vfiprintf_r+0x34>
 8008938:	692b      	ldr	r3, [r5, #16]
 800893a:	b99b      	cbnz	r3, 8008964 <_vfiprintf_r+0x5c>
 800893c:	4629      	mov	r1, r5
 800893e:	4630      	mov	r0, r6
 8008940:	f7ff fbac 	bl	800809c <__swsetup_r>
 8008944:	b170      	cbz	r0, 8008964 <_vfiprintf_r+0x5c>
 8008946:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008948:	07dc      	lsls	r4, r3, #31
 800894a:	d504      	bpl.n	8008956 <_vfiprintf_r+0x4e>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	b01d      	add	sp, #116	@ 0x74
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	0598      	lsls	r0, r3, #22
 800895a:	d4f7      	bmi.n	800894c <_vfiprintf_r+0x44>
 800895c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800895e:	f7ff fd23 	bl	80083a8 <__retarget_lock_release_recursive>
 8008962:	e7f3      	b.n	800894c <_vfiprintf_r+0x44>
 8008964:	2300      	movs	r3, #0
 8008966:	9309      	str	r3, [sp, #36]	@ 0x24
 8008968:	2320      	movs	r3, #32
 800896a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800896e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008972:	2330      	movs	r3, #48	@ 0x30
 8008974:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b24 <_vfiprintf_r+0x21c>
 8008978:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800897c:	f04f 0901 	mov.w	r9, #1
 8008980:	4623      	mov	r3, r4
 8008982:	469a      	mov	sl, r3
 8008984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008988:	b10a      	cbz	r2, 800898e <_vfiprintf_r+0x86>
 800898a:	2a25      	cmp	r2, #37	@ 0x25
 800898c:	d1f9      	bne.n	8008982 <_vfiprintf_r+0x7a>
 800898e:	ebba 0b04 	subs.w	fp, sl, r4
 8008992:	d00b      	beq.n	80089ac <_vfiprintf_r+0xa4>
 8008994:	465b      	mov	r3, fp
 8008996:	4622      	mov	r2, r4
 8008998:	4629      	mov	r1, r5
 800899a:	4630      	mov	r0, r6
 800899c:	f7ff ffa1 	bl	80088e2 <__sfputs_r>
 80089a0:	3001      	adds	r0, #1
 80089a2:	f000 80a7 	beq.w	8008af4 <_vfiprintf_r+0x1ec>
 80089a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089a8:	445a      	add	r2, fp
 80089aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ac:	f89a 3000 	ldrb.w	r3, [sl]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 809f 	beq.w	8008af4 <_vfiprintf_r+0x1ec>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f04f 32ff 	mov.w	r2, #4294967295
 80089bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c0:	f10a 0a01 	add.w	sl, sl, #1
 80089c4:	9304      	str	r3, [sp, #16]
 80089c6:	9307      	str	r3, [sp, #28]
 80089c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80089ce:	4654      	mov	r4, sl
 80089d0:	2205      	movs	r2, #5
 80089d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d6:	4853      	ldr	r0, [pc, #332]	@ (8008b24 <_vfiprintf_r+0x21c>)
 80089d8:	f7f7 fc02 	bl	80001e0 <memchr>
 80089dc:	9a04      	ldr	r2, [sp, #16]
 80089de:	b9d8      	cbnz	r0, 8008a18 <_vfiprintf_r+0x110>
 80089e0:	06d1      	lsls	r1, r2, #27
 80089e2:	bf44      	itt	mi
 80089e4:	2320      	movmi	r3, #32
 80089e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ea:	0713      	lsls	r3, r2, #28
 80089ec:	bf44      	itt	mi
 80089ee:	232b      	movmi	r3, #43	@ 0x2b
 80089f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089f4:	f89a 3000 	ldrb.w	r3, [sl]
 80089f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80089fa:	d015      	beq.n	8008a28 <_vfiprintf_r+0x120>
 80089fc:	9a07      	ldr	r2, [sp, #28]
 80089fe:	4654      	mov	r4, sl
 8008a00:	2000      	movs	r0, #0
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4621      	mov	r1, r4
 8008a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a0c:	3b30      	subs	r3, #48	@ 0x30
 8008a0e:	2b09      	cmp	r3, #9
 8008a10:	d94b      	bls.n	8008aaa <_vfiprintf_r+0x1a2>
 8008a12:	b1b0      	cbz	r0, 8008a42 <_vfiprintf_r+0x13a>
 8008a14:	9207      	str	r2, [sp, #28]
 8008a16:	e014      	b.n	8008a42 <_vfiprintf_r+0x13a>
 8008a18:	eba0 0308 	sub.w	r3, r0, r8
 8008a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a20:	4313      	orrs	r3, r2
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	46a2      	mov	sl, r4
 8008a26:	e7d2      	b.n	80089ce <_vfiprintf_r+0xc6>
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	1d19      	adds	r1, r3, #4
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	9103      	str	r1, [sp, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bfbb      	ittet	lt
 8008a34:	425b      	neglt	r3, r3
 8008a36:	f042 0202 	orrlt.w	r2, r2, #2
 8008a3a:	9307      	strge	r3, [sp, #28]
 8008a3c:	9307      	strlt	r3, [sp, #28]
 8008a3e:	bfb8      	it	lt
 8008a40:	9204      	strlt	r2, [sp, #16]
 8008a42:	7823      	ldrb	r3, [r4, #0]
 8008a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a46:	d10a      	bne.n	8008a5e <_vfiprintf_r+0x156>
 8008a48:	7863      	ldrb	r3, [r4, #1]
 8008a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a4c:	d132      	bne.n	8008ab4 <_vfiprintf_r+0x1ac>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	1d1a      	adds	r2, r3, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	9203      	str	r2, [sp, #12]
 8008a56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a5a:	3402      	adds	r4, #2
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b34 <_vfiprintf_r+0x22c>
 8008a62:	7821      	ldrb	r1, [r4, #0]
 8008a64:	2203      	movs	r2, #3
 8008a66:	4650      	mov	r0, sl
 8008a68:	f7f7 fbba 	bl	80001e0 <memchr>
 8008a6c:	b138      	cbz	r0, 8008a7e <_vfiprintf_r+0x176>
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	eba0 000a 	sub.w	r0, r0, sl
 8008a74:	2240      	movs	r2, #64	@ 0x40
 8008a76:	4082      	lsls	r2, r0
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	3401      	adds	r4, #1
 8008a7c:	9304      	str	r3, [sp, #16]
 8008a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a82:	4829      	ldr	r0, [pc, #164]	@ (8008b28 <_vfiprintf_r+0x220>)
 8008a84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a88:	2206      	movs	r2, #6
 8008a8a:	f7f7 fba9 	bl	80001e0 <memchr>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d03f      	beq.n	8008b12 <_vfiprintf_r+0x20a>
 8008a92:	4b26      	ldr	r3, [pc, #152]	@ (8008b2c <_vfiprintf_r+0x224>)
 8008a94:	bb1b      	cbnz	r3, 8008ade <_vfiprintf_r+0x1d6>
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	3307      	adds	r3, #7
 8008a9a:	f023 0307 	bic.w	r3, r3, #7
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	9303      	str	r3, [sp, #12]
 8008aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa4:	443b      	add	r3, r7
 8008aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa8:	e76a      	b.n	8008980 <_vfiprintf_r+0x78>
 8008aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aae:	460c      	mov	r4, r1
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	e7a8      	b.n	8008a06 <_vfiprintf_r+0xfe>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	3401      	adds	r4, #1
 8008ab8:	9305      	str	r3, [sp, #20]
 8008aba:	4619      	mov	r1, r3
 8008abc:	f04f 0c0a 	mov.w	ip, #10
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ac6:	3a30      	subs	r2, #48	@ 0x30
 8008ac8:	2a09      	cmp	r2, #9
 8008aca:	d903      	bls.n	8008ad4 <_vfiprintf_r+0x1cc>
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0c6      	beq.n	8008a5e <_vfiprintf_r+0x156>
 8008ad0:	9105      	str	r1, [sp, #20]
 8008ad2:	e7c4      	b.n	8008a5e <_vfiprintf_r+0x156>
 8008ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ad8:	4604      	mov	r4, r0
 8008ada:	2301      	movs	r3, #1
 8008adc:	e7f0      	b.n	8008ac0 <_vfiprintf_r+0x1b8>
 8008ade:	ab03      	add	r3, sp, #12
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4b12      	ldr	r3, [pc, #72]	@ (8008b30 <_vfiprintf_r+0x228>)
 8008ae6:	a904      	add	r1, sp, #16
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f3af 8000 	nop.w
 8008aee:	4607      	mov	r7, r0
 8008af0:	1c78      	adds	r0, r7, #1
 8008af2:	d1d6      	bne.n	8008aa2 <_vfiprintf_r+0x19a>
 8008af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008af6:	07d9      	lsls	r1, r3, #31
 8008af8:	d405      	bmi.n	8008b06 <_vfiprintf_r+0x1fe>
 8008afa:	89ab      	ldrh	r3, [r5, #12]
 8008afc:	059a      	lsls	r2, r3, #22
 8008afe:	d402      	bmi.n	8008b06 <_vfiprintf_r+0x1fe>
 8008b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b02:	f7ff fc51 	bl	80083a8 <__retarget_lock_release_recursive>
 8008b06:	89ab      	ldrh	r3, [r5, #12]
 8008b08:	065b      	lsls	r3, r3, #25
 8008b0a:	f53f af1f 	bmi.w	800894c <_vfiprintf_r+0x44>
 8008b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b10:	e71e      	b.n	8008950 <_vfiprintf_r+0x48>
 8008b12:	ab03      	add	r3, sp, #12
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	462a      	mov	r2, r5
 8008b18:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <_vfiprintf_r+0x228>)
 8008b1a:	a904      	add	r1, sp, #16
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f000 f879 	bl	8008c14 <_printf_i>
 8008b22:	e7e4      	b.n	8008aee <_vfiprintf_r+0x1e6>
 8008b24:	08009e51 	.word	0x08009e51
 8008b28:	08009e5b 	.word	0x08009e5b
 8008b2c:	00000000 	.word	0x00000000
 8008b30:	080088e3 	.word	0x080088e3
 8008b34:	08009e57 	.word	0x08009e57

08008b38 <_printf_common>:
 8008b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	4698      	mov	r8, r3
 8008b40:	688a      	ldr	r2, [r1, #8]
 8008b42:	690b      	ldr	r3, [r1, #16]
 8008b44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	bfb8      	it	lt
 8008b4c:	4613      	movlt	r3, r2
 8008b4e:	6033      	str	r3, [r6, #0]
 8008b50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b54:	4607      	mov	r7, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	b10a      	cbz	r2, 8008b5e <_printf_common+0x26>
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	0699      	lsls	r1, r3, #26
 8008b62:	bf42      	ittt	mi
 8008b64:	6833      	ldrmi	r3, [r6, #0]
 8008b66:	3302      	addmi	r3, #2
 8008b68:	6033      	strmi	r3, [r6, #0]
 8008b6a:	6825      	ldr	r5, [r4, #0]
 8008b6c:	f015 0506 	ands.w	r5, r5, #6
 8008b70:	d106      	bne.n	8008b80 <_printf_common+0x48>
 8008b72:	f104 0a19 	add.w	sl, r4, #25
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	6832      	ldr	r2, [r6, #0]
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	dc26      	bgt.n	8008bce <_printf_common+0x96>
 8008b80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b84:	6822      	ldr	r2, [r4, #0]
 8008b86:	3b00      	subs	r3, #0
 8008b88:	bf18      	it	ne
 8008b8a:	2301      	movne	r3, #1
 8008b8c:	0692      	lsls	r2, r2, #26
 8008b8e:	d42b      	bmi.n	8008be8 <_printf_common+0xb0>
 8008b90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b94:	4641      	mov	r1, r8
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c8      	blx	r9
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d01e      	beq.n	8008bdc <_printf_common+0xa4>
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	6922      	ldr	r2, [r4, #16]
 8008ba2:	f003 0306 	and.w	r3, r3, #6
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	bf02      	ittt	eq
 8008baa:	68e5      	ldreq	r5, [r4, #12]
 8008bac:	6833      	ldreq	r3, [r6, #0]
 8008bae:	1aed      	subeq	r5, r5, r3
 8008bb0:	68a3      	ldr	r3, [r4, #8]
 8008bb2:	bf0c      	ite	eq
 8008bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bb8:	2500      	movne	r5, #0
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bfc4      	itt	gt
 8008bbe:	1a9b      	subgt	r3, r3, r2
 8008bc0:	18ed      	addgt	r5, r5, r3
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	341a      	adds	r4, #26
 8008bc6:	42b5      	cmp	r5, r6
 8008bc8:	d11a      	bne.n	8008c00 <_printf_common+0xc8>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e008      	b.n	8008be0 <_printf_common+0xa8>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4641      	mov	r1, r8
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	47c8      	blx	r9
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d103      	bne.n	8008be4 <_printf_common+0xac>
 8008bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8008be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be4:	3501      	adds	r5, #1
 8008be6:	e7c6      	b.n	8008b76 <_printf_common+0x3e>
 8008be8:	18e1      	adds	r1, r4, r3
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	2030      	movs	r0, #48	@ 0x30
 8008bee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bf2:	4422      	add	r2, r4
 8008bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	e7c7      	b.n	8008b90 <_printf_common+0x58>
 8008c00:	2301      	movs	r3, #1
 8008c02:	4622      	mov	r2, r4
 8008c04:	4641      	mov	r1, r8
 8008c06:	4638      	mov	r0, r7
 8008c08:	47c8      	blx	r9
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	d0e6      	beq.n	8008bdc <_printf_common+0xa4>
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7d9      	b.n	8008bc6 <_printf_common+0x8e>
	...

08008c14 <_printf_i>:
 8008c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	7e0f      	ldrb	r7, [r1, #24]
 8008c1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c1c:	2f78      	cmp	r7, #120	@ 0x78
 8008c1e:	4691      	mov	r9, r2
 8008c20:	4680      	mov	r8, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	469a      	mov	sl, r3
 8008c26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c2a:	d807      	bhi.n	8008c3c <_printf_i+0x28>
 8008c2c:	2f62      	cmp	r7, #98	@ 0x62
 8008c2e:	d80a      	bhi.n	8008c46 <_printf_i+0x32>
 8008c30:	2f00      	cmp	r7, #0
 8008c32:	f000 80d2 	beq.w	8008dda <_printf_i+0x1c6>
 8008c36:	2f58      	cmp	r7, #88	@ 0x58
 8008c38:	f000 80b9 	beq.w	8008dae <_printf_i+0x19a>
 8008c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c44:	e03a      	b.n	8008cbc <_printf_i+0xa8>
 8008c46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c4a:	2b15      	cmp	r3, #21
 8008c4c:	d8f6      	bhi.n	8008c3c <_printf_i+0x28>
 8008c4e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c54 <_printf_i+0x40>)
 8008c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c54:	08008cad 	.word	0x08008cad
 8008c58:	08008cc1 	.word	0x08008cc1
 8008c5c:	08008c3d 	.word	0x08008c3d
 8008c60:	08008c3d 	.word	0x08008c3d
 8008c64:	08008c3d 	.word	0x08008c3d
 8008c68:	08008c3d 	.word	0x08008c3d
 8008c6c:	08008cc1 	.word	0x08008cc1
 8008c70:	08008c3d 	.word	0x08008c3d
 8008c74:	08008c3d 	.word	0x08008c3d
 8008c78:	08008c3d 	.word	0x08008c3d
 8008c7c:	08008c3d 	.word	0x08008c3d
 8008c80:	08008dc1 	.word	0x08008dc1
 8008c84:	08008ceb 	.word	0x08008ceb
 8008c88:	08008d7b 	.word	0x08008d7b
 8008c8c:	08008c3d 	.word	0x08008c3d
 8008c90:	08008c3d 	.word	0x08008c3d
 8008c94:	08008de3 	.word	0x08008de3
 8008c98:	08008c3d 	.word	0x08008c3d
 8008c9c:	08008ceb 	.word	0x08008ceb
 8008ca0:	08008c3d 	.word	0x08008c3d
 8008ca4:	08008c3d 	.word	0x08008c3d
 8008ca8:	08008d83 	.word	0x08008d83
 8008cac:	6833      	ldr	r3, [r6, #0]
 8008cae:	1d1a      	adds	r2, r3, #4
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6032      	str	r2, [r6, #0]
 8008cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e09d      	b.n	8008dfc <_printf_i+0x1e8>
 8008cc0:	6833      	ldr	r3, [r6, #0]
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	1d19      	adds	r1, r3, #4
 8008cc6:	6031      	str	r1, [r6, #0]
 8008cc8:	0606      	lsls	r6, r0, #24
 8008cca:	d501      	bpl.n	8008cd0 <_printf_i+0xbc>
 8008ccc:	681d      	ldr	r5, [r3, #0]
 8008cce:	e003      	b.n	8008cd8 <_printf_i+0xc4>
 8008cd0:	0645      	lsls	r5, r0, #25
 8008cd2:	d5fb      	bpl.n	8008ccc <_printf_i+0xb8>
 8008cd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	da03      	bge.n	8008ce4 <_printf_i+0xd0>
 8008cdc:	232d      	movs	r3, #45	@ 0x2d
 8008cde:	426d      	negs	r5, r5
 8008ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ce4:	4859      	ldr	r0, [pc, #356]	@ (8008e4c <_printf_i+0x238>)
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	e011      	b.n	8008d0e <_printf_i+0xfa>
 8008cea:	6821      	ldr	r1, [r4, #0]
 8008cec:	6833      	ldr	r3, [r6, #0]
 8008cee:	0608      	lsls	r0, r1, #24
 8008cf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cf4:	d402      	bmi.n	8008cfc <_printf_i+0xe8>
 8008cf6:	0649      	lsls	r1, r1, #25
 8008cf8:	bf48      	it	mi
 8008cfa:	b2ad      	uxthmi	r5, r5
 8008cfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cfe:	4853      	ldr	r0, [pc, #332]	@ (8008e4c <_printf_i+0x238>)
 8008d00:	6033      	str	r3, [r6, #0]
 8008d02:	bf14      	ite	ne
 8008d04:	230a      	movne	r3, #10
 8008d06:	2308      	moveq	r3, #8
 8008d08:	2100      	movs	r1, #0
 8008d0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d0e:	6866      	ldr	r6, [r4, #4]
 8008d10:	60a6      	str	r6, [r4, #8]
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	bfa2      	ittt	ge
 8008d16:	6821      	ldrge	r1, [r4, #0]
 8008d18:	f021 0104 	bicge.w	r1, r1, #4
 8008d1c:	6021      	strge	r1, [r4, #0]
 8008d1e:	b90d      	cbnz	r5, 8008d24 <_printf_i+0x110>
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	d04b      	beq.n	8008dbc <_printf_i+0x1a8>
 8008d24:	4616      	mov	r6, r2
 8008d26:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d2a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d2e:	5dc7      	ldrb	r7, [r0, r7]
 8008d30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d34:	462f      	mov	r7, r5
 8008d36:	42bb      	cmp	r3, r7
 8008d38:	460d      	mov	r5, r1
 8008d3a:	d9f4      	bls.n	8008d26 <_printf_i+0x112>
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d10b      	bne.n	8008d58 <_printf_i+0x144>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	07df      	lsls	r7, r3, #31
 8008d44:	d508      	bpl.n	8008d58 <_printf_i+0x144>
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	6861      	ldr	r1, [r4, #4]
 8008d4a:	4299      	cmp	r1, r3
 8008d4c:	bfde      	ittt	le
 8008d4e:	2330      	movle	r3, #48	@ 0x30
 8008d50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d58:	1b92      	subs	r2, r2, r6
 8008d5a:	6122      	str	r2, [r4, #16]
 8008d5c:	f8cd a000 	str.w	sl, [sp]
 8008d60:	464b      	mov	r3, r9
 8008d62:	aa03      	add	r2, sp, #12
 8008d64:	4621      	mov	r1, r4
 8008d66:	4640      	mov	r0, r8
 8008d68:	f7ff fee6 	bl	8008b38 <_printf_common>
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d14a      	bne.n	8008e06 <_printf_i+0x1f2>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	b004      	add	sp, #16
 8008d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	f043 0320 	orr.w	r3, r3, #32
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	4833      	ldr	r0, [pc, #204]	@ (8008e50 <_printf_i+0x23c>)
 8008d84:	2778      	movs	r7, #120	@ 0x78
 8008d86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	6831      	ldr	r1, [r6, #0]
 8008d8e:	061f      	lsls	r7, r3, #24
 8008d90:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d94:	d402      	bmi.n	8008d9c <_printf_i+0x188>
 8008d96:	065f      	lsls	r7, r3, #25
 8008d98:	bf48      	it	mi
 8008d9a:	b2ad      	uxthmi	r5, r5
 8008d9c:	6031      	str	r1, [r6, #0]
 8008d9e:	07d9      	lsls	r1, r3, #31
 8008da0:	bf44      	itt	mi
 8008da2:	f043 0320 	orrmi.w	r3, r3, #32
 8008da6:	6023      	strmi	r3, [r4, #0]
 8008da8:	b11d      	cbz	r5, 8008db2 <_printf_i+0x19e>
 8008daa:	2310      	movs	r3, #16
 8008dac:	e7ac      	b.n	8008d08 <_printf_i+0xf4>
 8008dae:	4827      	ldr	r0, [pc, #156]	@ (8008e4c <_printf_i+0x238>)
 8008db0:	e7e9      	b.n	8008d86 <_printf_i+0x172>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	f023 0320 	bic.w	r3, r3, #32
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	e7f6      	b.n	8008daa <_printf_i+0x196>
 8008dbc:	4616      	mov	r6, r2
 8008dbe:	e7bd      	b.n	8008d3c <_printf_i+0x128>
 8008dc0:	6833      	ldr	r3, [r6, #0]
 8008dc2:	6825      	ldr	r5, [r4, #0]
 8008dc4:	6961      	ldr	r1, [r4, #20]
 8008dc6:	1d18      	adds	r0, r3, #4
 8008dc8:	6030      	str	r0, [r6, #0]
 8008dca:	062e      	lsls	r6, r5, #24
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	d501      	bpl.n	8008dd4 <_printf_i+0x1c0>
 8008dd0:	6019      	str	r1, [r3, #0]
 8008dd2:	e002      	b.n	8008dda <_printf_i+0x1c6>
 8008dd4:	0668      	lsls	r0, r5, #25
 8008dd6:	d5fb      	bpl.n	8008dd0 <_printf_i+0x1bc>
 8008dd8:	8019      	strh	r1, [r3, #0]
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	4616      	mov	r6, r2
 8008de0:	e7bc      	b.n	8008d5c <_printf_i+0x148>
 8008de2:	6833      	ldr	r3, [r6, #0]
 8008de4:	1d1a      	adds	r2, r3, #4
 8008de6:	6032      	str	r2, [r6, #0]
 8008de8:	681e      	ldr	r6, [r3, #0]
 8008dea:	6862      	ldr	r2, [r4, #4]
 8008dec:	2100      	movs	r1, #0
 8008dee:	4630      	mov	r0, r6
 8008df0:	f7f7 f9f6 	bl	80001e0 <memchr>
 8008df4:	b108      	cbz	r0, 8008dfa <_printf_i+0x1e6>
 8008df6:	1b80      	subs	r0, r0, r6
 8008df8:	6060      	str	r0, [r4, #4]
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	6123      	str	r3, [r4, #16]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e04:	e7aa      	b.n	8008d5c <_printf_i+0x148>
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	4632      	mov	r2, r6
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	47d0      	blx	sl
 8008e10:	3001      	adds	r0, #1
 8008e12:	d0ad      	beq.n	8008d70 <_printf_i+0x15c>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	079b      	lsls	r3, r3, #30
 8008e18:	d413      	bmi.n	8008e42 <_printf_i+0x22e>
 8008e1a:	68e0      	ldr	r0, [r4, #12]
 8008e1c:	9b03      	ldr	r3, [sp, #12]
 8008e1e:	4298      	cmp	r0, r3
 8008e20:	bfb8      	it	lt
 8008e22:	4618      	movlt	r0, r3
 8008e24:	e7a6      	b.n	8008d74 <_printf_i+0x160>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4632      	mov	r2, r6
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	4640      	mov	r0, r8
 8008e2e:	47d0      	blx	sl
 8008e30:	3001      	adds	r0, #1
 8008e32:	d09d      	beq.n	8008d70 <_printf_i+0x15c>
 8008e34:	3501      	adds	r5, #1
 8008e36:	68e3      	ldr	r3, [r4, #12]
 8008e38:	9903      	ldr	r1, [sp, #12]
 8008e3a:	1a5b      	subs	r3, r3, r1
 8008e3c:	42ab      	cmp	r3, r5
 8008e3e:	dcf2      	bgt.n	8008e26 <_printf_i+0x212>
 8008e40:	e7eb      	b.n	8008e1a <_printf_i+0x206>
 8008e42:	2500      	movs	r5, #0
 8008e44:	f104 0619 	add.w	r6, r4, #25
 8008e48:	e7f5      	b.n	8008e36 <_printf_i+0x222>
 8008e4a:	bf00      	nop
 8008e4c:	08009e62 	.word	0x08009e62
 8008e50:	08009e73 	.word	0x08009e73

08008e54 <__sflush_r>:
 8008e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5c:	0716      	lsls	r6, r2, #28
 8008e5e:	4605      	mov	r5, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	d454      	bmi.n	8008f0e <__sflush_r+0xba>
 8008e64:	684b      	ldr	r3, [r1, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dc02      	bgt.n	8008e70 <__sflush_r+0x1c>
 8008e6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	dd48      	ble.n	8008f02 <__sflush_r+0xae>
 8008e70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e72:	2e00      	cmp	r6, #0
 8008e74:	d045      	beq.n	8008f02 <__sflush_r+0xae>
 8008e76:	2300      	movs	r3, #0
 8008e78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e7c:	682f      	ldr	r7, [r5, #0]
 8008e7e:	6a21      	ldr	r1, [r4, #32]
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	d030      	beq.n	8008ee6 <__sflush_r+0x92>
 8008e84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	0759      	lsls	r1, r3, #29
 8008e8a:	d505      	bpl.n	8008e98 <__sflush_r+0x44>
 8008e8c:	6863      	ldr	r3, [r4, #4]
 8008e8e:	1ad2      	subs	r2, r2, r3
 8008e90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e92:	b10b      	cbz	r3, 8008e98 <__sflush_r+0x44>
 8008e94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e96:	1ad2      	subs	r2, r2, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e9c:	6a21      	ldr	r1, [r4, #32]
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b0      	blx	r6
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	d106      	bne.n	8008eb6 <__sflush_r+0x62>
 8008ea8:	6829      	ldr	r1, [r5, #0]
 8008eaa:	291d      	cmp	r1, #29
 8008eac:	d82b      	bhi.n	8008f06 <__sflush_r+0xb2>
 8008eae:	4a2a      	ldr	r2, [pc, #168]	@ (8008f58 <__sflush_r+0x104>)
 8008eb0:	410a      	asrs	r2, r1
 8008eb2:	07d6      	lsls	r6, r2, #31
 8008eb4:	d427      	bmi.n	8008f06 <__sflush_r+0xb2>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6062      	str	r2, [r4, #4]
 8008eba:	04d9      	lsls	r1, r3, #19
 8008ebc:	6922      	ldr	r2, [r4, #16]
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	d504      	bpl.n	8008ecc <__sflush_r+0x78>
 8008ec2:	1c42      	adds	r2, r0, #1
 8008ec4:	d101      	bne.n	8008eca <__sflush_r+0x76>
 8008ec6:	682b      	ldr	r3, [r5, #0]
 8008ec8:	b903      	cbnz	r3, 8008ecc <__sflush_r+0x78>
 8008eca:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ece:	602f      	str	r7, [r5, #0]
 8008ed0:	b1b9      	cbz	r1, 8008f02 <__sflush_r+0xae>
 8008ed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	d002      	beq.n	8008ee0 <__sflush_r+0x8c>
 8008eda:	4628      	mov	r0, r5
 8008edc:	f7ff fa92 	bl	8008404 <_free_r>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ee4:	e00d      	b.n	8008f02 <__sflush_r+0xae>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	4628      	mov	r0, r5
 8008eea:	47b0      	blx	r6
 8008eec:	4602      	mov	r2, r0
 8008eee:	1c50      	adds	r0, r2, #1
 8008ef0:	d1c9      	bne.n	8008e86 <__sflush_r+0x32>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0c6      	beq.n	8008e86 <__sflush_r+0x32>
 8008ef8:	2b1d      	cmp	r3, #29
 8008efa:	d001      	beq.n	8008f00 <__sflush_r+0xac>
 8008efc:	2b16      	cmp	r3, #22
 8008efe:	d11e      	bne.n	8008f3e <__sflush_r+0xea>
 8008f00:	602f      	str	r7, [r5, #0]
 8008f02:	2000      	movs	r0, #0
 8008f04:	e022      	b.n	8008f4c <__sflush_r+0xf8>
 8008f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	e01b      	b.n	8008f46 <__sflush_r+0xf2>
 8008f0e:	690f      	ldr	r7, [r1, #16]
 8008f10:	2f00      	cmp	r7, #0
 8008f12:	d0f6      	beq.n	8008f02 <__sflush_r+0xae>
 8008f14:	0793      	lsls	r3, r2, #30
 8008f16:	680e      	ldr	r6, [r1, #0]
 8008f18:	bf08      	it	eq
 8008f1a:	694b      	ldreq	r3, [r1, #20]
 8008f1c:	600f      	str	r7, [r1, #0]
 8008f1e:	bf18      	it	ne
 8008f20:	2300      	movne	r3, #0
 8008f22:	eba6 0807 	sub.w	r8, r6, r7
 8008f26:	608b      	str	r3, [r1, #8]
 8008f28:	f1b8 0f00 	cmp.w	r8, #0
 8008f2c:	dde9      	ble.n	8008f02 <__sflush_r+0xae>
 8008f2e:	6a21      	ldr	r1, [r4, #32]
 8008f30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f32:	4643      	mov	r3, r8
 8008f34:	463a      	mov	r2, r7
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b0      	blx	r6
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	dc08      	bgt.n	8008f50 <__sflush_r+0xfc>
 8008f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f50:	4407      	add	r7, r0
 8008f52:	eba8 0800 	sub.w	r8, r8, r0
 8008f56:	e7e7      	b.n	8008f28 <__sflush_r+0xd4>
 8008f58:	dfbffffe 	.word	0xdfbffffe

08008f5c <_fflush_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	690b      	ldr	r3, [r1, #16]
 8008f60:	4605      	mov	r5, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	b913      	cbnz	r3, 8008f6c <_fflush_r+0x10>
 8008f66:	2500      	movs	r5, #0
 8008f68:	4628      	mov	r0, r5
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	b118      	cbz	r0, 8008f76 <_fflush_r+0x1a>
 8008f6e:	6a03      	ldr	r3, [r0, #32]
 8008f70:	b90b      	cbnz	r3, 8008f76 <_fflush_r+0x1a>
 8008f72:	f7fe ff4b 	bl	8007e0c <__sinit>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f3      	beq.n	8008f66 <_fflush_r+0xa>
 8008f7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f80:	07d0      	lsls	r0, r2, #31
 8008f82:	d404      	bmi.n	8008f8e <_fflush_r+0x32>
 8008f84:	0599      	lsls	r1, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_fflush_r+0x32>
 8008f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f8a:	f7ff fa0c 	bl	80083a6 <__retarget_lock_acquire_recursive>
 8008f8e:	4628      	mov	r0, r5
 8008f90:	4621      	mov	r1, r4
 8008f92:	f7ff ff5f 	bl	8008e54 <__sflush_r>
 8008f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f98:	07da      	lsls	r2, r3, #31
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	d4e4      	bmi.n	8008f68 <_fflush_r+0xc>
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	059b      	lsls	r3, r3, #22
 8008fa2:	d4e1      	bmi.n	8008f68 <_fflush_r+0xc>
 8008fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fa6:	f7ff f9ff 	bl	80083a8 <__retarget_lock_release_recursive>
 8008faa:	e7dd      	b.n	8008f68 <_fflush_r+0xc>

08008fac <fiprintf>:
 8008fac:	b40e      	push	{r1, r2, r3}
 8008fae:	b503      	push	{r0, r1, lr}
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	ab03      	add	r3, sp, #12
 8008fb4:	4805      	ldr	r0, [pc, #20]	@ (8008fcc <fiprintf+0x20>)
 8008fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fba:	6800      	ldr	r0, [r0, #0]
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	f7ff fca3 	bl	8008908 <_vfiprintf_r>
 8008fc2:	b002      	add	sp, #8
 8008fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fc8:	b003      	add	sp, #12
 8008fca:	4770      	bx	lr
 8008fcc:	20000038 	.word	0x20000038

08008fd0 <__swhatbuf_r>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	2900      	cmp	r1, #0
 8008fda:	b096      	sub	sp, #88	@ 0x58
 8008fdc:	4615      	mov	r5, r2
 8008fde:	461e      	mov	r6, r3
 8008fe0:	da0d      	bge.n	8008ffe <__swhatbuf_r+0x2e>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fe8:	f04f 0100 	mov.w	r1, #0
 8008fec:	bf14      	ite	ne
 8008fee:	2340      	movne	r3, #64	@ 0x40
 8008ff0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	6031      	str	r1, [r6, #0]
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	b016      	add	sp, #88	@ 0x58
 8008ffc:	bd70      	pop	{r4, r5, r6, pc}
 8008ffe:	466a      	mov	r2, sp
 8009000:	f000 f862 	bl	80090c8 <_fstat_r>
 8009004:	2800      	cmp	r0, #0
 8009006:	dbec      	blt.n	8008fe2 <__swhatbuf_r+0x12>
 8009008:	9901      	ldr	r1, [sp, #4]
 800900a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800900e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009012:	4259      	negs	r1, r3
 8009014:	4159      	adcs	r1, r3
 8009016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800901a:	e7eb      	b.n	8008ff4 <__swhatbuf_r+0x24>

0800901c <__smakebuf_r>:
 800901c:	898b      	ldrh	r3, [r1, #12]
 800901e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009020:	079d      	lsls	r5, r3, #30
 8009022:	4606      	mov	r6, r0
 8009024:	460c      	mov	r4, r1
 8009026:	d507      	bpl.n	8009038 <__smakebuf_r+0x1c>
 8009028:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	2301      	movs	r3, #1
 8009032:	6163      	str	r3, [r4, #20]
 8009034:	b003      	add	sp, #12
 8009036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009038:	ab01      	add	r3, sp, #4
 800903a:	466a      	mov	r2, sp
 800903c:	f7ff ffc8 	bl	8008fd0 <__swhatbuf_r>
 8009040:	9f00      	ldr	r7, [sp, #0]
 8009042:	4605      	mov	r5, r0
 8009044:	4639      	mov	r1, r7
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff fa50 	bl	80084ec <_malloc_r>
 800904c:	b948      	cbnz	r0, 8009062 <__smakebuf_r+0x46>
 800904e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009052:	059a      	lsls	r2, r3, #22
 8009054:	d4ee      	bmi.n	8009034 <__smakebuf_r+0x18>
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	f043 0302 	orr.w	r3, r3, #2
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	e7e2      	b.n	8009028 <__smakebuf_r+0xc>
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	6020      	str	r0, [r4, #0]
 8009066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906a:	81a3      	strh	r3, [r4, #12]
 800906c:	9b01      	ldr	r3, [sp, #4]
 800906e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009072:	b15b      	cbz	r3, 800908c <__smakebuf_r+0x70>
 8009074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009078:	4630      	mov	r0, r6
 800907a:	f000 f837 	bl	80090ec <_isatty_r>
 800907e:	b128      	cbz	r0, 800908c <__smakebuf_r+0x70>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f023 0303 	bic.w	r3, r3, #3
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	431d      	orrs	r5, r3
 8009090:	81a5      	strh	r5, [r4, #12]
 8009092:	e7cf      	b.n	8009034 <__smakebuf_r+0x18>

08009094 <memmove>:
 8009094:	4288      	cmp	r0, r1
 8009096:	b510      	push	{r4, lr}
 8009098:	eb01 0402 	add.w	r4, r1, r2
 800909c:	d902      	bls.n	80090a4 <memmove+0x10>
 800909e:	4284      	cmp	r4, r0
 80090a0:	4623      	mov	r3, r4
 80090a2:	d807      	bhi.n	80090b4 <memmove+0x20>
 80090a4:	1e43      	subs	r3, r0, #1
 80090a6:	42a1      	cmp	r1, r4
 80090a8:	d008      	beq.n	80090bc <memmove+0x28>
 80090aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090b2:	e7f8      	b.n	80090a6 <memmove+0x12>
 80090b4:	4402      	add	r2, r0
 80090b6:	4601      	mov	r1, r0
 80090b8:	428a      	cmp	r2, r1
 80090ba:	d100      	bne.n	80090be <memmove+0x2a>
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090c6:	e7f7      	b.n	80090b8 <memmove+0x24>

080090c8 <_fstat_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d07      	ldr	r5, [pc, #28]	@ (80090e8 <_fstat_r+0x20>)
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	4611      	mov	r1, r2
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	f7f7 ff48 	bl	8000f6a <_fstat>
 80090da:	1c43      	adds	r3, r0, #1
 80090dc:	d102      	bne.n	80090e4 <_fstat_r+0x1c>
 80090de:	682b      	ldr	r3, [r5, #0]
 80090e0:	b103      	cbz	r3, 80090e4 <_fstat_r+0x1c>
 80090e2:	6023      	str	r3, [r4, #0]
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
 80090e6:	bf00      	nop
 80090e8:	20001448 	.word	0x20001448

080090ec <_isatty_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d06      	ldr	r5, [pc, #24]	@ (8009108 <_isatty_r+0x1c>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f7f7 ff47 	bl	8000f8a <_isatty>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_isatty_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_isatty_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	20001448 	.word	0x20001448

0800910c <_sbrk_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d06      	ldr	r5, [pc, #24]	@ (8009128 <_sbrk_r+0x1c>)
 8009110:	2300      	movs	r3, #0
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	f7f7 ff50 	bl	8000fbc <_sbrk>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_sbrk_r+0x1a>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_sbrk_r+0x1a>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20001448 	.word	0x20001448

0800912c <abort>:
 800912c:	b508      	push	{r3, lr}
 800912e:	2006      	movs	r0, #6
 8009130:	f000 f85a 	bl	80091e8 <raise>
 8009134:	2001      	movs	r0, #1
 8009136:	f7f7 fec8 	bl	8000eca <_exit>

0800913a <_realloc_r>:
 800913a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913e:	4680      	mov	r8, r0
 8009140:	4615      	mov	r5, r2
 8009142:	460c      	mov	r4, r1
 8009144:	b921      	cbnz	r1, 8009150 <_realloc_r+0x16>
 8009146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800914a:	4611      	mov	r1, r2
 800914c:	f7ff b9ce 	b.w	80084ec <_malloc_r>
 8009150:	b92a      	cbnz	r2, 800915e <_realloc_r+0x24>
 8009152:	f7ff f957 	bl	8008404 <_free_r>
 8009156:	2400      	movs	r4, #0
 8009158:	4620      	mov	r0, r4
 800915a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915e:	f000 f85f 	bl	8009220 <_malloc_usable_size_r>
 8009162:	4285      	cmp	r5, r0
 8009164:	4606      	mov	r6, r0
 8009166:	d802      	bhi.n	800916e <_realloc_r+0x34>
 8009168:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800916c:	d8f4      	bhi.n	8009158 <_realloc_r+0x1e>
 800916e:	4629      	mov	r1, r5
 8009170:	4640      	mov	r0, r8
 8009172:	f7ff f9bb 	bl	80084ec <_malloc_r>
 8009176:	4607      	mov	r7, r0
 8009178:	2800      	cmp	r0, #0
 800917a:	d0ec      	beq.n	8009156 <_realloc_r+0x1c>
 800917c:	42b5      	cmp	r5, r6
 800917e:	462a      	mov	r2, r5
 8009180:	4621      	mov	r1, r4
 8009182:	bf28      	it	cs
 8009184:	4632      	movcs	r2, r6
 8009186:	f7ff f910 	bl	80083aa <memcpy>
 800918a:	4621      	mov	r1, r4
 800918c:	4640      	mov	r0, r8
 800918e:	f7ff f939 	bl	8008404 <_free_r>
 8009192:	463c      	mov	r4, r7
 8009194:	e7e0      	b.n	8009158 <_realloc_r+0x1e>

08009196 <_raise_r>:
 8009196:	291f      	cmp	r1, #31
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4605      	mov	r5, r0
 800919c:	460c      	mov	r4, r1
 800919e:	d904      	bls.n	80091aa <_raise_r+0x14>
 80091a0:	2316      	movs	r3, #22
 80091a2:	6003      	str	r3, [r0, #0]
 80091a4:	f04f 30ff 	mov.w	r0, #4294967295
 80091a8:	bd38      	pop	{r3, r4, r5, pc}
 80091aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091ac:	b112      	cbz	r2, 80091b4 <_raise_r+0x1e>
 80091ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091b2:	b94b      	cbnz	r3, 80091c8 <_raise_r+0x32>
 80091b4:	4628      	mov	r0, r5
 80091b6:	f000 f831 	bl	800921c <_getpid_r>
 80091ba:	4622      	mov	r2, r4
 80091bc:	4601      	mov	r1, r0
 80091be:	4628      	mov	r0, r5
 80091c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c4:	f000 b818 	b.w	80091f8 <_kill_r>
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d00a      	beq.n	80091e2 <_raise_r+0x4c>
 80091cc:	1c59      	adds	r1, r3, #1
 80091ce:	d103      	bne.n	80091d8 <_raise_r+0x42>
 80091d0:	2316      	movs	r3, #22
 80091d2:	6003      	str	r3, [r0, #0]
 80091d4:	2001      	movs	r0, #1
 80091d6:	e7e7      	b.n	80091a8 <_raise_r+0x12>
 80091d8:	2100      	movs	r1, #0
 80091da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091de:	4620      	mov	r0, r4
 80091e0:	4798      	blx	r3
 80091e2:	2000      	movs	r0, #0
 80091e4:	e7e0      	b.n	80091a8 <_raise_r+0x12>
	...

080091e8 <raise>:
 80091e8:	4b02      	ldr	r3, [pc, #8]	@ (80091f4 <raise+0xc>)
 80091ea:	4601      	mov	r1, r0
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	f7ff bfd2 	b.w	8009196 <_raise_r>
 80091f2:	bf00      	nop
 80091f4:	20000038 	.word	0x20000038

080091f8 <_kill_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d07      	ldr	r5, [pc, #28]	@ (8009218 <_kill_r+0x20>)
 80091fc:	2300      	movs	r3, #0
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	4611      	mov	r1, r2
 8009204:	602b      	str	r3, [r5, #0]
 8009206:	f7f7 fe50 	bl	8000eaa <_kill>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	d102      	bne.n	8009214 <_kill_r+0x1c>
 800920e:	682b      	ldr	r3, [r5, #0]
 8009210:	b103      	cbz	r3, 8009214 <_kill_r+0x1c>
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	bd38      	pop	{r3, r4, r5, pc}
 8009216:	bf00      	nop
 8009218:	20001448 	.word	0x20001448

0800921c <_getpid_r>:
 800921c:	f7f7 be3d 	b.w	8000e9a <_getpid>

08009220 <_malloc_usable_size_r>:
 8009220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009224:	1f18      	subs	r0, r3, #4
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbc      	itt	lt
 800922a:	580b      	ldrlt	r3, [r1, r0]
 800922c:	18c0      	addlt	r0, r0, r3
 800922e:	4770      	bx	lr

08009230 <_init>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr

0800923c <_fini>:
 800923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923e:	bf00      	nop
 8009240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009242:	bc08      	pop	{r3}
 8009244:	469e      	mov	lr, r3
 8009246:	4770      	bx	lr
